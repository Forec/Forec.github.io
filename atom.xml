<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Forec&#39;s Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://forec.github.io/"/>
  <updated>2016-11-13T04:43:27.426Z</updated>
  <id>http://forec.github.io/</id>
  
  <author>
    <name>Forec</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简易云存储系统的认证、传输协议设计</title>
    <link href="http://forec.github.io/2016/11/13/cloud-storage-system-1/"/>
    <id>http://forec.github.io/2016/11/13/cloud-storage-system-1/</id>
    <published>2016-11-13T04:32:01.000Z</published>
    <updated>2016-11-13T04:43:27.426Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;分析、设计简易云存储系统之间的协议，包括用户客户端和服务器之间的认证协议、数据传输的协议以及新加入线程的认证。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;p&gt;此专栏的上一篇文章：&lt;a href=&quot;http://blog.forec.cn/2016/11/12/cloud-storage-system/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简易云存储系统项目简介&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;分析、设计简易云存储系统之间的协议，包括用户客户端和服务器之间的认证协议、数据传输的协议以及新加入线程的认证。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="Golang" scheme="http://forec.github.io/tags/Golang/"/>
    
      <category term="云存储" scheme="http://forec.github.io/tags/%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    
      <category term="线程" scheme="http://forec.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>简易云存储系统项目简介</title>
    <link href="http://forec.github.io/2016/11/12/cloud-storage-system/"/>
    <id>http://forec.github.io/2016/11/12/cloud-storage-system/</id>
    <published>2016-11-12T15:50:33.000Z</published>
    <updated>2016-11-13T04:39:19.321Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;此项目为我 2016 年其中一项课程设计。本文简单介绍此项目的设计目标，分析需求。此文章发布时项目尚未编写完成，与此项目相关的文章将随项目同步更新，并收集在&lt;a href=&quot;/columns/index.html&quot;&gt;专栏&lt;/a&gt;《云存储系统从入门到放弃》中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;此项目为我 2016 年的某项课程设计，项目题目为自拟，目标是实现一个简易的，与百度云功能类似的云存储系统。项目在 GitHub 托管仓库的网址是：&lt;a href=&quot;https://github.com/Forec/cloud-storage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Forec/cloud-storage&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;此项目为要实现的云存储系统的服务器，同时附带了一个用于测试的客户端（无GUI）。云存储系统正式的客户端目前正在由 &lt;a href=&quot;https://github.com/non1996&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;non1996&lt;/a&gt; 编写。在我写下这篇文章时，服务器已经实现了文件传输以外的多数逻辑功能，以及文件的并发下载。&lt;/li&gt;
&lt;li&gt;作为本科阶段的一项小型课程设计，且时间紧迫，&lt;strong&gt;我很遗憾此项目中很多实现非常 naive，许多地方为了简化实现，我采用了一些闭门造车的、很愚笨的、且与主流实现方案相悖的方式&lt;/strong&gt;。在将基本功能实现后，如果还有空余时间，我会尽量修正这些糟粕，简化代码。&lt;/li&gt;
&lt;li&gt;这个项目的 BETA 版本预计完成时间在 11 月底，12 月上旬将完成客户端的图形界面，12 月中旬将完成 Web 版本。如果还有空余时间，可能会考虑实现一个 Android 客户端。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;项目介绍&quot;&gt;&lt;a href=&quot;#项目介绍&quot; class=&quot;headerlink&quot; title=&quot;项目介绍&quot;&gt;&lt;/a&gt;项目介绍&lt;/h1&gt;&lt;h2 id=&quot;面向用户功能&quot;&gt;&lt;a href=&quot;#面向用户功能&quot; class=&quot;headerlink&quot; title=&quot;面向用户功能&quot;&gt;&lt;/a&gt;面向用户功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;文件存储：用户可将文件上传至云服务器&lt;/li&gt;
&lt;li&gt;文件下载：用户可从云服务器下载文件&lt;/li&gt;
&lt;li&gt;文件传输状态保存（视项目进度快慢考虑）：支持用户下载/上传文件过程中暂停&lt;/li&gt;
&lt;li&gt;文件共享：用户间可分享资源，通过共享链接和提取码获取其他用户的私有分享文件&lt;/li&gt;
&lt;li&gt;文件秒传：云存储空间存在相同文件时直接 Fork&lt;/li&gt;
&lt;li&gt;Fork：用户可 Fork 其他用户分享的文件至自己的存储空间&lt;/li&gt;
&lt;li&gt;文件操作：用户可对自己上传的文件/Fork的文件进行管理，包括最基本的拷贝、移动、删除&lt;/li&gt;
&lt;li&gt;目录操作：用户可对自己存储空间中的文件目录进行管理，包括最基本的拷贝、移动、删除、新建&lt;/li&gt;
&lt;li&gt;在线编辑：用户可在客户端/Web端即时新建并编辑一个文本文件，并随时更新至云服务器&lt;/li&gt;
&lt;li&gt;图片在线浏览：用户可在线浏览云服务器上的图片&lt;/li&gt;
&lt;li&gt;视频在线播放：用户可在客户端播放云服务器上的视频文件&lt;/li&gt;
&lt;li&gt;基本用户交流：用户间可以发送消息，可进行时延不高的延时通讯&lt;/li&gt;
&lt;li&gt;URL导入数据（视项目进度快慢考虑）：用户可从 URL 导入文件至云存储，即实现类似迅雷离线下载功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;系统功能&quot;&gt;&lt;a href=&quot;#系统功能&quot; class=&quot;headerlink&quot; title=&quot;系统功能&quot;&gt;&lt;/a&gt;系统功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;文件分块、重用：将文件分块存储，不同文件的相同块仅存储一次，节省物理存储空间。在要实现的云存储系统中，为了降低复杂度，文件将不分块存储，仅仅实现相同文件的重用&lt;/li&gt;
&lt;li&gt;文件压缩存储、传输：用户上传、下载的文件应采用某种压缩算法以节省带宽&lt;/li&gt;
&lt;li&gt;文件并发下载：用户下载多个文件时，在允许线程内应支持并发下载&lt;/li&gt;
&lt;li&gt;文件传输状态保存（视项目进度快慢考虑）：用户下载/上传文件过程中触发终端操作时，传输进度的保存&lt;/li&gt;
&lt;li&gt;用户目录管理：系统应当对每个用户分别维护文件目录结构&lt;/li&gt;
&lt;li&gt;用户权限管理：用户文件只能被用户自己或其他持有文件提取码的用户查看、下载、Fork，用户文件只能由用户自身管理（移动、删除、设置私有/分享）&lt;/li&gt;
&lt;li&gt;用户消息推送：管理员可以向用户推送消息&lt;/li&gt;
&lt;li&gt;用户消息传递：系统应提供渠道使用户间的消息在短时延内交互，如用户间分享文件提取码&lt;/li&gt;
&lt;li&gt;用户认证管理：同一时刻允许且仅允许一个用户客户端在线，后登录的客户端应当使先登录的客户端下线。数据库中应存储用户密码的不可逆加密值，用户登录及文件传输过程应使用随机密钥加密（保险的方式是对随机密钥采用非对称加密，但为了简化实现难度，要实现的云存储系统将使用对称加密算法，因此安全性有很大隐患，在后面的文章中将分析对我实现的云存储系统进行中间人攻击的可行性）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;原理分析&quot;&gt;&lt;a href=&quot;#原理分析&quot; class=&quot;headerlink&quot; title=&quot;原理分析&quot;&gt;&lt;/a&gt;原理分析&lt;/h1&gt;&lt;h2 id=&quot;存储逻辑&quot;&gt;&lt;a href=&quot;#存储逻辑&quot; class=&quot;headerlink&quot; title=&quot;存储逻辑&quot;&gt;&lt;/a&gt;存储逻辑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;要实现重复文件的非冗余存储，需要对每个上传的文件块（在要实现的云存储系统中，因为去除了文件分块操作，因此下面所有“文件块”实际上是文件）计算该文件块的 MD5 值，与数据库中已存在的 MD5 值对比，相同则直接 Fork 并取消用户的上传操作（文件秒传）。&lt;/li&gt;
&lt;li&gt;相同的文件块仅存储一次，每个文件块应当维护一个“&lt;strong&gt;引用值&lt;/strong&gt;”。“引用”的定义为：当多个用户在各自的存储空间中分别保存同一个文件一次或多次，则实际上这些文件均指向同一个文件块 B，而在物理存储中，文件块 B 仅存储一次。我们称这些用户各自存储空间中的文件记录&lt;strong&gt;引用&lt;/strong&gt;了 B，称这些用户在各自存储空间中指向 B 的文件记录为 &lt;strong&gt;B 的引用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;根据引用的定义，只要存在某个用户在自己的云存储空间中保存了文件块 B 的引用，该文件块就不能删除。当某个用户对文件块 B 的引用做复制、Fork操作时，文件块 B 的引用值应当随操作数增加；当某个用户删除文件块 B 的某个引用时，文件块 B 的引用值应随删除次数减少。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;存储逻辑对用户不可见&lt;/strong&gt;，即用户可以修改自己用户空间中的引用（引用实际就是用户所看见的文件），如重命名、移动、复制等，但修改的对象仅仅是用户空间中的引用，而非真实的文件块。只有用户对引用的内容做修改时（例如此引用指向一个文本文件，用户修改了文本文件的内容并试图保存），系统才应当创建新的文件块以记录修改。&lt;strong&gt;在下面的介绍中，“引用”和“文件”等价，均为数据库中指向文件块的一条记录，而“文件块”才代表真正物理存储中的文件。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户目录维护&lt;/strong&gt;：为了简化用户存储空间的目录维护，我将每个目录均视作一类&lt;strong&gt;特殊的引用&lt;/strong&gt;，关于这一点的原因、实现和分析将在后面的文章中讨论。举个例子，用户云存储空间中有一个文件 &lt;code&gt;/home/forec/run.sh&lt;/code&gt; ，则在数据库的引用表中，有四条记录属于该用户，分别是 &lt;code&gt;/&lt;/code&gt;，&lt;code&gt;/home/&lt;/code&gt;，&lt;code&gt;/home/forec/&lt;/code&gt; 和 &lt;code&gt;run.sh&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;数据库结构&quot;&gt;&lt;a href=&quot;#数据库结构&quot; class=&quot;headerlink&quot; title=&quot;数据库结构&quot;&gt;&lt;/a&gt;数据库结构&lt;/h2&gt;&lt;p&gt;根据存储逻辑和之前的功能介绍，我们需要五个表分别记录：文件块、文件块的引用、用户、用户消息、用户操作记录。&lt;/p&gt;
&lt;h3 id=&quot;文件块表&quot;&gt;&lt;a href=&quot;#文件块表&quot; class=&quot;headerlink&quot; title=&quot;文件块表&quot;&gt;&lt;/a&gt;文件块表&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;文件块的 ID：此列应为该表的主键，自增，&lt;code&gt;INTEGER PRIMARY KEY AUTOINCREMENT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件块的 MD5值，&lt;code&gt;VARCHAR(32)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件块的大小，单位为字节：&lt;code&gt;INTEGER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件块的引用数：&lt;code&gt;INTEGER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件块的创建时间：&lt;code&gt;DATE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;文件块引用表&quot;&gt;&lt;a href=&quot;#文件块引用表&quot; class=&quot;headerlink&quot; title=&quot;文件块引用表&quot;&gt;&lt;/a&gt;文件块引用表&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;文件块引用的 ID：此列应为该表的主键，自增，&lt;code&gt;INTEGER PRIMARY KEY AUTOINCREMENT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;文件块引用的所属用户 ID：&lt;code&gt;INTEGER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引用的文件块的 ID：&lt;code&gt;INTEGER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引用在用户目录下的绝对路径：用户根目录为 &lt;code&gt;/&lt;/code&gt;，此列类似 &lt;code&gt;/home/work/cloud/&lt;/code&gt;，&lt;code&gt;VARCHAR(256)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引用的外链：当用户试图共享此引用时，其他用户可以通过外链访问此引用（Web端，客户端应当可以解析此外链并在客户端中打开）。如果该引用为私有，其他用户需要输入提取码才可查看，&lt;code&gt;VARCHAR(128)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引用创建的时间：&lt;code&gt;DATE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引用的分享数：当一个用户分享该引用时，如果其它用户 Fork 了该引用，则该引用的分享数应增加。与 GitHub 上的 Fork 操作不同的是，如果用户 B Fork 了用户 A 的某个引用，用户 C 又从用户 B Fork 了这个引用，则 A 的引用分享数增加 1（B 的 Fork 操作），用户 B 的引用分享数增加 1（C 的 Fork 操作），&lt;code&gt;INTEGER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引用的下载数：当一个用户从此引用下载对应的文件块时，此引用下载数增加，&lt;code&gt;INTEGER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引用的文件名：此项为用户所看到的文件名，可能有多个不同名的引用指向同一个文件块，&lt;code&gt;VARCHAR(128)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引用的私有性：此引用是否对其它用户可见，默认为私有，即仅用户个人可见，&lt;code&gt;BOOLEAN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引用的提取码：在用户设置引用为私有的情况下，可以生成外链，持有该外链提取码的其它用户可以查看该引用，&lt;code&gt;VARCHAR(4)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;引用是否为目录：此引用是一个目录（文件夹）还是一个文件，&lt;code&gt;BOOLEAN&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;用户列表&quot;&gt;&lt;a href=&quot;#用户列表&quot; class=&quot;headerlink&quot; title=&quot;用户列表&quot;&gt;&lt;/a&gt;用户列表&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;用户的 ID：此列应为该表的主键，自增，&lt;code&gt;INTEGER PRIMARY KEY AUTOINCREMENT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用户名：此列应唯一，&lt;code&gt;VARCHAR(64)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用户密码加密后的值：&lt;code&gt;VARCHAR(128)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用户创建时间：&lt;code&gt;DATE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;用户消息列表&quot;&gt;&lt;a href=&quot;#用户消息列表&quot; class=&quot;headerlink&quot; title=&quot;用户消息列表&quot;&gt;&lt;/a&gt;用户消息列表&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;消息的 ID：此列应为该表的主键，自增，&lt;code&gt;INTEGER PRIMARY KEY AUTOINCREMENT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;接收消息的用户的 ID：&lt;code&gt;INTEGER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;发送消息的用户的 ID：&lt;code&gt;INTEGER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;消息内容：&lt;code&gt;VARCHAR(512)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;消息发送时间：&lt;code&gt;DATE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;用户操作记录列表&quot;&gt;&lt;a href=&quot;#用户操作记录列表&quot; class=&quot;headerlink&quot; title=&quot;用户操作记录列表&quot;&gt;&lt;/a&gt;用户操作记录列表&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;操作记录的 ID：此列应为该表的主键，自增，&lt;code&gt;INTEGER PRIMARY KEY AUTOINCREMENT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用户的 ID：&lt;code&gt;INTEGER&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;操作内容：&lt;code&gt;VARCHAR(128)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;操作时间：&lt;code&gt;DATE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此专栏的下一篇文章：&lt;a href=&quot;http://blog.forec.cn/2016/11/13/cloud-storage-system-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;简易云存储系统的认证、传输协议设计&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2016/11/12/cloud-storage-system/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2016/11/12/cloud-storage-system/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2016/11/12/cloud-storage-system/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此项目为我 2016 年其中一项课程设计。本文简单介绍此项目的设计目标，分析需求。此文章发布时项目尚未编写完成，与此项目相关的文章将随项目同步更新，并收集在&lt;a href=&quot;/columns/index.html&quot;&gt;专栏&lt;/a&gt;《云存储系统从入门到放弃》中。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="Golang" scheme="http://forec.github.io/tags/Golang/"/>
    
      <category term="云存储" scheme="http://forec.github.io/tags/%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    
      <category term="线程" scheme="http://forec.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>CVM 操作记录</title>
    <link href="http://forec.github.io/2016/11/02/cloud-virtual-machine-config/"/>
    <id>http://forec.github.io/2016/11/02/cloud-virtual-machine-config/</id>
    <published>2016-11-02T15:08:14.000Z</published>
    <updated>2016-11-05T09:51:52.790Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;CVM 上的操作记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;CentOS-7-2&quot;&gt;&lt;a href=&quot;#CentOS-7-2&quot; class=&quot;headerlink&quot; title=&quot;CentOS 7.2&quot;&gt;&lt;/a&gt;CentOS 7.2&lt;/h1&gt;&lt;h2 id=&quot;ngrok-服务器搭建&quot;&gt;&lt;a href=&quot;#ngrok-服务器搭建&quot; class=&quot;headerlink&quot; title=&quot;ngrok 服务器搭建&quot;&gt;&lt;/a&gt;ngrok 服务器搭建&lt;/h2&gt;&lt;p&gt;可参考 imike 的&lt;a href=&quot;http://www.imike.me/2016/03/23/CentOS%E4%B8%8B%E9%83%A8%E7%BD%B2Ngrok%E6%9C%8D%E5%8A%A1%E5%99%A8/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;CentOS下部署Ngrok服务器&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装依赖库  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo yum update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo yum install build-essential golang mercurial git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;获取 ngrok 源码  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/inconshreveable/ngrok.git ngrok&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ngrok&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;生成证书并替换代码中默认证书，修改域名为解析到云主机的域名。  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NGROK_DOMAIN=&lt;span class=&quot;string&quot;&gt;&quot;cross.forec.cn&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openssl genrsa -out base.key &lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openssl req -new -x509 -nodes -key base.key -days &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt; -subj &lt;span class=&quot;string&quot;&gt;&quot;/CN=&lt;span class=&quot;variable&quot;&gt;$NGROK_DOMAIN&lt;/span&gt;&quot;&lt;/span&gt; -out base.pem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openssl genrsa -out server.key &lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openssl req -new -key server.key -subj &lt;span class=&quot;string&quot;&gt;&quot;/CN=&lt;span class=&quot;variable&quot;&gt;$NGROK_DOMAIN&lt;/span&gt;&quot;&lt;/span&gt; -out server.csr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openssl x509 -req -in server.csr -CA base.pem -CAkey base.key -CAcreateserial -days &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt; -out server.crt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp base.pem assets/client/tls/ngrokroot.crt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;编译：&lt;code&gt;sudo make release-server release-client&lt;/code&gt;，便宜结束后 &lt;code&gt;bin&lt;/code&gt; 目录下会有 &lt;code&gt;ngrokd&lt;/code&gt; 和 &lt;code&gt;ngrok&lt;/code&gt; 两个可执行文件，对应服务器和客户端。  &lt;/li&gt;
&lt;li&gt;不同系统使用的客户端需要重新编译  &lt;ul&gt;
&lt;li&gt;windows: &lt;code&gt;sudo GOOS=windows GOARCH=amd64 CGO_ENABLED=0 make release-client make release-client&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;arm: &lt;code&gt;sudo GOOS=linux GOARCH=arm CGO_ENABLED=0 make release-client make release-client&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;mac: &lt;code&gt;sudo GOOS=darwin GOARCH=amd64 make release-client&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设置域名解析，增加记录 &lt;code&gt;A&lt;/code&gt;，主机记录为 &lt;code&gt;cross&lt;/code&gt;，记录值为云主机公网 IP。  &lt;/li&gt;
&lt;li&gt;启动服务器，下面命令指定 http 端口映射到 &lt;code&gt;8081&lt;/code&gt;，&lt;code&gt;https&lt;/code&gt; 映射到 8082。 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./bin/ngrokd -tlsKey=server&lt;span class=&quot;class&quot;&gt;.key&lt;/span&gt; -tlsCrt=server&lt;span class=&quot;class&quot;&gt;.crt&lt;/span&gt; -domain=&lt;span class=&quot;string&quot;&gt;&quot;cross.forec.cn&quot;&lt;/span&gt; -httpAddr=&lt;span class=&quot;string&quot;&gt;&quot;:8081&quot;&lt;/span&gt; -httpsAddr=&lt;span class=&quot;string&quot;&gt;&quot;:8082&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;域名解析&quot;&gt;&lt;a href=&quot;#域名解析&quot; class=&quot;headerlink&quot; title=&quot;域名解析&quot;&gt;&lt;/a&gt;域名解析&lt;/h2&gt;&lt;p&gt;将 &lt;a href=&quot;http://blog.forec.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn&lt;/a&gt; 解析至 &lt;a href=&quot;https://forec.github.io&quot;&gt;https://forec.github.io&lt;/a&gt;。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向解析列表添加一条 &lt;code&gt;CNAME&lt;/code&gt; 记录，主机记录为 &lt;code&gt;blog&lt;/code&gt;，记录值为 &lt;code&gt;forec.github.io&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;在 Github 博客仓库中根目录添加一个文件，文件名为 &lt;code&gt;CNAME&lt;/code&gt;，文件内容为 &lt;code&gt;blog.forec.cn&lt;/code&gt;。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;开启-IPv6&quot;&gt;&lt;a href=&quot;#开启-IPv6&quot; class=&quot;headerlink&quot; title=&quot;开启 IPv6&quot;&gt;&lt;/a&gt;开启 IPv6&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;新建 &lt;code&gt;/etc/modprobe.d/ipv6.conf&lt;/code&gt;，添加 &lt;code&gt;options ipv6 disable=0&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;向自启动脚本添加 &lt;code&gt;sysctl -w net.ipv6.conf.all.disable_ipv6=0&lt;/code&gt;。  &lt;/li&gt;
&lt;li&gt;重启，或直接运行上面的命令，观察 &lt;code&gt;ifconfig&lt;/code&gt; 结果。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;使用-tunnelbroker-分配-IPv6-地址&quot;&gt;&lt;a href=&quot;#使用-tunnelbroker-分配-IPv6-地址&quot; class=&quot;headerlink&quot; title=&quot;使用 tunnelbroker 分配 IPv6 地址&quot;&gt;&lt;/a&gt;使用 tunnelbroker 分配 IPv6 地址&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在 tunnelbroker 注册，并分配一个 tunnel，填入 VPS 外网 IPv4 地址。  &lt;/li&gt;
&lt;li&gt;在 tunnel 的 example configuration 选项卡下选择 &lt;code&gt;Linux-route2&lt;/code&gt;，将生成的脚本拷贝到自启动脚本中。  &lt;/li&gt;
&lt;li&gt;重启，观察 &lt;code&gt;ifconfig&lt;/code&gt;，应增加一个 &lt;code&gt;he-ipv6&lt;/code&gt; 网卡，并可看到对应 IPv6 地址。  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Nginx-配置&quot;&gt;&lt;a href=&quot;#Nginx-配置&quot; class=&quot;headerlink&quot; title=&quot;Nginx 配置&quot;&gt;&lt;/a&gt;Nginx 配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从官网获得 nginx 最新版本链接，wget 到本地  &lt;/li&gt;
&lt;li&gt;安装编译依赖包： &lt;code&gt;yum -y install zlib zlib-devel openssl openssl--devel pcre   pcre-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装 nginx 依赖包：&lt;code&gt;yum install GeoIP gd libXpm libxslt&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;编译、安装  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tar -zxvf nginx-&lt;span class=&quot;number&quot;&gt;1.10&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt;.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd nginx-&lt;span class=&quot;number&quot;&gt;1.10&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./configure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/usr/local/nginx/sbin/nginx&lt;/code&gt; 运行，在浏览器输入 IP 观察是否显示欢迎页  &lt;/li&gt;
&lt;li&gt;向 &lt;code&gt;/etc/profile&lt;/code&gt; 增加环境变量并 &lt;code&gt;source /etc/profile&lt;/code&gt; 更新  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PATH=/usr/local/nginx/sbin:&lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;为-Ngrok-做反向代理&quot;&gt;&lt;a href=&quot;#为-Ngrok-做反向代理&quot; class=&quot;headerlink&quot; title=&quot;为 Ngrok 做反向代理&quot;&gt;&lt;/a&gt;为 Ngrok 做反向代理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;要令 &lt;code&gt;monitor.cross.forec.cn&lt;/code&gt; 作为 ngrok 代理，该域名对应的 80 端口转发至本地 9999 端口。在 &lt;code&gt;/usr/local/nginx/conf&lt;/code&gt; 增加配置文件 &lt;code&gt;ngrok_monitor.conf&lt;/code&gt;。  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;server&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        listen &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        server_name monitor.cross.forec.cn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header X-Real-IP &lt;span class=&quot;variable&quot;&gt;$remote&lt;/span&gt;_addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header X-Forwarded-For &lt;span class=&quot;variable&quot;&gt;$proxy&lt;/span&gt;_add_x_forwarded_for;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header Host &lt;span class=&quot;variable&quot;&gt;$http&lt;/span&gt;_host:&lt;span class=&quot;number&quot;&gt;8081&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header X-Nginx-Proxy true;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_set_header Connection &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                proxy_pass http://&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;9999&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;安装-MySQL&quot;&gt;&lt;a href=&quot;#安装-MySQL&quot; class=&quot;headerlink&quot; title=&quot;安装 MySQL&quot;&gt;&lt;/a&gt;安装 MySQL&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;腾讯云 CentOS 7.2 的 yum 源不提供 &lt;code&gt;mysql-server&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;下载 mysql 的 repo 源： &lt;code&gt;wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;安装源： &lt;code&gt;sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;安装 mysql ：&lt;code&gt;sudo yum install mysql-server&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;启动 mysqld 服务：&lt;code&gt;systemctl start  mysqld.service&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;修改密码：&lt;code&gt;mysqladmin -u USER -p password PASSWORD&lt;/code&gt; 或使用 root 账户登入 mysql，执行&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;USE&lt;/span&gt; mysql;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;UPDATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;password&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;PASSWORD&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;123456&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;root&#39;&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;operator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;FLUSH&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;PRIVILEGES&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;开机启动 mysqld 服务：&lt;code&gt;systemctl enable mysqld.service&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;WordPress-Nginx-配置&quot;&gt;&lt;a href=&quot;#WordPress-Nginx-配置&quot; class=&quot;headerlink&quot; title=&quot;WordPress + Nginx 配置&quot;&gt;&lt;/a&gt;WordPress + Nginx 配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装 Mysql、PHP 和 nginx： &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-on-centos-6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How To Install Linux, nginx, MySQL, PHP (LEMP) stack on CentOS 6&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;安装 WordPress 并配置 nginx ：&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-nginx-on-centos-6--2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How To Install Wordpress with nginx on CentOS 6&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;修改静态链接代理：在 wordpress 的 nginx 配置文件中的 &lt;code&gt;locatino / {}&lt;/code&gt; 下添加：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight xquery&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (-f &lt;span class=&quot;variable&quot;&gt;$request&lt;/span&gt;_filename/index.html)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rewrite (.*) &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;/index.html break;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (-f &lt;span class=&quot;variable&quot;&gt;$request&lt;/span&gt;_filename/index.php)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rewrite (.*) &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;/index.php;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!-f &lt;span class=&quot;variable&quot;&gt;$request&lt;/span&gt;_filename)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rewrite (.*) /index.php;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Nginx-HTTPS-配置&quot;&gt;&lt;a href=&quot;#Nginx-HTTPS-配置&quot; class=&quot;headerlink&quot; title=&quot;Nginx HTTPS 配置&quot;&gt;&lt;/a&gt;Nginx HTTPS 配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装 openssl 和 openssl-devel：&lt;code&gt;yum install openssl openssl-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;颁发证书&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd /usr/local/nginx/conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openssl genrsa -des3 -out server&lt;span class=&quot;class&quot;&gt;.key&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openssl req -new -key server&lt;span class=&quot;class&quot;&gt;.key&lt;/span&gt; -out server&lt;span class=&quot;class&quot;&gt;.csr&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openssl rsa -&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; server&lt;span class=&quot;class&quot;&gt;.key&lt;/span&gt; -out server_nopwd&lt;span class=&quot;class&quot;&gt;.key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;openssl x509 -req -days &lt;span class=&quot;number&quot;&gt;365&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; server&lt;span class=&quot;class&quot;&gt;.csr&lt;/span&gt; -signkey server_nopwd&lt;span class=&quot;class&quot;&gt;.key&lt;/span&gt; -out server.crt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;增加配置文件 &lt;code&gt;wordpress_https.conf&lt;/code&gt;，除下面部分，其它和 wordpress 配置文件相同&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight dust&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;server &lt;/span&gt;&lt;span class=&quot;expression&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;listen&lt;/span&gt; 443;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;sever&lt;/span&gt;_&lt;span class=&quot;variable&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;forec.cn&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;ssl&lt;/span&gt;_&lt;span class=&quot;variable&quot;&gt;certificate&lt;/span&gt;  &lt;span class=&quot;end-block&quot;&gt;/usr&lt;/span&gt;&lt;span class=&quot;end-block&quot;&gt;/local&lt;/span&gt;&lt;span class=&quot;end-block&quot;&gt;/nginx&lt;/span&gt;&lt;span class=&quot;end-block&quot;&gt;/conf&lt;/span&gt;&lt;span class=&quot;end-block&quot;&gt;/server.crt&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable&quot;&gt;ssl&lt;/span&gt;_&lt;span class=&quot;variable&quot;&gt;certificate&lt;/span&gt;_&lt;span class=&quot;variable&quot;&gt;key&lt;/span&gt;  &lt;span class=&quot;end-block&quot;&gt;/usr&lt;/span&gt;&lt;span class=&quot;end-block&quot;&gt;/local&lt;/span&gt;&lt;span class=&quot;end-block&quot;&gt;/nginx&lt;/span&gt;&lt;span class=&quot;end-block&quot;&gt;/conf&lt;/span&gt;&lt;span class=&quot;end-block&quot;&gt;/server&lt;/span&gt;_&lt;span class=&quot;variable&quot;&gt;nopwd.key&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/11/02/cloud-virtual-machine-config/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/11/02/cloud-virtual-machine-config/&quot;&gt;https://forec.github.io/2016/11/02/cloud-virtual-machine-config/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CVM 上的操作记录。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Configuration" scheme="http://forec.github.io/categories/Configuration/"/>
    
    
      <category term="CVM" scheme="http://forec.github.io/tags/CVM/"/>
    
      <category term="OS" scheme="http://forec.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi 3 配置索引</title>
    <link href="http://forec.github.io/2016/10/29/raspberry-settings/"/>
    <id>http://forec.github.io/2016/10/29/raspberry-settings/</id>
    <published>2016-10-29T06:49:23.000Z</published>
    <updated>2016-11-12T04:49:34.600Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;整理 Raspberry Pi 3 的个人配置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;树莓派及配件型号&quot;&gt;&lt;a href=&quot;#树莓派及配件型号&quot; class=&quot;headerlink&quot; title=&quot;树莓派及配件型号&quot;&gt;&lt;/a&gt;树莓派及配件型号&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;树莓派型号：Raspberry Pi 3 Model B , Made in United Kingdom&lt;/li&gt;
&lt;li&gt;摄像头型号：1/4 inch OV5647 ，500W 像素，最高帧速 30，视频支持 1080p，made by OmniVision&lt;/li&gt;
&lt;li&gt;舵机型号：辉盛 SG90 （2个）&lt;/li&gt;
&lt;li&gt;2自由度舵机云台 （1个）&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;RASPBIAN-JESSIE&quot;&gt;&lt;a href=&quot;#RASPBIAN-JESSIE&quot; class=&quot;headerlink&quot; title=&quot;RASPBIAN-JESSIE&quot;&gt;&lt;/a&gt;RASPBIAN-JESSIE&lt;/h1&gt;&lt;h2 id=&quot;镜像源修改&quot;&gt;&lt;a href=&quot;#镜像源修改&quot; class=&quot;headerlink&quot; title=&quot;镜像源修改&quot;&gt;&lt;/a&gt;镜像源修改&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编辑 &lt;code&gt;/etc/apt/sources.list&lt;/code&gt; ，注释原有源&lt;/li&gt;
&lt;li&gt;添加&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;deb &lt;span class=&quot;symbol&quot;&gt;http:&lt;/span&gt;/&lt;span class=&quot;regexp&quot;&gt;/mirrors.ustc.edu.cn/raspbian&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/raspbian/&lt;/span&gt; wheezy main non-free contrib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;deb-src &lt;span class=&quot;symbol&quot;&gt;http:&lt;/span&gt;/&lt;span class=&quot;regexp&quot;&gt;/mirrors.ustc.edu.cn/raspbian&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/raspbian/&lt;/span&gt; wheezy main non-free contrib&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get update&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;自启动脚本&quot;&gt;&lt;a href=&quot;#自启动脚本&quot; class=&quot;headerlink&quot; title=&quot;自启动脚本&quot;&gt;&lt;/a&gt;自启动脚本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;向 &lt;code&gt;/etc/rc.local&lt;/code&gt; 中写入 &lt;code&gt;su username -c &amp;quot;/path/to/autostart.sh&amp;quot;&lt;/code&gt;，&lt;code&gt;autostart.sh&lt;/code&gt; 为你编写的自启动脚本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;校园网关登陆&quot;&gt;&lt;a href=&quot;#校园网关登陆&quot; class=&quot;headerlink&quot; title=&quot;校园网关登陆&quot;&gt;&lt;/a&gt;校园网关登陆&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可从我的 Github 托管仓库下载网关登陆 Python 脚本，在自启动脚本中加入 &lt;code&gt;python login.py username passwd&lt;/code&gt;，下载地址：&lt;a href=&quot;https://github.com/Forec/scripts-for-bupt/tree/master/login-bupt-gw&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/Forec/scripts-for-bupt/tree/master/login-bupt-gw&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;定时任务&quot;&gt;&lt;a href=&quot;#定时任务&quot; class=&quot;headerlink&quot; title=&quot;定时任务&quot;&gt;&lt;/a&gt;定时任务&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;执行 &lt;code&gt;crontab -e&lt;/code&gt; 设定定时任务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;dev-video0-未找到&quot;&gt;&lt;a href=&quot;#dev-video0-未找到&quot; class=&quot;headerlink&quot; title=&quot;/dev/video0 未找到&quot;&gt;&lt;/a&gt;/dev/video0 未找到&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;树莓派的 Camare module 在 &lt;code&gt;/boot/&lt;/code&gt; 目录下以固件形式加载&lt;/li&gt;
&lt;li&gt;编辑 &lt;code&gt;/etc/modules-load.d/modules.conf&lt;/code&gt; ，文件末尾添加 &lt;code&gt;bcm2835-v4l2&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;WiFi-登陆&quot;&gt;&lt;a href=&quot;#WiFi-登陆&quot; class=&quot;headerlink&quot; title=&quot;WiFi 登陆&quot;&gt;&lt;/a&gt;WiFi 登陆&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifconfig&lt;/code&gt;查看是否有 wlan0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo nano /etc/network/interfaces&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改文件内容如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;auto lo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iface lo &lt;span class=&quot;keyword&quot;&gt;inet&lt;/span&gt; loopback&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iface eth0 &lt;span class=&quot;keyword&quot;&gt;inet&lt;/span&gt; dhcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;auto wlan0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;allow-hotplug wlan0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;iface wlan0 &lt;span class=&quot;keyword&quot;&gt;inet&lt;/span&gt; dhcp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wpa-ssid &lt;span class=&quot;string&quot;&gt;&quot;ssid_name&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wpa-psk &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo /etc/init.d/networking restart&lt;/code&gt; 重启网络&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;修改默认账号-pi&quot;&gt;&lt;a href=&quot;#修改默认账号-pi&quot; class=&quot;headerlink&quot; title=&quot;修改默认账号 pi&quot;&gt;&lt;/a&gt;修改默认账号 pi&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo raspi-config&lt;/code&gt; 启动 VNC&lt;/li&gt;
&lt;li&gt;启用 root 账号&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo passwd root&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo passwd --unlock root&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;重启后以 root 登陆（从 VNC 登陆）&lt;/li&gt;
&lt;li&gt;修改用户名 pi 为 username：&lt;code&gt;usermod -l username pi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改组名 pi 为 username：&lt;code&gt;groupmod -n username pi&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更改 pi 的家目录为 username 家目录：&lt;code&gt;mv /home/pi /home/username&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改 /etc/passwd 中 username 用户的家目录地址：&lt;code&gt;usermod -d /home/username username&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编辑 /etc/sudoers，修改末尾的 &lt;code&gt;pi ALL=(ALL) NOPASSWD: ALL&lt;/code&gt; 为 &lt;code&gt;username ALL=(ALL) NOPASSWD: ALL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重新锁定 root：&lt;code&gt;passwd -l root&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;以新用户 ssh 登陆并尝试 sudo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Motion-配置&quot;&gt;&lt;a href=&quot;#Motion-配置&quot; class=&quot;headerlink&quot; title=&quot;Motion 配置&quot;&gt;&lt;/a&gt;Motion 配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编辑 &lt;code&gt;/etc/motion/motion.conf&lt;/code&gt; ，修改以下项：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;daemon&lt;/code&gt; : 修改为 on，使 motion 以守护进程方式运行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt; : 修改为 1024&lt;/li&gt;
&lt;li&gt;&lt;code&gt;height&lt;/code&gt; : 修改为 768&lt;/li&gt;
&lt;li&gt;&lt;code&gt;framerate&lt;/code&gt; ： 修改为 24&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output_normal&lt;/code&gt;：修改为 off（在检测到运动时不截图，若想记录则保持 on）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ffmpeg_video_codec&lt;/code&gt; ： 修改为 mpeg4&lt;/li&gt;
&lt;li&gt;&lt;code&gt;control_localhost&lt;/code&gt; ： 修改为 off，允许远程修改配置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;control_authentication&lt;/code&gt; ： 为远程操控配置设置认证信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webcam_localhost&lt;/code&gt; ： 允许远程访问监控流&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webcam_motion&lt;/code&gt;：修改为 on，仅在检测到运动时增加帧速&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webcam_maxrate&lt;/code&gt;：修改为远程监控需要的帧速&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;编辑 &lt;code&gt;/etc/defaults/motion&lt;/code&gt;，将 &lt;code&gt;start_motion_daemon&lt;/code&gt; 修改为 &lt;code&gt;yes&lt;/code&gt;，设置为开机启动&lt;/li&gt;
&lt;li&gt;创建 &lt;code&gt;/var/run/motion&lt;/code&gt; 文件夹&lt;/li&gt;
&lt;li&gt;在家目录下 创建 &lt;code&gt;.motion&lt;/code&gt; 文件夹&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cp /etc/motion/motion.conf ~/.motion/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改配置权限为非 root 用户：&lt;code&gt;sudo chown forec:forec ~/.motion/motion.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;VNC-分辨率调整&quot;&gt;&lt;a href=&quot;#VNC-分辨率调整&quot; class=&quot;headerlink&quot; title=&quot;VNC 分辨率调整&quot;&gt;&lt;/a&gt;VNC 分辨率调整&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在自启动脚本中加入 &lt;code&gt;vncserver -geometry widthxheight :1&lt;/code&gt;，将分辨率设置为 width × height，通过 &lt;code&gt;address:1&lt;/code&gt; 访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vncpasswd&lt;/code&gt; 修改密码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;mstsc-访问&quot;&gt;&lt;a href=&quot;#mstsc-访问&quot; class=&quot;headerlink&quot; title=&quot;mstsc 访问&quot;&gt;&lt;/a&gt;mstsc 访问&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装 xrdp&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;SSH-公钥登陆&quot;&gt;&lt;a href=&quot;#SSH-公钥登陆&quot; class=&quot;headerlink&quot; title=&quot;SSH 公钥登陆&quot;&gt;&lt;/a&gt;SSH 公钥登陆&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ssh-copy-id user@host&lt;/code&gt; ，将本地公钥上传到树莓派。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;内网穿透&quot;&gt;&lt;a href=&quot;#内网穿透&quot; class=&quot;headerlink&quot; title=&quot;内网穿透&quot;&gt;&lt;/a&gt;内网穿透&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;ngrok&lt;/code&gt; 将内网端口映射到固定域名。将在云主机编译好的 arm 版本 &lt;code&gt;ngrok&lt;/code&gt; 拷贝到树莓派。&lt;/li&gt;
&lt;li&gt;新建一个配置文件&lt;code&gt;ngrok.cfg&lt;/code&gt;。我为内网穿透服务设置的网址为 &lt;code&gt;cross.forec.cn&lt;/code&gt;，云主机上 ngrok 服务器设置的监听端口为 4443，&lt;code&gt;remote_port&lt;/code&gt;选项对 tcp 有效，指定映射后的云主机的端口。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight less&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;server_addr&lt;/span&gt;: cross.forec.&lt;span class=&quot;attribute&quot;&gt;cn&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;4443&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;trust_host_root_certs&lt;/span&gt;: false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;tunnels&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attribute&quot;&gt;ssh&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;proto&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attribute&quot;&gt;tcp&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;remote_port&lt;/span&gt;: ****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attribute&quot;&gt;vnc&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;proto&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attribute&quot;&gt;tcp&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5091&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;remote_port&lt;/span&gt;: ****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;attribute&quot;&gt;monitor&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;auth&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;username:password&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;proto&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attribute&quot;&gt;tcp&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;8081&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;remote_port&lt;/span&gt;: ****&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;编写启动脚本 &lt;code&gt;run.sh&lt;/code&gt;。上面的配置文件设置了三个端口映射方案，在启动时 start 三个方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo /path/to/ngrok --config=&lt;span class=&quot;string&quot;&gt;&quot;/path/to/ngrok.cfg&quot;&lt;/span&gt; start ssh vnc monitor&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;将 &lt;code&gt;run.sh&lt;/code&gt; 脚本加入 &lt;code&gt;autostart.sh&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;音频播放&quot;&gt;&lt;a href=&quot;#音频播放&quot; class=&quot;headerlink&quot; title=&quot;音频播放&quot;&gt;&lt;/a&gt;音频播放&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install alsa-utils&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可播放 wav 格式，测试：&lt;code&gt;sudo aplay /usr/share/sounds/alsa/Front_Center.wav&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;alsamixer&lt;/code&gt; 调整音量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get -y install mpg321&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;mpg321&lt;/code&gt; 可播放 mp3 格式音频&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;驱动-SG90-舵机&quot;&gt;&lt;a href=&quot;#驱动-SG90-舵机&quot; class=&quot;headerlink&quot; title=&quot;驱动 SG90 舵机&quot;&gt;&lt;/a&gt;驱动 SG90 舵机&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从 &lt;a href=&quot;https://github.com/richardghirst/PiBits&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;此处&lt;/a&gt; 下载树莓派 GPIO 管脚驱动 ServoBlaster&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd ServoBlaster/user&lt;/code&gt; 并 &lt;code&gt;make servod&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./servod&lt;/code&gt;，成功将展示对应管脚脉冲对应情况&lt;/li&gt;
&lt;li&gt;如 SG90 舵机脉冲输入管脚为 GPIO17，可使用 &lt;code&gt;echo 1=180 &amp;gt; /dev/servoblaster&lt;/code&gt; 使其转动&lt;/li&gt;
&lt;li&gt;可使用 2 个 9g 舵机组成二自由度舵机云台，使摄像头横向 180 度，纵向 120 度旋转&lt;/li&gt;
&lt;li&gt;舵机黄色线为信号输入，棕色线接 GND，红色线接 5V&lt;/li&gt;
&lt;li&gt;树莓派 GPIO 管脚如下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/GPIO.png&quot; width=&quot;400px&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可编写脚本驱动舵机在两个方向上旋转，拍摄视频可在我的官方网站查看：&lt;a href=&quot;http://forec.cn/2016/11/12/drive-servo-by-raspberry-pi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://forec.cn/2016/11/12/drive-servo-by-raspberry-pi/&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ubuntu-mate&quot;&gt;&lt;a href=&quot;#Ubuntu-mate&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu-mate&quot;&gt;&lt;/a&gt;Ubuntu-mate&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;无屏幕暂时无法尝试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;扩展文件系统&quot;&gt;&lt;a href=&quot;#扩展文件系统&quot; class=&quot;headerlink&quot; title=&quot;扩展文件系统&quot;&gt;&lt;/a&gt;扩展文件系统&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo fdisk /dev/mmcblk0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;按序输入 &lt;code&gt;d Enter 2 Enter n Enter p Enter 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo resize2fs /dev/mmcblk0p2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/10/29/raspberry-settings/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/10/29/raspberry-settings/&quot;&gt;https://forec.github.io/2016/10/29/raspberry-settings/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理 Raspberry Pi 3 的个人配置。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Configuration" scheme="http://forec.github.io/categories/Configuration/"/>
    
    
      <category term="Mistakes" scheme="http://forec.github.io/tags/Mistakes/"/>
    
      <category term="OS" scheme="http://forec.github.io/tags/OS/"/>
    
      <category term="Raspberry" scheme="http://forec.github.io/tags/Raspberry/"/>
    
  </entry>
  
  <entry>
    <title>Fix in Haskell</title>
    <link href="http://forec.github.io/2016/10/08/haskell-fixit/"/>
    <id>http://forec.github.io/2016/10/08/haskell-fixit/</id>
    <published>2016-10-08T06:48:19.000Z</published>
    <updated>2016-11-05T12:00:38.228Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;There’re many interesting features in Haskell, here I want to introduce and analyse the &lt;code&gt;Fixed-point combinator&lt;/code&gt;, which spent me several hours understanding but only scratched the surface. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Definition-Of-Fix&quot;&gt;&lt;a href=&quot;#Definition-Of-Fix&quot; class=&quot;headerlink&quot; title=&quot;Definition Of Fix&quot;&gt;&lt;/a&gt;Definition Of Fix&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;You can find the definition of &lt;code&gt;Fix&lt;/code&gt; function in &lt;a href=&quot;https://en.wikibooks.org/wiki/Haskell/Fix_and_recursion&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wiki&lt;/a&gt;. The definition is&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;fix&lt;/span&gt; :: (a -&amp;gt; a) -&amp;gt; a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;fix&lt;/span&gt; f = &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; x = f x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Fix-And-Recursion&quot;&gt;&lt;a href=&quot;#Fix-And-Recursion&quot; class=&quot;headerlink&quot; title=&quot;Fix And Recursion&quot;&gt;&lt;/a&gt;Fix And Recursion&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It seems a little confused. What does &lt;code&gt;let x = f x in x&lt;/code&gt; mean? For example, &lt;code&gt;GNU&lt;/code&gt; is &lt;code&gt;GNU is not Unix&lt;/code&gt;, so how could you expand &lt;code&gt;GNU&lt;/code&gt;? &lt;code&gt;GNU GNU GNU ... GNU is not Unix&lt;/code&gt;? Another example, &lt;code&gt;let x = (1:) x in x&lt;/code&gt;, what will x like? A list of infinite 1. Still confused? You can try &lt;code&gt;let x = x + 2 in x&lt;/code&gt;, this will cause an exception because of stack overflow. The reason is that the &lt;code&gt;(+2)&lt;/code&gt; operation is expanded constantly. So what is &lt;code&gt;fix&lt;/code&gt; exactly? &lt;code&gt;Fix&lt;/code&gt; can be imported from &lt;code&gt;Control.Monad.Fix&lt;/code&gt;, its definition has been given above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now we can learn the power of &lt;code&gt;Fix&lt;/code&gt; from an example. The &lt;code&gt;fact&lt;/code&gt; is used to calculate &lt;code&gt;factorial&lt;/code&gt;, here we calculate 5!. There are two kind of implements, the first is common recursion, like first line below. Instead, we can use &lt;code&gt;Fix&lt;/code&gt; to rewrite it. We pass a lambda function to fix as a parameter, the lambda function receives &lt;code&gt;rec&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; as parameters, &lt;code&gt;rec&lt;/code&gt; here is abstracted and it was initialized by &lt;code&gt;if n == 0 then 1&lt;/code&gt;, this is indeed initialized for the lambda function, however you can think it as an anonymous &lt;code&gt;rec&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; fact n = &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; n * fact (n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; fact &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; fix (\&lt;span class=&quot;keyword&quot;&gt;rec&lt;/span&gt; n -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; n * &lt;span class=&quot;keyword&quot;&gt;rec&lt;/span&gt; (n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;In fact, from the definition of &lt;code&gt;Fix&lt;/code&gt;, we know that &lt;code&gt;fix&lt;/code&gt; means a fixed-point. What we need to do is to write the equation for &lt;code&gt;fix&lt;/code&gt; like below. &lt;code&gt;Fix&lt;/code&gt; is used to find a fixed-point for given function.  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;f&lt;/span&gt; (fix f) = fix f&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;So why &lt;code&gt;fix (+2)&lt;/code&gt; is getting an exception? There is no &lt;code&gt;x&lt;/code&gt; for &lt;code&gt;x == x + 2&lt;/code&gt;, so &lt;code&gt;fix&lt;/code&gt; cannot find an fixed-point for &lt;code&gt;(+2)&lt;/code&gt;. That’s why &lt;code&gt;fix&lt;/code&gt; finally came into stack overflow. Now we are going to learn what &lt;code&gt;fix&lt;/code&gt; works in details. We can expand &lt;code&gt;fix&lt;/code&gt; like below.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;fix&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (fix (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + fix (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + fix (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + fix (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;+))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;fix&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : fix (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : fix (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; : fix (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;As you can see, &lt;code&gt;fix (1:)&lt;/code&gt; can work fine since the lazy evaluation of Haskell. If we pass &lt;code&gt;fix (1:)&lt;/code&gt; to &lt;code&gt;show&lt;/code&gt;, &lt;code&gt;GHCI&lt;/code&gt; can still work and output &lt;code&gt;[1, 1, 1, ...&lt;/code&gt;. Return to the &lt;code&gt;fact&lt;/code&gt; example now, how does it work? We write that lambda function passed to &lt;code&gt;fix&lt;/code&gt; as a named function &lt;code&gt;fact&amp;#39;&lt;/code&gt; here, the definition is &lt;code&gt;fact&amp;#39; rec n = if n == 0 then 1 else n * rec (n-1)&lt;/code&gt;. Pass this to &lt;code&gt;fix&lt;/code&gt;, fix will find a fixed-point of &lt;code&gt;fact&amp;#39;&lt;/code&gt;, which is the function &lt;code&gt;f&lt;/code&gt; such that &lt;code&gt;f == fact&amp;#39; f&lt;/code&gt;. So we can write &lt;code&gt;fact&amp;#39;&lt;/code&gt; like below.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;f&lt;/span&gt; = fact&#39; f&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  = \n -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; n * f (n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Are you familiar with the equation above? The &lt;code&gt;f&lt;/code&gt; substitute &lt;code&gt;rec&lt;/code&gt; in &lt;code&gt;fact&amp;#39;&lt;/code&gt;, and &lt;code&gt;f&lt;/code&gt; also acts as &lt;code&gt;fact&amp;#39; f&lt;/code&gt;, which is just recursion. So expand &lt;code&gt;fix&lt;/code&gt; as we always did. (Codes below are copied from wiki)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;fix&lt;/span&gt; fact&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= fact&#39; (fix fact&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (\&lt;span class=&quot;keyword&quot;&gt;rec&lt;/span&gt; n -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; n * &lt;span class=&quot;keyword&quot;&gt;rec&lt;/span&gt; (n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) (fix fact&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= \n -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; n * fix fact&#39; (n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= \n -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; n * fact&#39; (fix fact&#39;) (n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= \n -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; n * (\&lt;span class=&quot;keyword&quot;&gt;rec&lt;/span&gt; n&#39; -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n&#39; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; n&#39; * &lt;span class=&quot;keyword&quot;&gt;rec&lt;/span&gt; (n&#39;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) (fix fact&#39;) (n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= \n -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; n * (&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; (n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) * fix fact&#39; (n-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= \n -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; n * (&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; (n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) * (&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; n-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; (n-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) * fix fact&#39; (n-&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Implementation-Of-Foldr-amp-Reverse&quot;&gt;&lt;a href=&quot;#Implementation-Of-Foldr-amp-Reverse&quot; class=&quot;headerlink&quot; title=&quot;Implementation Of Foldr &amp;amp; Reverse&quot;&gt;&lt;/a&gt;Implementation Of Foldr &amp;amp; Reverse&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;I am going to show some of the applications of &lt;code&gt;fix&lt;/code&gt;. First is &lt;code&gt;reverse&lt;/code&gt;. We can write &lt;code&gt;reverse&amp;#39;&lt;/code&gt; as the parameter of &lt;code&gt;fix&lt;/code&gt;. The type system of &lt;code&gt;reverse&amp;#39;&lt;/code&gt; is &lt;code&gt;([a] -&amp;gt;[a]) -&amp;gt; ([a] -&amp;gt; [a])&lt;/code&gt;. Notice that I use a pair of parentheses out of &lt;code&gt;[a] -&amp;gt; [a]&lt;/code&gt;, that’s because curry. &lt;code&gt;reverse&amp;#39;&lt;/code&gt; is just like &lt;code&gt;fact&amp;#39;&lt;/code&gt;, it receives a function &lt;code&gt;f&lt;/code&gt;, and &lt;code&gt;fix&lt;/code&gt; is going to find a &lt;code&gt;f&lt;/code&gt; which satisfies &lt;code&gt;f = reverse&amp;#39; f&lt;/code&gt;. Now we can easily write &lt;code&gt;reverse&amp;#39;&lt;/code&gt; below.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;reverse&#39;&lt;/span&gt; :: ([a] -&amp;gt; [a]) -&amp;gt; ([a] -&amp;gt; [a])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;reverse&#39;&lt;/span&gt; f [] = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;reverse&#39;&lt;/span&gt; f (x:xs) = f xs ++ [x]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;reverse&lt;/span&gt; = fix reverse&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- expand the definition above&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(fix reverse&#39;) [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (reverse&#39; (fix reverse&#39;)) [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (reverse&#39; f) [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= f [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] ++ [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= (reverse&#39; f) [&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] ++ [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;= ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Another example I am going to talk is &lt;code&gt;foldr&lt;/code&gt;. I found the kata about &lt;code&gt;fix&lt;/code&gt; in Codewars, you can see it &lt;a href=&quot;https://www.codewars.com/kata/fix-it/haskell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;. I didn’t pass the time limitation, and finally I got clues from conversations. There are several ways to write &lt;code&gt;foldr&lt;/code&gt; by &lt;code&gt;fix&lt;/code&gt;, however, you need to maintain the feature of &lt;code&gt;foldr&lt;/code&gt;, the lazy evaluation. I will show two of them both satisfying the lazy evaluation.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldr&#39;&lt;/span&gt; :: ((a -&amp;gt;b -&amp;gt;b) -&amp;gt;b -&amp;gt;[a] -&amp;gt;b) -&amp;gt;((a -&amp;gt;b -&amp;gt;b) -&amp;gt;b -&amp;gt;[a] -&amp;gt;b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldr&#39;&lt;/span&gt; f g acc [] = acc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldr&#39;&lt;/span&gt; f g acc (x:xs) = f g (g x acc) xs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldr&#39;&lt;/span&gt; :: ((a -&amp;gt;b -&amp;gt;b) -&amp;gt;b -&amp;gt;[a] -&amp;gt;b) -&amp;gt;((a -&amp;gt;b-&amp;gt; b) -&amp;gt;b -&amp;gt;[a] -&amp;gt;b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldr&#39;&lt;/span&gt; f g acc [] = acc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldr&#39;&lt;/span&gt; f g acc (x:xs) = g x (f g acc xs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;foldr&lt;/span&gt; = fix foldr&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Which is better? In my own opinion, the first is better since it is written in  a format of tail-end recursion. This would not expand the stack space it used. However, the second needs to expand until the end of the list. But, after my experiment testing big integers, both of them met stack overflow at the same size while works as same as each other when they can deal with the parameters. This proved that my thought was wrong. So, why the two formats have same performance? Stay for thought.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I hope this article could give you some help. If this article has any error, or you have some problems/suggestions, please &lt;a href=&quot;mailto:forec@bupt.edu.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;e-mail me&lt;/a&gt;. I am glad to learn from each other.&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2016/10/08/haskell-fixit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2016/10/08/haskell-fixit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2016/10/08/haskell-fixit/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://blog.forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;There’re many interesting features in Haskell, here I want to introduce and analyse the &lt;code&gt;Fixed-point combinator&lt;/code&gt;, which spent me several hours understanding but only scratched the surface. &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Language" scheme="http://forec.github.io/categories/Language/"/>
    
    
      <category term="函数式编程" scheme="http://forec.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Network Mining Based On Co-occurrence</title>
    <link href="http://forec.github.io/2016/10/03/co-occurrence-structure-capture/"/>
    <id>http://forec.github.io/2016/10/03/co-occurrence-structure-capture/</id>
    <published>2016-10-03T14:16:16.000Z</published>
    <updated>2016-11-07T16:34:51.056Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Generate network based on co-occurrence was proposed several decades ago, however, it still occupies most of papers talking about network discovering. Here I want to give a simple introduction for network capture by conventional co-occurrence methods. The following contents are slightly related with the basis of my current work, they are out of date but still useful sometimes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;General-Introduction&quot;&gt;&lt;a href=&quot;#General-Introduction&quot; class=&quot;headerlink&quot; title=&quot;General Introduction&quot;&gt;&lt;/a&gt;General Introduction&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;This article is just an introduction for several methods capturing useful structured data from unstructured data sets. It only talks about the basic implementation of co-occurrence in text data. After reading this short article, you will know how to generate a graph as follows from a paragraph of text, a set of Internet data captured from spiders or even a video.&lt;/li&gt;
&lt;li&gt;An example, the following picture is generated from a part of the script of 《Train to Busan》. I copied the script from Internet, and it’s easy to be analyzed by code. The picture was cut a little part when I published it.&lt;br&gt;&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/train-to-fusan.svg&quot; width=&quot;400px&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Entity-Identification&quot;&gt;&lt;a href=&quot;#Entity-Identification&quot; class=&quot;headerlink&quot; title=&quot;Entity Identification&quot;&gt;&lt;/a&gt;Entity Identification&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;A network is composed of a set of nodes and a set of edges. We name the set of nodes &lt;code&gt;V&lt;/code&gt;, and edges &lt;code&gt;E&lt;/code&gt;. The first problem we face is where can we get &lt;code&gt;V&lt;/code&gt;. Entity identification needs to be considered here. &lt;/li&gt;
&lt;li&gt;Some simple methods such as regress( for binary classification ), SVM can be used if you know the characteristics for nodes. However, in most conditions we even can’t describe what the nodes exactly like. In these conditions, deep learning algorithms such as Convolutional Neural Network could be considered. You can give some nodes you already know, then ask your model to learn what the nodes like. That may be a little complex, so we left them behind. Here we just consider the best condition.&lt;/li&gt;
&lt;li&gt;Here we make a hypothesis, you already have the set of all the nodes. That means, you have the &lt;code&gt;V&lt;/code&gt; and the data set, what you need to do is just generating a network for the &lt;code&gt;V&lt;/code&gt; from the given data set. Sounds simple? However this is indeed the case. In some few cases, for example, generating network from a movie like the example above, very few main entities appear in a movie, so we can get their identifications (here is name) from web or just make them yourself. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Relationship-Identification&quot;&gt;&lt;a href=&quot;#Relationship-Identification&quot; class=&quot;headerlink&quot; title=&quot;Relationship Identification&quot;&gt;&lt;/a&gt;Relationship Identification&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Here we come across the second question, how to get &lt;code&gt;E&lt;/code&gt;? I will only introduce one simple method here, that’s what I metioned  above, the conventional co-occurrence method. I will introduce some more methods after my current job finished. &lt;/li&gt;
&lt;li&gt;The co-occurrence network, is just like what its name suggests, use the information that two entities occurred together. For example, in my analysis for 《Train to Busan》, I simply build an edge for two nodes if they occur in a same paragraph. If there always been an edge for two nodes, the weight of that edge will be increased. Once the data set is big enough, the main line of the data set will appear. You can choose building directed edges or undirected edges, and choose complete graph or not.&lt;/li&gt;
&lt;li&gt;The co-occurrence network is only useful for data sets that have obvious centralization, edges with low weight are always redundant. Also, many nodes will have no sense of presence because they are just playing samll roles. The co-occurrence will make every node connect with the center node, that’s unreasonable. Since we just introduce the very simple condition here, I will present two common ways for reducing the redundancy &lt;del&gt;ans&lt;/del&gt; and [thanks for a kind reader, he pointed out the mistake here] fixing the network.&lt;/li&gt;
&lt;li&gt;The first way is filter. Easy to understand, just filter out those edges with low weight. The threshold can be adjusted manually or learned by specific models.&lt;/li&gt;
&lt;li&gt;The second way is segmenting your network. This needs clustering first, and find the community centers. Cut these edges connecting with center nodes but has low weights. The effect is hard to be estimated according to what your network structure likes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Applicable-Scope&quot;&gt;&lt;a href=&quot;#Applicable-Scope&quot; class=&quot;headerlink&quot; title=&quot;Applicable Scope&quot;&gt;&lt;/a&gt;Applicable Scope&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Many fields can be applied with co-occurrence method. For example, capturing people relationships from videos, recodings, pictures, etc. I will show how to generate a network from a video later. That will cost a long time since many frame needs to be considered, which is a very time-consuming job.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I hope this article could give you some help. If this article has any error, or you have some problems/suggestions, please &lt;a href=&quot;mailto:forec@bupt.edu.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;e-mail me&lt;/a&gt;. I am glad to learn from each other.&lt;/p&gt;
&lt;p&gt;Related Data Download Link： &lt;a href=&quot;http://7xktmz.com1.z0.glb.clouddn.com/Train%20to%20Busan.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Script for 《Train to Busan》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/10/03/co-occurrence-structure-capture/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/10/03/co-occurrence-structure-capture/&quot;&gt;https://forec.github.io/2016/10/03/co-occurrence-structure-capture/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Generate network based on co-occurrence was proposed several decades ago, however, it still occupies most of papers talking about network discovering. Here I want to give a simple introduction for network capture by conventional co-occurrence methods. The following contents are slightly related with the basis of my current work, they are out of date but still useful sometimes.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://forec.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Algorithms" scheme="http://forec.github.io/tags/Algorithms/"/>
    
      <category term="图分割" scheme="http://forec.github.io/tags/%E5%9B%BE%E5%88%86%E5%89%B2/"/>
    
      <category term="机器学习" scheme="http://forec.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Cantor Expansion With Duplicate Elements</title>
    <link href="http://forec.github.io/2016/09/27/duplicate-cantor/"/>
    <id>http://forec.github.io/2016/09/27/duplicate-cantor/</id>
    <published>2016-09-27T14:34:03.000Z</published>
    <updated>2016-11-04T13:28:55.598Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Cantor Expansion is simple, however, for permutations with duplicate elements, some factors are changed.&lt;br&gt;&lt;strong&gt;For why I use English&lt;/strong&gt;: Since I am going to write an English paper, I want to write several articles in English here for practice. Please forgive me for any inconvenience I may have caused to you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;Basic-Cantor-Expansion&quot;&gt;&lt;a href=&quot;#Basic-Cantor-Expansion&quot; class=&quot;headerlink&quot; title=&quot;Basic Cantor Expansion&quot;&gt;&lt;/a&gt;Basic Cantor Expansion&lt;/h1&gt;&lt;h2 id=&quot;Cantor-Expansion&quot;&gt;&lt;a href=&quot;#Cantor-Expansion&quot; class=&quot;headerlink&quot; title=&quot;Cantor Expansion&quot;&gt;&lt;/a&gt;Cantor Expansion&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A permutation without duplicate elements can have a mapping with a sequence [1..n], for example, think about &lt;code&gt;2134&lt;/code&gt;, a permutation of {1, 2, 3, 4}. To calculate the position of &lt;code&gt;2134&lt;/code&gt; in all permutations of {1, 2, 3, 4}, we can follow the steps: &lt;code&gt;Pos = 1 * 3! + 0 * 2! + 0 * 1! = 6&lt;/code&gt;. The explanation is, since there’s only one element &lt;code&gt;1&lt;/code&gt; in elements behind &lt;code&gt;2&lt;/code&gt; and smaller than &lt;code&gt;2&lt;/code&gt;, if we swap &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;, there will be &lt;code&gt;3!&lt;/code&gt; permutations smaller than &lt;code&gt;2134&lt;/code&gt;. Similiar to this, no elements smaller than &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt;. So the related number with &lt;code&gt;2134&lt;/code&gt; is 6. In &lt;code&gt;C++&lt;/code&gt;, we can define a function named &lt;code&gt;perm2num&lt;/code&gt;, generate the position of a given permutation.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* n is the number of elements, p is the set of elements */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;perm2num&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, add = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = n - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt; n; j++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( p[j] &amp;lt; p[i] ) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                num += add;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        add *= (n - i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Cantor-Inverse&quot;&gt;&lt;a href=&quot;#Cantor-Inverse&quot; class=&quot;headerlink&quot; title=&quot;Cantor Inverse&quot;&gt;&lt;/a&gt;Cantor Inverse&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;To generate a permutation from the position it stays in, we can follow a reverse of the upper step. The &lt;code&gt;C++&lt;/code&gt; code is just the reverse operation of &lt;code&gt;perm2num&lt;/code&gt;.  &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;num2perm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p[i] = num % ( n - i );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        num /= (n - i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j--)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( p[j] &amp;lt;= p[i] ) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                p[i]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;With-Duplicate-Elements&quot;&gt;&lt;a href=&quot;#With-Duplicate-Elements&quot; class=&quot;headerlink&quot; title=&quot;With Duplicate Elements&quot;&gt;&lt;/a&gt;With Duplicate Elements&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;To generate the position of a permutation with duplicate elements, two factors influenced. &lt;strong&gt;First&lt;/strong&gt;, when calculate the possible increase for element &lt;code&gt;p[i]&lt;/code&gt;, in basic cantor expansion, we need to find how many elements are smaller than &lt;code&gt;p[i]&lt;/code&gt; and behind &lt;code&gt;p[i]&lt;/code&gt;, and multiply this number with &lt;code&gt;(n - i)!&lt;/code&gt;. Now, we need to divide this by the product of some factorials, which are how many elements are duplicate behind &lt;code&gt;p[i]&lt;/code&gt;. For example, &lt;code&gt;BABA&lt;/code&gt;, to calculate the increase for first B, 2 elements, both are A, are smaller than B. In basic Cantor Expansion, it should be &lt;code&gt;2 * 3!&lt;/code&gt;, now we need to divide it by &lt;code&gt;2! * 1!&lt;/code&gt;. The &lt;code&gt;2!&lt;/code&gt; is from 2 B after swapping, and &lt;code&gt;1!&lt;/code&gt; if from one A after swapping. &lt;strong&gt;Second&lt;/strong&gt;, if one element &lt;code&gt;y&lt;/code&gt; has been used in calculating an increase for element &lt;code&gt;p[i]&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; should only be counted once. For example, &lt;code&gt;BABA&lt;/code&gt; only adds &lt;code&gt;2 * 3! / 2!&lt;/code&gt; once.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I want to recommand a website &lt;a href=&quot;https://www.codewars.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codewars.com&lt;/a&gt; here. My username in that website is Forec, you can find me &lt;a href=&quot;https://www.codewars.com/users/Forec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;. I was inspired by one kata in that website, and that reminds me of cantor expansion. You can find the kata &lt;a href=&quot;https://www.codewars.com/kata/alphabetic-anagrams/haskell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;. I didn’t find any articles talking about duplicate condition. I wish this can help you.&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/09/27/duplicate-cantor/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/09/27/duplicate-cantor/&quot;&gt;https://forec.github.io/2016/09/27/duplicate-cantor/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Cantor Expansion is simple, however, for permutations with duplicate elements, some factors are changed.&lt;br&gt;&lt;strong&gt;For why I use English&lt;/strong&gt;: Since I am going to write an English paper, I want to write several articles in English here for practice. Please forgive me for any inconvenience I may have caused to you.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="Algorithms" scheme="http://forec.github.io/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Qt msvc2013 问题解决方案</title>
    <link href="http://forec.github.io/2016/09/14/tips-for-qt/"/>
    <id>http://forec.github.io/2016/09/14/tips-for-qt/</id>
    <published>2016-09-14T02:36:35.000Z</published>
    <updated>2016-11-08T11:17:52.725Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;编写 &lt;a href=&quot;https://github.com/Forec/remote-control&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Remote-Control&lt;/a&gt; 的客户端代码，界面用Qt绘制，记录出现的问题及解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;MSVC的Release问题&quot;&gt;&lt;a href=&quot;#MSVC的Release问题&quot; class=&quot;headerlink&quot; title=&quot;MSVC的Release问题&quot;&gt;&lt;/a&gt;MSVC的Release问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用Qt版本5.6.0， msvc2013。Release后缺少动态链接库。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;msvc2013&lt;/code&gt; 的 &lt;code&gt;bin&lt;/code&gt; 目录下没有 &lt;code&gt;mingwm10.dll&lt;/code&gt;、&lt;code&gt;libgcc_s_dw2-1.dll&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;main()&lt;/code&gt; 函数顶部添加 &lt;code&gt;QCoreApplication::addLibraryPath(&amp;quot;./&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将release出的 &lt;code&gt;app.exe&lt;/code&gt; 拷贝到部署文件夹，&lt;code&gt;path_to_msvc2013\bin\windeployqt.exe app.exe&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;可能仍出现 &lt;code&gt;无法定位动态链接库 Qt5Widgets.dll&lt;/code&gt;。环境变量中有 &lt;code&gt;MikTex&lt;/code&gt; 的路径，该路径下包含 &lt;code&gt;Qt5Widgets.dll&lt;/code&gt;， 将 &lt;code&gt;msvc2013&lt;/code&gt; 在环境变量中的位置调整高于 &lt;code&gt;MikTex&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;或在部署文件夹下新建 &lt;code&gt;qt.conf&lt;/code&gt;，指定 &lt;code&gt;Library&lt;/code&gt; 加载目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;部署程序图标&quot;&gt;&lt;a href=&quot;#部署程序图标&quot; class=&quot;headerlink&quot; title=&quot;部署程序图标&quot;&gt;&lt;/a&gt;部署程序图标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;程序图标 &lt;code&gt;icon.ico&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在工程目录下 （与&lt;code&gt;project.pro&lt;/code&gt;同目录）新建 &lt;code&gt;icon.rc&lt;/code&gt;，添加 &lt;code&gt;IDI_ICON1  ICON   DISCARDABLE   &amp;quot;icon.ico&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;project.pro&lt;/code&gt; 中添加 &lt;code&gt;RC_FILE = icon.rc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;release可执行文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;宽字符转换&quot;&gt;&lt;a href=&quot;#宽字符转换&quot; class=&quot;headerlink&quot; title=&quot;宽字符转换&quot;&gt;&lt;/a&gt;宽字符转换&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;执行 &lt;code&gt;ShellExecute()&lt;/code&gt; 函数时，参数 3 需要宽字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ShellExecute(NULL, L&amp;quot;open&amp;quot;, open_file_path, NULL , NULL, SW_SHOWNORMAL);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编写函数 &lt;code&gt;string2LPCWSTR&lt;/code&gt; 将 &lt;code&gt;std::string&lt;/code&gt; 转为 &lt;code&gt;LPCWSTR&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; LPCWSTR &lt;span class=&quot;title&quot;&gt;stringToLPCWSTR&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; src)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; srcsize = src.length() + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; convertedChars = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt; *wcstring = (&lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt;)*(src.length()-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mbstowcs_s(&amp;amp;convertedChars, wcstring, srcsize, src.c_str(), _TRUNCATE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wcstring;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Qt下UTF8和GBK的转换&quot;&gt;&lt;a href=&quot;#Qt下UTF8和GBK的转换&quot; class=&quot;headerlink&quot; title=&quot;Qt下UTF8和GBK的转换&quot;&gt;&lt;/a&gt;Qt下UTF8和GBK的转换&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;UTF82GBK&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; QString &lt;span class=&quot;title&quot;&gt;UTF82GBK&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; QString &amp;amp;inStr)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QTextCodec *gbk = QTextCodec::codecForName(&lt;span class=&quot;string&quot;&gt;&quot;GB18030&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QString u2g = gbk-&amp;gt;toUnicode(inStr.toLocal8Bit());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; u2g;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;GBK2UTF8&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; QString &lt;span class=&quot;title&quot;&gt;GBK2UTF8&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; QString &amp;amp;inStr)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QTextCodec *gbk = QTextCodec::codecForName(&lt;span class=&quot;string&quot;&gt;&quot;GB18030&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QString g2u = gbk-&amp;gt;toUnicode(gbk-&amp;gt;fromUnicode(inStr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; g2u;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Qt下线程和ui组件处理&quot;&gt;&lt;a href=&quot;#Qt下线程和ui组件处理&quot; class=&quot;headerlink&quot; title=&quot;Qt下线程和ui组件处理&quot;&gt;&lt;/a&gt;Qt下线程和ui组件处理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;编写线程子函数 &lt;code&gt;unsigned int __stdcall refreshThread(void* pM)&lt;/code&gt;，试图在子线程中修改ui组件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handle = (HANDLE)_beginthreadex(NULL, 0, refreshThread, (void *)(&amp;amp;actives[i]), 0,NULL );&lt;/code&gt; 参数 3 不能是非静态成员函数&lt;/li&gt;
&lt;li&gt;Qt中只有 &lt;code&gt;QApplication.exec()&lt;/code&gt; 主线程能对界面元素进行控制&lt;/li&gt;
&lt;li&gt;利用 &lt;code&gt;signal/slot&lt;/code&gt;，在线程中创建一个 &lt;code&gt;signal&lt;/code&gt;，在主线程中创建一个 &lt;code&gt;slot&lt;/code&gt;。当线程修改界面时，发送 &lt;code&gt;signal&lt;/code&gt; 通知主线程响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Qt的Sql操作&quot;&gt;&lt;a href=&quot;#Qt的Sql操作&quot; class=&quot;headerlink&quot; title=&quot;Qt的Sql操作&quot;&gt;&lt;/a&gt;Qt的Sql操作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;QSqlDatabase db = QSqlDatabase::addDatabase(&amp;quot;QSQLITE&amp;quot;);&lt;/code&gt; 添加 sqlite，可添加第二个参数指定当前连接名称，未指定该参数则为默认连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db.setDatabaseName(&amp;quot;data.db&amp;quot;);&lt;/code&gt; 指定数据库文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query = QSqlQuery(db);&lt;/code&gt; 创建查询&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query.exec(&amp;quot;&amp;quot;);&lt;/code&gt; 执行sql语句&lt;/li&gt;
&lt;li&gt;添加多个数据库时，&lt;code&gt;addDatabase&lt;/code&gt;必须指定不同的连接名称，否则会覆盖默认连接或重名连接引发错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Socket通信频率问题&quot;&gt;&lt;a href=&quot;#Socket通信频率问题&quot; class=&quot;headerlink&quot; title=&quot;Socket通信频率问题&quot;&gt;&lt;/a&gt;Socket通信频率问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用同一个 &lt;code&gt;buf&lt;/code&gt; 作为发送方的缓冲，当 &lt;code&gt;buf&lt;/code&gt;长度过大，超过 &lt;code&gt;Socket&lt;/code&gt;默认缓冲长度时，如果发送频率过快，socket的拆分发送将使 &lt;code&gt;buf&lt;/code&gt; 同时读写，接收方将收到垃圾数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;send&lt;/code&gt; 返回实际写入的字节数，检查发送的数目并移动缓冲窗口，结尾判断可以用字节填充。&lt;/li&gt;
&lt;li&gt;或缩小 &lt;code&gt;buf&lt;/code&gt; 长度，但网络情况差的时候仍会写入垃圾数据，只是垃圾数据较少。传输二进制文件将因为垃圾数据的存在而无效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;一些组件的tips&quot;&gt;&lt;a href=&quot;#一些组件的tips&quot; class=&quot;headerlink&quot; title=&quot;一些组件的tips&quot;&gt;&lt;/a&gt;一些组件的tips&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;添加 &lt;code&gt;QTableWidget&lt;/code&gt; 右键菜单&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ui-&amp;gt;tableWidget-&amp;gt;setContextMenuPolicy(Qt::CustomContextMenu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;popMenu = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; QMenu(ui-&amp;gt;tableWidget);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;action = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; QAction(&lt;span class=&quot;string&quot;&gt;&quot;connect&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MainWindow::on_tableWidget_customContextMenuRequested(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; QPoint &amp;amp;pos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    popMenu-&amp;gt;clear();    &lt;span class=&quot;comment&quot;&gt;// popMenu for QTableWidget&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    popMenu-&amp;gt;addAction(action);    &lt;span class=&quot;comment&quot;&gt;// action for connect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    popMenu-&amp;gt;exec(QCursor::pos());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;滚动条位置设置&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QTextEdit *edit = ui-&amp;gt;textEdit;        &lt;span class=&quot;comment&quot;&gt;// example for QTextEdit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;QScrollBar *sb = edit-&amp;gt;verticalScrollBar();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sb-&amp;gt;setValue(sb-&amp;gt;maximumHeight());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Qt正则&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;QString &lt;span class=&quot;title&quot;&gt;IPv4pattern&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)&amp;#123;3&amp;#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;QRegExp &lt;span class=&quot;title&quot;&gt;IPv4rx&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(IPv4pattern)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (IPv4rx.exactMatch(&lt;span class=&quot;string&quot;&gt;&quot;8.8.8.8&quot;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// example for IPv4 address check&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/ei__nino/article/details/7305024&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Qt图标修改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/21268558/application-failed-to-start-because-it-could-not-find-or-load-the-qt-platform-pl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Qt Windows部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/abeldeng/article/details/24767245&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Qt 多个数据库文件操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/09/14/tips-for-qt/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/09/14/tips-for-qt/&quot;&gt;https://forec.github.io/2016/09/14/tips-for-qt/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;编写 &lt;a href=&quot;https://github.com/Forec/remote-control&quot;&gt;Remote-Control&lt;/a&gt; 的客户端代码，界面用Qt绘制，记录出现的问题及解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Configuration" scheme="http://forec.github.io/categories/Configuration/"/>
    
    
      <category term="Mistakes" scheme="http://forec.github.io/tags/Mistakes/"/>
    
      <category term="OS" scheme="http://forec.github.io/tags/OS/"/>
    
      <category term="Qt" scheme="http://forec.github.io/tags/Qt/"/>
    
      <category term="字符编码" scheme="http://forec.github.io/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
      <category term="线程" scheme="http://forec.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Docker配置策略备忘</title>
    <link href="http://forec.github.io/2016/09/09/docker-problems/"/>
    <id>http://forec.github.io/2016/09/09/docker-problems/</id>
    <published>2016-09-08T16:33:36.000Z</published>
    <updated>2016-11-04T16:44:46.761Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;整理Docker的配置，以及遇到问题的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Docker更新Ubuntu被墙&quot;&gt;&lt;a href=&quot;#Docker更新Ubuntu被墙&quot; class=&quot;headerlink&quot; title=&quot;Docker更新Ubuntu被墙&quot;&gt;&lt;/a&gt;Docker更新Ubuntu被墙&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;把&lt;code&gt;/etc/apt/sources.list&lt;/code&gt;中的 &lt;code&gt;http://archive.ubuntu.com&lt;/code&gt; 全部替换为 &lt;code&gt;http://mirrors.ustc.edu.cn&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;编辑Dockfile文件，添加以下语句更新image resp中的Ubuntu，替换源为中科大镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;FROM&lt;/span&gt; resp:latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;cp /etc/apt/sources.list /etc/apt/sources.list.bak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;sudo sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#39;&lt;/span&gt; /etc/apt/sources.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;cat /etc/apt/sources.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;apt-get clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;apt-get -y update --fix-missing &amp;amp;&amp;amp; apt-get install -y ******(apps you want to install)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;执行&lt;code&gt;docker build -t newresp .&lt;/code&gt;安装新功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;设置Docker镜像&quot;&gt;&lt;a href=&quot;#设置Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;设置Docker镜像&quot;&gt;&lt;/a&gt;设置Docker镜像&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;新版的 &lt;code&gt;Docker&lt;/code&gt; 使用 &lt;code&gt;/etc/docker/daemon.json（Linux）&lt;/code&gt; 或者 &lt;code&gt;%programdata%\docker\config\daemon.json（Windows）&lt;/code&gt; 来配置 Daemon。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在该配置文件中加入（没有该文件，则创建一个）：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;&lt;span class=&quot;attribute&quot;&gt;registry-mirrors&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;https://docker.mirrors.ustc.edu.cn&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Windows下更改Docker的虚拟机、镜像位置&quot;&gt;&lt;a href=&quot;#Windows下更改Docker的虚拟机、镜像位置&quot; class=&quot;headerlink&quot; title=&quot;Windows下更改Docker的虚拟机、镜像位置&quot;&gt;&lt;/a&gt;Windows下更改Docker的虚拟机、镜像位置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;设置环境变量 &lt;code&gt;MACHINE_STORAGE_PATH&lt;/code&gt; 为要存储所有 &lt;code&gt;docker&lt;/code&gt; 文件的位置。&lt;/li&gt;
&lt;li&gt;如尚未安装 &lt;code&gt;docker&lt;/code&gt;，安装即更改默认位置。&lt;/li&gt;
&lt;li&gt;如已安装 &lt;code&gt;docker&lt;/code&gt;，在&lt;code&gt;bash&lt;/code&gt;窗口中&lt;code&gt;docker-machine ls&lt;/code&gt;查看已有的&lt;code&gt;docker&lt;/code&gt;虚拟机，&lt;code&gt;docker-machine create --driver=virtualbox newDockerName&lt;/code&gt;即可新建一个虚拟机，新建后可&lt;code&gt;docker-machine rm default&lt;/code&gt;删除原有的默认虚拟机，并在新位置新建一个名为&lt;code&gt;default&lt;/code&gt;的虚拟机。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-machine regenerate-certs default&lt;/code&gt;重新生成证书。&lt;/li&gt;
&lt;li&gt;重新执行&lt;code&gt;Docker Quick Terminal&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;精简版Ubuntu待安装软件列表&quot;&gt;&lt;a href=&quot;#精简版Ubuntu待安装软件列表&quot; class=&quot;headerlink&quot; title=&quot;精简版Ubuntu待安装软件列表&quot;&gt;&lt;/a&gt;精简版Ubuntu待安装软件列表&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ping&lt;/strong&gt;: inetutils-ping&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ifconfig&lt;/strong&gt;: net-tools&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lug.ustc.edu.cn/wiki/mirrors/help/docker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker镜像使用帮助&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lug.ustc.edu.cn/wiki/mirrors/help/ubuntu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ubuntu镜像使用帮助&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.linuxdiyf.com/linux/22199.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker下Ubuntu Update错误&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/33933107/change-docker-machine-location-windows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Windows下修改Docker Images位置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/09/09/docker-problems/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/09/09/docker-problems/&quot;&gt;https://forec.github.io/2016/09/09/docker-problems/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理Docker的配置，以及遇到问题的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Configuration" scheme="http://forec.github.io/categories/Configuration/"/>
    
    
      <category term="Docker" scheme="http://forec.github.io/tags/Docker/"/>
    
      <category term="Mistakes" scheme="http://forec.github.io/tags/Mistakes/"/>
    
  </entry>
  
  <entry>
    <title>Golang的通道技巧</title>
    <link href="http://forec.github.io/2016/09/08/gochan-accumulate/"/>
    <id>http://forec.github.io/2016/09/08/gochan-accumulate/</id>
    <published>2016-09-08T02:33:31.000Z</published>
    <updated>2016-11-04T13:23:11.381Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;整理近期遇到的Golang中通道和协程的技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;计时器及系统负荷均衡&quot;&gt;&lt;a href=&quot;#计时器及系统负荷均衡&quot; class=&quot;headerlink&quot; title=&quot;计时器及系统负荷均衡&quot;&gt;&lt;/a&gt;计时器及系统负荷均衡&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;time&lt;/code&gt; 包中的 &lt;code&gt;time.Ticker&lt;/code&gt; 结构体，该对象以指定的时间间隔重复向结构体中的通道C发送时间值，通道C对用户只读，该对象可通过工厂函数 &lt;code&gt;time.NewTicker(dur int64)&lt;/code&gt; 创建， dur是指定的时间间隔，单位为纳秒（ns）。在使协程周期性执行任务（打印状态日志，输出等）时使用。调用 &lt;code&gt;Stop()&lt;/code&gt; 使计时器停止，与 &lt;code&gt;select&lt;/code&gt; 结合如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ticker := time.NewTicker(updateInterval)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; ticker.Stop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; u:= &amp;lt;-ch1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; v:= &amp;lt;-ch2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ticker.C:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logState(status) &lt;span class=&quot;comment&quot;&gt;// call some logging function logState&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;comment&quot;&gt;// no value ready to be received&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;time.Tick()&lt;/code&gt; 函数声明为 &lt;code&gt;Tick(d Duration) &amp;lt;-chan Time&lt;/code&gt;，该函数返回的通道不需要关闭，它以 &lt;code&gt;d&lt;/code&gt; 为周期给返回的通道发送时间，&lt;code&gt;d&lt;/code&gt; 是纳秒数。可以通过此函数限制处理频率，如果应对的请求不平稳，可以增加一个带缓冲的可读写通道，从 &lt;code&gt;chRate&lt;/code&gt; 中读取处理时钟，在请求暴增时可以快速处理与缓冲数相等的请求，之后处理速度会下降到和 &lt;code&gt;chRate&lt;/code&gt; 一样的速率。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rate_per_sec := &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dur Duration = &lt;span class=&quot;number&quot;&gt;1e9&lt;/span&gt; / rate_per_sec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chRate := time.Tick(dur) &lt;span class=&quot;comment&quot;&gt;// a tick every 1/10th of a second&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; req := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; requests &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;- chRate &lt;span class=&quot;comment&quot;&gt;// rate limit our Service.Method RPC calls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; client.Call(&lt;span class=&quot;string&quot;&gt;&quot;Service.Method&quot;&lt;/span&gt;, req, ...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定时器（Timer）定时器和计时器（Ticker）结构体类似（构造函数为 &lt;code&gt;NewTimer(d Duration)&lt;/code&gt;），但它只发送一次时间，在 &lt;code&gt;Dration d&lt;/code&gt; 之后。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;time.After(d)&lt;/code&gt; 函数声明为 &lt;code&gt;func After(d Duration) &amp;lt;-chan Time&lt;/code&gt;，在 &lt;code&gt;Duration d&lt;/code&gt; 之后，当前时间被发到返回的通道；因此它和 &lt;code&gt;NewTimer(d).C&lt;/code&gt; 等价；它类似 &lt;code&gt;Tick()&lt;/code&gt;，但 &lt;code&gt;After()&lt;/code&gt; 只发送一次时间。可以使用此函数应对简单的超时模式，以下为三种形式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;要执行某个任务（如从通道 &lt;code&gt;ch&lt;/code&gt; 中读取数据），但最多等待1秒。先创建一个信号通道，之后启动一个 &lt;code&gt;lambda&lt;/code&gt; 协程，协程在给通道发送数据前休眠：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;timeout := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.Sleep(&lt;span class=&quot;number&quot;&gt;1e9&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// one second&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        timeout &amp;lt;- &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ch:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// a read from ch has occured&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-timeout:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// the read from ch has timed out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;用 &lt;code&gt;time.After()&lt;/code&gt; 函数替换 &lt;code&gt;timeout-channel&lt;/code&gt;。可以在 &lt;code&gt;select&lt;/code&gt; 中使用来让发送信号超时或停止协程的执行。以下代码，在 &lt;code&gt;timeoutNs&lt;/code&gt; 纳秒后执行 &lt;code&gt;select&lt;/code&gt; 的 &lt;code&gt;timeout&lt;/code&gt; 分支后，包含&lt;code&gt;client.Call&lt;/code&gt; 的&lt;code&gt;lambda&lt;/code&gt; 协程也随之结束，不会给通道 &lt;code&gt;ch&lt;/code&gt; 返回值。缓冲大小设置为 &lt;code&gt;1&lt;/code&gt; 是必要的，可以避免协程死锁以及确保超时的通道可以被垃圾回收。需要注意如果 &lt;code&gt;select&lt;/code&gt; 中的某些非定时器选项的通道读写密集，则可能无法结束这些进程。这种情况如果将 &lt;code&gt;select&lt;/code&gt; 放到一个 &lt;code&gt;for&lt;/code&gt; 循环中，也无法精确地在定时器通道写入时就结束，因为 &lt;code&gt;select&lt;/code&gt; 对可以执行的多个 &lt;code&gt;case&lt;/code&gt; 采取伪随机算法选择，可能结束进程的时间要比定时器发出信号略晚一些。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; error, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() &amp;#123; ch &amp;lt;- client.Call(&lt;span class=&quot;string&quot;&gt;&quot;Service.Method&quot;&lt;/span&gt;, args, &amp;amp;reply) &amp;#125; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-time.After(timeoutNs):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// call timed out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; resp := &amp;lt;-ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// use resp and reply&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;假设程序从多个复制的数据库同时读取，只需要接收首先到达的答案，&lt;code&gt;Query&lt;/code&gt; 函数获取数据库的连接切片，并行请求每一个数据库并返回收到的第一个响应。结果通道 &lt;code&gt;ch&lt;/code&gt; 必须是带缓冲的，以保证第一个发送进来的数据有地方可以存放，确保放入的首个数据总会成功：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Query(conns []conn, query &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) Result &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Result, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, conn := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; conns &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;(c Conn) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; ch &amp;lt;- c.DoQuery(query):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;(conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;- ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;缓冲通道实现信号量模式&quot;&gt;&lt;a href=&quot;#缓冲通道实现信号量模式&quot; class=&quot;headerlink&quot; title=&quot;缓冲通道实现信号量模式&quot;&gt;&lt;/a&gt;缓冲通道实现信号量模式&lt;/h1&gt;&lt;p&gt;*使用缓冲通道模拟信号量，需满足&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带缓冲通道的容量和要同步的资源容量相同&lt;/li&gt;
&lt;li&gt;通道的长度（当前存放的元素个数）与当前资源被使用的数量相同&lt;/li&gt;
&lt;li&gt;容量减去通道的长度就是未处理的资源个数（标准信号量的整数值）&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;创建一个可缓冲通道表示单一信号量。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Empty &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; semaphore &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Empty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;将可用资源的数量N来初始化信号量 &lt;code&gt;semaphore：sem = make(semaphore, N)&lt;/code&gt;，提供方法从信号量通道中读取、写入。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// acquire n resources&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (s semaphore) P(n &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e := &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Empty)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s &amp;lt;- e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// release n resouces&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (s semaphore) V(n &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;- s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;一个互斥的例子：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* mutexes */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s semaphore)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Lock&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.&lt;span class=&quot;type&quot;&gt;P&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s semaphore)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Unlock&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.&lt;span class=&quot;type&quot;&gt;V&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* signal-wait */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s semaphore)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Wait&lt;/span&gt;(n int) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.&lt;span class=&quot;type&quot;&gt;P&lt;/span&gt;(n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;func&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(s semaphore)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Signal&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.&lt;span class=&quot;type&quot;&gt;V&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;管道过滤&quot;&gt;&lt;a href=&quot;#管道过滤&quot; class=&quot;headerlink&quot; title=&quot;管道过滤&quot;&gt;&lt;/a&gt;管道过滤&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;从通道接收的数据并发送给输出通道，可过滤符合条件的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sendChan := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reciveChan := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; filter(sendChan, receiveChan)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; filter(in &amp;lt;-&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;, out &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt;&amp;lt;- &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; inValue := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; in &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        result := ... &lt;span class=&quot;comment&quot;&gt;/// processing inValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    out &amp;lt;- result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;协程的恢复&quot;&gt;&lt;a href=&quot;#协程的恢复&quot; class=&quot;headerlink&quot; title=&quot;协程的恢复&quot;&gt;&lt;/a&gt;协程的恢复&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;以下代码停掉了服务器内部一个失败的协程而不影响其他协程的工作。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; server(workChan &amp;lt;-&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; *Work) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; work := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; workChan &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; safelyDo(work)   &lt;span class=&quot;comment&quot;&gt;// start the goroutine for that work&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; safelyDo(work *Work) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := &lt;span class=&quot;built_in&quot;&gt;recover&lt;/span&gt;(); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            log.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Work failed with %s in %v&quot;&lt;/span&gt;, err, work)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    do(work)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Unknwon/the-way-to-go_ZH_CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《The Way To Go》中文译本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/09/08/gochan-accumulate/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/09/08/gochan-accumulate/&quot;&gt;https://forec.github.io/2016/09/08/gochan-accumulate/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理近期遇到的Golang中通道和协程的技巧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Language" scheme="http://forec.github.io/categories/Language/"/>
    
    
      <category term="Golang" scheme="http://forec.github.io/tags/Golang/"/>
    
  </entry>
  
</feed>
