<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Forec&#39;s Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://forec.github.io/"/>
  <updated>2016-09-08T16:51:11.053Z</updated>
  <id>http://forec.github.io/</id>
  
  <author>
    <name>Forec</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker配置策略备忘</title>
    <link href="http://forec.github.io/2016/09/09/docker-problems/"/>
    <id>http://forec.github.io/2016/09/09/docker-problems/</id>
    <published>2016-09-08T16:33:36.000Z</published>
    <updated>2016-09-08T16:51:11.053Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;整理Docker的配置，以及遇到问题的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Docker更新Ubuntu被墙&quot;&gt;&lt;a href=&quot;#Docker更新Ubuntu被墙&quot; class=&quot;headerlink&quot; title=&quot;Docker更新Ubuntu被墙&quot;&gt;&lt;/a&gt;Docker更新Ubuntu被墙&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;把&lt;code&gt;/etc/apt/sources.list&lt;/code&gt;中的 &lt;code&gt;http://archive.ubuntu.com&lt;/code&gt; 全部替换为 &lt;code&gt;http://mirrors.ustc.edu.cn&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编辑Dockfile文件，添加以下语句更新image resp中的Ubuntu，替换源为中科大镜像。&lt;/p&gt;
&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;FROM&lt;/span&gt; resp:latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;cp /etc/apt/sources.list /etc/apt/sources.list.bak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;sudo sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#39;&lt;/span&gt; /etc/apt/sources.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;cat /etc/apt/sources.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;apt-get clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;apt-get -y update --fix-missing &amp;amp;&amp;amp; apt-get install -y ******(apps you want to install)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行&lt;code&gt;docker build -t newresp .&lt;/code&gt;安装新功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;设置Docker镜像&quot;&gt;&lt;a href=&quot;#设置Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;设置Docker镜像&quot;&gt;&lt;/a&gt;设置Docker镜像&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;新版的 &lt;code&gt;Docker&lt;/code&gt; 使用 &lt;code&gt;/etc/docker/daemon.json（Linux）&lt;/code&gt; 或者 &lt;code&gt;%programdata%\docker\config\daemon.json（Windows）&lt;/code&gt; 来配置 Daemon。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在该配置文件中加入（没有该文件，先建一个）：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;&lt;span class=&quot;attribute&quot;&gt;registry-mirrors&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;https://docker.mirrors.ustc.edu.cn&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lug.ustc.edu.cn/wiki/mirrors/help/docker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker镜像使用帮助&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lug.ustc.edu.cn/wiki/mirrors/help/ubuntu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ubuntu镜像使用帮助&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.linuxdiyf.com/linux/22199.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker下Ubuntu Update错误&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://forec.github.io/2016/09/09/docker-problems/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://forec.github.io/2016/09/09/docker-problems/&quot;&gt;http://forec.github.io/2016/09/09/docker-problems/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理Docker的配置，以及遇到问题的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://forec.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://forec.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Golang的通道技巧</title>
    <link href="http://forec.github.io/2016/09/08/gochan-accumulate/"/>
    <id>http://forec.github.io/2016/09/08/gochan-accumulate/</id>
    <published>2016-09-08T02:33:31.000Z</published>
    <updated>2016-09-08T16:51:21.928Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;整理近期遇到的Golang中通道和协程的技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;计时器及系统负荷均衡&quot;&gt;&lt;a href=&quot;#计时器及系统负荷均衡&quot; class=&quot;headerlink&quot; title=&quot;计时器及系统负荷均衡&quot;&gt;&lt;/a&gt;计时器及系统负荷均衡&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;time&lt;/code&gt; 包中的 &lt;code&gt;time.Ticker&lt;/code&gt; 结构体，该对象以指定的时间间隔重复向结构体中的通道C发送时间值，通道C对用户只读，该对象可通过工厂函数 &lt;code&gt;time.NewTicker(dur int64)&lt;/code&gt; 创建， dur是指定的时间间隔，单位为纳秒（ns）。在使协程周期性执行任务（打印状态日志，输出等）时使用。调用 &lt;code&gt;Stop()&lt;/code&gt; 使计时器停止，与 &lt;code&gt;select&lt;/code&gt; 结合如下：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ticker := time.NewTicker(updateInterval)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; ticker.Stop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; u:= &amp;lt;-ch1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; v:= &amp;lt;-ch2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ticker.C:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logState(status) &lt;span class=&quot;comment&quot;&gt;// call some logging function logState&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;comment&quot;&gt;// no value ready to be received&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;time.Tick()&lt;/code&gt; 函数声明为 &lt;code&gt;Tick(d Duration) &amp;lt;-chan Time&lt;/code&gt;，该函数返回的通道不需要关闭，它以 &lt;code&gt;d&lt;/code&gt; 为周期给返回的通道发送时间，&lt;code&gt;d&lt;/code&gt; 是纳秒数。可以通过此函数限制处理频率，如果应对的请求不平稳，可以增加一个带缓冲的可读写通道，从 &lt;code&gt;chRate&lt;/code&gt; 中读取处理时钟，在请求暴增时可以快速处理与缓冲数相等的请求，之后处理速度会下降到和 &lt;code&gt;chRate&lt;/code&gt; 一样的速率。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rate_per_sec := &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dur Duration = &lt;span class=&quot;number&quot;&gt;1e9&lt;/span&gt; / rate_per_sec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chRate := time.Tick(dur) &lt;span class=&quot;comment&quot;&gt;// a tick every 1/10th of a second&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; req := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; requests &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;- chRate &lt;span class=&quot;comment&quot;&gt;// rate limit our Service.Method RPC calls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; client.Call(&lt;span class=&quot;string&quot;&gt;&quot;Service.Method&quot;&lt;/span&gt;, req, ...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定时器（Timer）定时器和计时器（Ticker）结构体类似（构造函数为 &lt;code&gt;NewTimer(d Duration)&lt;/code&gt;），但它只发送一次时间，在 &lt;code&gt;Dration d&lt;/code&gt; 之后。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;time.After(d)&lt;/code&gt; 函数声明为 &lt;code&gt;func After(d Duration) &amp;lt;-chan Time&lt;/code&gt;，在 &lt;code&gt;Duration d&lt;/code&gt; 之后，当前时间被发到返回的通道；因此它和 &lt;code&gt;NewTimer(d).C&lt;/code&gt; 等价；它类似 &lt;code&gt;Tick()&lt;/code&gt;，但 &lt;code&gt;After()&lt;/code&gt; 只发送一次时间。可以使用此函数应对简单的超时模式，以下为三种形式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;要执行某个任务（如从通道 &lt;code&gt;ch&lt;/code&gt; 中读取数据），但最多等待1秒。先创建一个信号通道，之后启动一个 &lt;code&gt;lambda&lt;/code&gt; 协程，协程在给通道发送数据前休眠：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;timeout := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.Sleep(&lt;span class=&quot;number&quot;&gt;1e9&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// one second&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        timeout &amp;lt;- &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ch:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// a read from ch has occured&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-timeout:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// the read from ch has timed out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 &lt;code&gt;time.After()&lt;/code&gt; 函数替换 &lt;code&gt;timeout-channel&lt;/code&gt;。可以在 &lt;code&gt;select&lt;/code&gt; 中使用来让发送信号超时或停止协程的执行。以下代码，在 &lt;code&gt;timeoutNs&lt;/code&gt; 纳秒后执行 &lt;code&gt;select&lt;/code&gt; 的 &lt;code&gt;timeout&lt;/code&gt; 分支后，包含&lt;code&gt;client.Call&lt;/code&gt; 的&lt;code&gt;lambda&lt;/code&gt; 协程也随之结束，不会给通道 &lt;code&gt;ch&lt;/code&gt; 返回值。缓冲大小设置为 &lt;code&gt;1&lt;/code&gt; 是必要的，可以避免协程死锁以及确保超时的通道可以被垃圾回收。需要注意如果 &lt;code&gt;select&lt;/code&gt; 中的某些非定时器选项的通道读写密集，则可能无法结束这些进程。这种情况如果将 &lt;code&gt;select&lt;/code&gt; 放到一个 &lt;code&gt;for&lt;/code&gt; 循环中，也无法精确地在定时器通道写入时就结束，因为 &lt;code&gt;select&lt;/code&gt; 对可以执行的多个 &lt;code&gt;case&lt;/code&gt; 采取伪随机算法选择，可能结束进程的时间要比定时器发出信号略晚一些。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; error, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() &amp;#123; ch &amp;lt;- client.Call(&lt;span class=&quot;string&quot;&gt;&quot;Service.Method&quot;&lt;/span&gt;, args, &amp;amp;reply) &amp;#125; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-time.After(timeoutNs):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// call timed out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; resp := &amp;lt;-ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// use resp and reply&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;假设程序从多个复制的数据库同时读取，只需要接收首先到达的答案，&lt;code&gt;Query&lt;/code&gt; 函数获取数据库的连接切片，并行请求每一个数据库并返回收到的第一个响应。结果通道 &lt;code&gt;ch&lt;/code&gt; 必须是带缓冲的，以保证第一个发送进来的数据有地方可以存放，确保放入的首个数据总会成功：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Query(conns []conn, query &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) Result &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Result, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, conn := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; conns &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;(c Conn) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; ch &amp;lt;- c.DoQuery(query):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;(conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;- ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;缓冲通道实现信号量模式&quot;&gt;&lt;a href=&quot;#缓冲通道实现信号量模式&quot; class=&quot;headerlink&quot; title=&quot;缓冲通道实现信号量模式&quot;&gt;&lt;/a&gt;缓冲通道实现信号量模式&lt;/h1&gt;&lt;p&gt;使用缓冲通道模拟信号量，需满足&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带缓冲通道的容量和要同步的资源容量相同&lt;/li&gt;
&lt;li&gt;通道的长度（当前存放的元素个数）与当前资源被使用的数量相同&lt;/li&gt;
&lt;li&gt;容量减去通道的长度就是未处理的资源个数（标准信号量的整数值）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建一个可缓冲通道表示单一信号量。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Empty &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; semaphore &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Empty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将可用资源的数量N来初始化信号量 &lt;code&gt;semaphore：sem = make(semaphore, N)&lt;/code&gt;，提供方法从信号量通道中读取、写入。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// acquire n resources&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (s semaphore) P(n &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e := &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Empty)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s &amp;lt;- e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// release n resouces&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (s semaphore) V(n &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;- s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个互斥的例子：&lt;br&gt;&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/* mutexes */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s semaphore) &lt;span class=&quot;type&quot;&gt;Lock&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.P(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s semaphore) &lt;span class=&quot;type&quot;&gt;Unlock&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.V(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* signal-wait */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s semaphore) &lt;span class=&quot;type&quot;&gt;Wait&lt;/span&gt;(n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.P(n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s semaphore) &lt;span class=&quot;type&quot;&gt;Signal&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.V(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 管道过滤&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;从通道接收的数据并发送给输出通道，可过滤符合条件的数据。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sendChan := make(chan &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reciveChan := make(chan &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go filter(sendChan, receiveChan)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func filter(&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;lt;-chan &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; chan&amp;lt;- &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; inValue := &lt;span class=&quot;type&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; := ... /// processing inValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; &amp;lt;- &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;协程的恢复&quot;&gt;&lt;a href=&quot;#协程的恢复&quot; class=&quot;headerlink&quot; title=&quot;协程的恢复&quot;&gt;&lt;/a&gt;协程的恢复&lt;/h1&gt;&lt;p&gt;以下代码停掉了服务器内部一个失败的协程而不影响其他协程的工作。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; server(workChan &amp;lt;-&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; *Work) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; work := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; workChan &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; safelyDo(work)   &lt;span class=&quot;comment&quot;&gt;// start the goroutine for that work&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; safelyDo(work *Work) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := &lt;span class=&quot;built_in&quot;&gt;recover&lt;/span&gt;(); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            log.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Work failed with %s in %v&quot;&lt;/span&gt;, err, work)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    do(work)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Unknwon/the-way-to-go_ZH_CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《The Way To Go》中文译本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://forec.github.io/2016/09/08/gochan-accumulate/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://forec.github.io/2016/09/08/gochan-accumulate/&quot;&gt;http://forec.github.io/2016/09/08/gochan-accumulate/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理近期遇到的Golang中通道和协程的技巧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Language" scheme="http://forec.github.io/categories/Language/"/>
    
    
      <category term="Golang" scheme="http://forec.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Spark集群计算环境配置和使用</title>
    <link href="http://forec.github.io/2016/07/11/spark-initial/"/>
    <id>http://forec.github.io/2016/07/11/spark-initial/</id>
    <published>2016-07-11T06:53:38.000Z</published>
    <updated>2016-07-10T13:01:59.987Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;http://forec.github.io/2016/07/09/hadoop-build/&quot;&gt;Hadoop配置与使用&lt;/a&gt;基础上配置Spark集群计算环境，以及简单Scala程序在集群的运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;在Hadoop通用并行框架上配置Spark&quot;&gt;&lt;a href=&quot;#在Hadoop通用并行框架上配置Spark&quot; class=&quot;headerlink&quot; title=&quot;在Hadoop通用并行框架上配置Spark&quot;&gt;&lt;/a&gt;在Hadoop通用并行框架上配置Spark&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;从&lt;a href=&quot;http://spark.apache.org/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Spark&lt;/a&gt;下载合适的版本，以&lt;code&gt;Pre-build for Hadoop 2.6&lt;/code&gt;为例，将压缩包解压到某目录，该压缩包目录作为环境变量&lt;code&gt;SPARK_HOME&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;向环境变量添加&lt;code&gt;%SPARK_HOME%/bin&lt;/code&gt;并source生效。&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;%HADOOP_HOME%\etc\hadoop&lt;/code&gt;作为&lt;code&gt;HADOOP_CONF_DIR&lt;/code&gt;添加到环境变量。&lt;/li&gt;
&lt;li&gt;按Hadoop集群的运行方式启动Hadoop  &lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bin/hdfs namenode -&lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bin/hdfs dfs -&lt;span class=&quot;built_in&quot;&gt;mkdir&lt;/span&gt; /user/&amp;lt;username&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sbin/&lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt;-dfs.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sbin/&lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt;-yarn.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;在Hadoop集群上执行Spark作业&quot;&gt;&lt;a href=&quot;#在Hadoop集群上执行Spark作业&quot; class=&quot;headerlink&quot; title=&quot;在Hadoop集群上执行Spark作业&quot;&gt;&lt;/a&gt;在Hadoop集群上执行Spark作业&lt;/h1&gt;&lt;h2 id=&quot;一个Scala的MapReduce样本&quot;&gt;&lt;a href=&quot;#一个Scala的MapReduce样本&quot; class=&quot;headerlink&quot; title=&quot;一个Scala的MapReduce样本&quot;&gt;&lt;/a&gt;一个Scala的MapReduce样本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;此样例为多维属性向量的均值计算&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.spark.&amp;#123;&lt;span class=&quot;type&quot;&gt;SparkConf&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;SparkContext&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.spark.rdd.&lt;span class=&quot;type&quot;&gt;RDD&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Statistic&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;/span&gt;args: &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; conf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;SparkConf&lt;/span&gt;().setAppName(&lt;span class=&quot;string&quot;&gt;&quot;example&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; spark = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;SparkContext&lt;/span&gt;(conf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; set = spark.textFile(args(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)).flatMap &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      line =&amp;gt; line.split(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;).map &amp;#123; opt =&amp;gt; (opt.split(&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).toInt, opt.split(&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).toFloat) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;.reduceByKey(_+_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; count = set.count()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set.collect.map &amp;#123; &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; (key, value) =&amp;gt; value/count&amp;#125;.foreach&amp;#123;println&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    spark.stop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;样例代码中，set为(Int, Float)的&lt;code&gt;&amp;lt;key, value&amp;gt;&lt;/code&gt;对的RDD，通过&lt;code&gt;reduceByKey&lt;/code&gt;将相同属性求和，在最后collect回收所有分布式集群上的结果汇总到本地。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;执行作业&quot;&gt;&lt;a href=&quot;#执行作业&quot; class=&quot;headerlink&quot; title=&quot;执行作业&quot;&gt;&lt;/a&gt;执行作业&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将要执行的代码export为jar包，一下文件名为&lt;code&gt;example.jar&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;ssh到localhost（此处使用伪分布式Hadoop集群）。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行如下命令，其中&lt;code&gt;path_to_example_jar&lt;/code&gt;为jar包所在的位置，MainClass为jar包中要执行的object，args为传入MainClass的参数列表，空格隔开，可变长。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;spark-submit --class MainClass --master yarn-cluster path_to_example_jar args...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行作业后可在Hadoop监视器的logs中看到输出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Scala的部分Spark-API&quot;&gt;&lt;a href=&quot;#Scala的部分Spark-API&quot; class=&quot;headerlink&quot; title=&quot;Scala的部分Spark API&quot;&gt;&lt;/a&gt;Scala的部分Spark API&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;API文档根目录：&lt;br&gt;&lt;a href=&quot;http://spark.apache.org/docs/1.5.1/api/scala/index.html#package&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://spark.apache.org/docs/1.5.1/api/scala/index.html#package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;key, value&amp;gt;&lt;/code&gt;类型的RDD：&lt;br&gt;&lt;a href=&quot;http://spark.apache.org/docs/1.5.1/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://spark.apache.org/docs/1.5.1/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;所有RDD：&lt;br&gt;&lt;a href=&quot;http://spark.apache.org/docs/1.5.1/api/scala/index.html#org.apache.spark.rdd.RDD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://spark.apache.org/docs/1.5.1/api/scala/index.html#org.apache.spark.rdd.RDD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://forec.github.io/2016/07/11/spark-initial/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://forec.github.io/2016/07/11/spark-initial/&quot;&gt;http://forec.github.io/2016/07/11/spark-initial/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;http://forec.github.io/2016/07/09/hadoop-build/&quot;&gt;Hadoop配置与使用&lt;/a&gt;基础上配置Spark集群计算环境，以及简单Scala程序在集群的运行。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="http://forec.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://forec.github.io/tags/Hadoop/"/>
    
      <category term="Spark" scheme="http://forec.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Python3操作Access数据库</title>
    <link href="http://forec.github.io/2016/07/10/python-visit-access-database/"/>
    <id>http://forec.github.io/2016/07/10/python-visit-access-database/</id>
    <published>2016-07-10T08:45:29.000Z</published>
    <updated>2016-07-10T09:32:16.233Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;记录在windows 10下配置python3链接access数据库过程和几个简单操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;安装所需库文件&quot;&gt;&lt;a href=&quot;#安装所需库文件&quot; class=&quot;headerlink&quot; title=&quot;安装所需库文件&quot;&gt;&lt;/a&gt;安装所需库文件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;从&lt;a href=&quot;https://sourceforge.net/projects/pywin32/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://sourceforge.net/projects/pywin32/&lt;/a&gt;下载最新的对应本地python3版本的pywin32库并安装。&lt;/li&gt;
&lt;li&gt;从&lt;a href=&quot;https://www.microsoft.com/zh-cn/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.microsoft.com/zh-cn/download/&lt;/a&gt;下载Access数据库驱动AccessDatabaseEngine_X64.exe。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;读取Access数据库&quot;&gt;&lt;a href=&quot;#读取Access数据库&quot; class=&quot;headerlink&quot; title=&quot;读取Access数据库&quot;&gt;&lt;/a&gt;读取Access数据库&lt;/h1&gt;&lt;h2 id=&quot;建立连接&quot;&gt;&lt;a href=&quot;#建立连接&quot; class=&quot;headerlink&quot; title=&quot;建立连接&quot;&gt;&lt;/a&gt;建立连接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过以下交互命令同access数据库建立连接&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; win32com.client&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conn = win32com.client.gencache.EnsureDispatch(&lt;span class=&quot;string&quot;&gt;&#39;ADODB.Connection&#39;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DSN = &lt;span class=&quot;string&quot;&gt;&#39;PROVIDER = Microsoft.ACE.OLEDB.12.0;DATA SOURCE = /path/to/database;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conn.Open(DSN)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问数据库中名为&lt;code&gt;rs_name&lt;/code&gt;的表。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rs = win32com.client.Dispatch(&lt;span class=&quot;string&quot;&gt;r&#39;ADODB.Recordset&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rs_name = &lt;span class=&quot;string&quot;&gt;&#39;co&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rs.Open(&lt;span class=&quot;string&quot;&gt;&#39;[&#39;&lt;/span&gt; + rs_name + &lt;span class=&quot;string&quot;&gt;&#39;]&#39;&lt;/span&gt;, conn, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;# 不允许更新，用于查询&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意在上面的代码中，&lt;code&gt;rs.Open()&lt;/code&gt;的最后两个参数，分别是游标(CursorType)和数据锁定类型(LockType)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;游标为0：为仅向前游标，只读，只能向前浏览记录，不支持分页、Recordset、BookMark&lt;/li&gt;
&lt;li&gt;游标为1：为键集游标，只读，其他用户对数据库做的修改将反映到记录集中，但其他用户增加或删除记录不会反映到记录集中。支持分页、Recordset、BookMark &lt;/li&gt;
&lt;li&gt;游标为2：为动态游标，可读写，功能最强，但耗资源最多。用户对记录做的修改，增加或删除记录都将反映到记录集中。支持全功能浏览。&lt;/li&gt;
&lt;li&gt;游标为3：为静态游标，可读写，只是数据的一个快照，用户对记录做的修改，增加或删除记录都不会反映到记录集中。支持向前或向后移动。&lt;/li&gt;
&lt;li&gt;数据锁定类型为1：默认锁定，只读，不能做任何修改&lt;/li&gt;
&lt;li&gt;数据锁定类型为2：悲观锁定，当编辑时立刻锁定记录&lt;/li&gt;
&lt;li&gt;数据锁定类型为3：乐观锁定，直到使用update方法提交更新记录后才锁定记录&lt;/li&gt;
&lt;li&gt;数据锁定类型为4：批量乐观锁定，允许修改多个记录，只有调用UpdateBatch方法后才锁定记录。&lt;br&gt;当不需要改动任何记录时，使用只读的记录集，这样提供者不用做任何检测。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行SQL语句，以插入表为例&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sql_statement = &lt;span class=&quot;string&quot;&gt;&quot;Insert INTO [Table_Name] ([Field_1], [Field_2]) VALUES (&#39;data1&#39;, &#39;data2&#39;)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conn.Execute(sql_statement)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历数据库记录，&lt;code&gt;rs.MoveFirst()&lt;/code&gt;访问数据库的第一行记录，&lt;code&gt;rs.MoveNext()&lt;/code&gt;转移到下一行。注意如果第一个记录为空，则&lt;code&gt;rs.MoveFirst()&lt;/code&gt;会产生一个错误，如果此前将rs的Cursorlocation设置为3，则此问题可解决。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rs.MoveFirst()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; rs.EOF:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rs.MoveNext()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看数据，在下面的例子中，打开的表格中，第一列的名称为ID，第一行数据的ID为001，第二行数据的ID为002。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;rs.MoveFirst()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print(rs.Fields.Item(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;ID&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print(rs.Fields.Item(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).Value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;001&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;rs.MoveNext()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print(rs.Fields.Item(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).Value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;002&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表的列数可通过&lt;code&gt;rs.Fields.Count&lt;/code&gt;获取。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考博客：   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.2cto.com/kf/201204/129384.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python连接Access数据库&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://soft.zdnet.com.cn/software_zone/2008/0520/870686.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python读取mdb文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://my.oschina.net/duxuefeng/blog/64137&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;win32com用法_杜雪峰的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://forec.github.io/2016/07/10/python-visit-access-database/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://forec.github.io/2016/07/10/python-visit-access-database/&quot;&gt;http://forec.github.io/2016/07/10/python-visit-access-database/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录在windows 10下配置python3链接access数据库过程和几个简单操作。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="DataBase" scheme="http://forec.github.io/categories/DataBase/"/>
    
    
      <category term="Access" scheme="http://forec.github.io/tags/Access/"/>
    
      <category term="Python" scheme="http://forec.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop配置和使用</title>
    <link href="http://forec.github.io/2016/07/09/hadoop-build/"/>
    <id>http://forec.github.io/2016/07/09/hadoop-build/</id>
    <published>2016-07-09T12:56:27.000Z</published>
    <updated>2016-07-10T13:04:34.937Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;简单记录在Ubuntu Linux上搭建本地伪分布式的Hadoop MapReduce集群过程及使用方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;安装并配置hadoop&quot;&gt;&lt;a href=&quot;#安装并配置hadoop&quot; class=&quot;headerlink&quot; title=&quot;安装并配置hadoop&quot;&gt;&lt;/a&gt;安装并配置hadoop&lt;/h1&gt;&lt;h2 id=&quot;安装Hadoop及需要的工具&quot;&gt;&lt;a href=&quot;#安装Hadoop及需要的工具&quot; class=&quot;headerlink&quot; title=&quot;安装Hadoop及需要的工具&quot;&gt;&lt;/a&gt;安装Hadoop及需要的工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;jdk 1.7或以上版本：&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/a&gt;，并配置JAVA_HOME环境变量。&lt;/li&gt;
&lt;li&gt;hadoop稳定版本，下文以2.6.4为例：&lt;a href=&quot;http://hadoop.apache.org/releases.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hadoop.apache.org/releases.html&lt;/a&gt;，下载编译好的binary压缩包，解压到某目录，如&lt;code&gt;/home/forec/hadoop-2.6.4&lt;/code&gt;，并设置&lt;code&gt;HADOOP_HOME&lt;/code&gt;，如在&lt;code&gt;/etc/environment&lt;/code&gt;中添加&lt;code&gt;export HADOOP_HOME=/home/forec/hadoop-2.6.4/&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install rsync&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;设置环境变量&quot;&gt;&lt;a href=&quot;#设置环境变量&quot; class=&quot;headerlink&quot; title=&quot;设置环境变量&quot;&gt;&lt;/a&gt;设置环境变量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;%HADOOP_HOME%/etc/hadoop&lt;/code&gt;目录下的&lt;code&gt;hadoop-env.sh&lt;/code&gt;中添加&lt;code&gt;export JAVA_HOME=/path/to/jdk&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;/etc/environment&lt;/code&gt;中添加&lt;code&gt;export HADOOP_PREFIX=/home/forec/hadoop-2/6/4/&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;下面的操作均在HADOOP_HOME目录下进行&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;本地非分布式操作&quot;&gt;&lt;a href=&quot;#本地非分布式操作&quot; class=&quot;headerlink&quot; title=&quot;本地非分布式操作&quot;&gt;&lt;/a&gt;本地非分布式操作&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在默认模式下，hadoop被配置为非分布式的运行模式，以单独的java进程运行，适合debug。以下命令演示以非分布式方式在hadoop上运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;执行下面命令启动本地hadoop作业&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir /dir_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp /&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;_dir_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_input /dir_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bin/hadoop jar jar_to_run /dir_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_input /dir_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat /dir_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_output/*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;本地伪分布式操作&quot;&gt;&lt;a href=&quot;#本地伪分布式操作&quot; class=&quot;headerlink&quot; title=&quot;本地伪分布式操作&quot;&gt;&lt;/a&gt;本地伪分布式操作&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;hadoop可被配置为一个单个节点的伪分布式系统，每一个虚拟操作以单独的java进程运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;修改配置文件&quot;&gt;&lt;a href=&quot;#修改配置文件&quot; class=&quot;headerlink&quot; title=&quot;修改配置文件&quot;&gt;&lt;/a&gt;修改配置文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;etc/hadoop/core-site.xml&lt;/code&gt;如下。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;fs.defaultFS&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;hdfs://localhost:9000&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;etc/hadoop/hdfs-site.xml&lt;/code&gt;如下。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.replication&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置无密钥ssh登录localhost：尝试&lt;code&gt;ssh localhost&lt;/code&gt;，若需输入密码，则通过下面命令免除输入密码的操作。其中如果本地已经生成了ssh密钥可以省略。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t dsa -&lt;span class=&quot;constant&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; -f ~&lt;span class=&quot;regexp&quot;&gt;/.ssh/id&lt;/span&gt;_dsa	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat ~&lt;span class=&quot;regexp&quot;&gt;/.ssh/id&lt;/span&gt;_dsa.pub &lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;~&lt;span class=&quot;regexp&quot;&gt;/.ssh/authorized&lt;/span&gt;_keys&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;在本地启动hadoop&quot;&gt;&lt;a href=&quot;#在本地启动hadoop&quot; class=&quot;headerlink&quot; title=&quot;在本地启动hadoop&quot;&gt;&lt;/a&gt;在本地启动hadoop&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;格式化文件系统: &lt;code&gt;$ bin/hdfs namenode -format&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;启动NameNode和DataNode: &lt;code&gt;sbin/start-dfs.sh&lt;/code&gt;，其log文件写入&lt;code&gt;%HADOOP_HOME%/logs&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;访问地址&lt;code&gt;http://localhost:50070&lt;/code&gt;可以看到NameNode的网页接口，如下图。&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/overview.png&quot; width=&quot;500px&quot;&gt;&lt;/li&gt;
&lt;li&gt;将地址栏的&lt;code&gt;http://localhost:50070/dfshealth.***&lt;/code&gt;改成&lt;code&gt;http://localhost:50070/dfshealth.jsp&lt;/code&gt;可进入文件系统，如下图。&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/directory.png&quot; width=&quot;500px&quot;&gt;&lt;/li&gt;
&lt;li&gt;建立HDFS目录以执行MapReduce任务：&lt;code&gt;$ bin/hdfs dfs -mkdir /user&lt;/code&gt;，&lt;code&gt;$ bin/hdfs dfs -mkdir /user/&amp;lt;username&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;将输入文件拷贝到分布式文件系统中: &lt;code&gt;$ bin/hdfs dfs -put /local_dir_for_input_files /dir_in_distributed_filesystem_for_input&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;注意上面的&lt;code&gt;/dir_in_distributed_filesystem_for_input&lt;/code&gt;是分布式文件系统中输入文件的目录，此命令将本地的输入文件拷贝到了分布式文件系统的该目录中。&lt;/li&gt;
&lt;li&gt;运行jar包: &lt;code&gt;$ bin/hadoop jar jar_file_to_excute /dir_in_distributed_filesystem_for_input /dir_in_distributed_filesystem_for_output&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;检查输出文件可以通过将分布式文件系统中的输出文件拷贝到本地，或直接在分布式文件系统中查看。拷贝到本地执行如下命令：&lt;code&gt;$ bin/hdfs dfs -get /dir_in_distributed_filesystem_for_output /local_dir&lt;/code&gt;，&lt;code&gt;$ cat /local_dir/*&lt;/code&gt;；在分布式文件系统查看执行如下命令：&lt;code&gt;$ bin/hdfs dfs -cat /dir_in_distributed_filesystem_for_output/*&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;任务完成后终止hadoop虚拟机：&lt;code&gt;$ sbin/stop-dfs.sh&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;在YARN执行MapReduce作业&quot;&gt;&lt;a href=&quot;#在YARN执行MapReduce作业&quot; class=&quot;headerlink&quot; title=&quot;在YARN执行MapReduce作业&quot;&gt;&lt;/a&gt;在YARN执行MapReduce作业&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;需要完成前面“在本地启动hadoop”的配置中1～4步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;etc/hadoop/mapred-site.xml&lt;/code&gt;，此文件在2.6.4版本中不存在，可以修改&lt;code&gt;etc/hadoop/mapred-site.xml.template&lt;/code&gt;并新建该文件。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;mapreduce.framework.name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;yarn&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;etc/hadoop/yarn-site.xml&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.aux-services&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;mapreduce_shuffle&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动资源管理器和节点管理器：&lt;code&gt;$ sbin/start-yarn.sh&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;启动浏览器，访问&lt;code&gt;http://localhost:8088/&lt;/code&gt;，可以查看hadoop的资源监视器，如下图。&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/yarn.png&quot; width=&quot;500px&quot;&gt;&lt;/li&gt;
&lt;li&gt;按上面执行hadoop的方式执行一个MapReduce任务。&lt;/li&gt;
&lt;li&gt;作业完成后关闭虚拟机：&lt;code&gt;$ sbin/stop-yarn.sh&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意，在伪分布式的hadoop上执行MapReduce任务时，需ssh到localhost，之后在8088端口才能看到作业记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;完整的hadoop作业运行示例&quot;&gt;&lt;a href=&quot;#完整的hadoop作业运行示例&quot; class=&quot;headerlink&quot; title=&quot;完整的hadoop作业运行示例&quot;&gt;&lt;/a&gt;完整的hadoop作业运行示例&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;安装并配置好hadoop，执行&lt;code&gt;$ sbin/start-yarn.sh&lt;/code&gt;和&lt;code&gt;$ sbin/start-dfs.sh&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一段简单的java代码如下，export出的jar包可在hadoop上执行MapReduce作业。使用eclipse或idea时，需要导入SDK、JDK和scala-hadoop-assembly包。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Iterator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.conf.Configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.fs.FileSystem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.fs.Path;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.io.LongWritable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.io.Text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.mapreduce.Job;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.mapreduce.Mapper;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.mapreduce.Reducer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.mapreduce.lib.input.FileInputFormat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*********************** Map  **********************/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mapper&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Object&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object key,Text value,Context context)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    	&lt;span class=&quot;comment&quot;&gt;// Map Progress&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//-----shuffle    ===&amp;gt; [key,value-list]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*********************** Reduce  **********************/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reduce&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reducer&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Text key,Iterable&amp;lt;Text&amp;gt; values,Context context)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		   	&lt;span class=&quot;comment&quot;&gt;// Reduce Progress&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    &lt;span class=&quot;comment&quot;&gt;// context.write(***);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*********************** Main  **********************/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IllegalArgumentException, IOException, ClassNotFoundException, InterruptedException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Configuration conf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Configuration();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Job job = Job.getInstance(conf, &lt;span class=&quot;string&quot;&gt;&quot;forec&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setJarByClass(myson.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//*********set Map*************&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setMapperClass(Map.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setMapOutputKeyClass(Text.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setMapOutputValueClass(Text.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//******** set Reduce ************&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setReducerClass(Reduce.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setOutputKeyClass(Text.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setOutputValueClass(Text.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//********* delete output *********&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    FileSystem fstm = FileSystem.get(conf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Path outDir = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(args[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!outDir.equals(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        fstm.delete(outDir, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//********** set input/output path***********&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    FileInputFormat.addInputPath(job, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    FileOutputFormat.setOutputPath(job, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(args[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.waitForCompletion(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生成的jar包即可通过上述执行方式运行在hadoop上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： &lt;a href=&quot;http://hadoop.apache.org/docs/r2.6.4/hadoop-project-dist/hadoop-common/SingleCluster.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hadoop官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://forec.github.io/2016/07/09/hadoop-build/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://forec.github.io/2016/07/09/hadoop-build/&quot;&gt;http://forec.github.io/2016/07/09/hadoop-build/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简单记录在Ubuntu Linux上搭建本地伪分布式的Hadoop MapReduce集群过程及使用方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="http://forec.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://forec.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>对丘奇整数的一点思路整理</title>
    <link href="http://forec.github.io/2016/03/24/church-count/"/>
    <id>http://forec.github.io/2016/03/24/church-count/</id>
    <published>2016-03-24T08:08:22.000Z</published>
    <updated>2016-03-24T10:35:44.752Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;记录自己在理解sicp习题2.6中Church计数时的思考过程，对术语的定义均来自&lt;a href=&quot;https://en.wikipedia.org/wiki/λ_calculus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wiki&lt;/a&gt;。谨记函数为一等公民，过程即数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;λ演算&quot;&gt;&lt;a href=&quot;#λ演算&quot; class=&quot;headerlink&quot; title=&quot;λ演算&quot;&gt;&lt;/a&gt;λ演算&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;λ演算由阿隆佐·丘奇和他的学生在20世纪30年代引入，对函数式编程语言有巨大的影响。λ演算之通用在于，任何一个可计算函数都能用这种形式来表达和求值。λ演算强调的是变换规则的运用，而非实现它们的具体机器。&lt;/li&gt;
&lt;li&gt;在λ演算中，每个表达式都代表一个函数，该函数接受一个参数并返回一个值，且无论参数还是返回值均为一个单参函数。即λ演算中存在且仅存在一种类型，为单参函数。对于现实中看起来接受两个参数的函数，实质为一个接受单一参数并返回接受另一个“接受单一参数”的函数，即柯里化。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在sicp的习题2.6中，对Church计数的0和add-1定义如下。&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; zero &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;add-1&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; f)&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对上面的代码而言，通过柯里化转换成如下格式可能较易理解。但上面的形式复合λ演算的定义，即全部通过单参匿名函数实现。&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; zero &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;add-1&lt;/span&gt; n)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; f x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;形式化描述&quot;&gt;&lt;a href=&quot;#形式化描述&quot; class=&quot;headerlink&quot; title=&quot;形式化描述&quot;&gt;&lt;/a&gt;形式化描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;λ演算的非形式化描述通过λ表达式匿名定义，如函数f(x)=x+2的表示为&lt;code&gt;λx.x+2&lt;/code&gt;（或&lt;code&gt;λy.y+2&lt;/code&gt;，参数名无关紧要），f(3)即3+2可表示为&lt;code&gt;(λx.x+2) 3&lt;/code&gt;，也可以表示为&lt;code&gt;(λf.f 3)(λx.x+2)，这三者等价。然而并非所有的lambda表达式都可以规约成某种通用的函数，例如考虑&lt;/code&gt;(λx.x x)(λx.x x)`，其不具有确定值。&lt;/li&gt;
&lt;li&gt;对λ演算的形式化定义为，从一个标识符的可数无穷集合开始，如{a, b, c, …, x, y, …}，则所有的λ表达式可以通过下述上下文无关文法描述，前两条规则用来生成函数，第三条描述了函数对参数的作用方式。其中函数定义为左结合，且λ操作符绑定到它后面的整个表达式，因此括号在无歧义情况下可以舍弃。&lt;ul&gt;
&lt;li&gt;&amp;lt;表达式&amp;gt; ::= &amp;lt;标识符&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;表达式&amp;gt; ::=(λ&amp;lt;标识符&amp;gt; .&amp;lt;表达式&amp;gt;)&lt;/li&gt;
&lt;li&gt;&amp;lt;表达式&amp;gt; ::=(&amp;lt;表达式&amp;gt; &amp;lt;表达式&amp;gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以上λ表达式并未定义函数，例如&lt;code&gt;λx.(x y)&lt;/code&gt;中变量y的出现时自由的，其并未被绑定到表达式的任何一个λ上。一个λ表达式的自由变量的集合通过下面规则定义，分别对应上面形式化定义的各点。&lt;ul&gt;
&lt;li&gt;在表达式V中，V为变量，则该表达式自由变量的集合只有V。&lt;/li&gt;
&lt;li&gt;在表达式&lt;code&gt;λV .E&lt;/code&gt;中（V为变量，E是另一个表达式），自由变量的集合为E中自由变量的集合减去变量V。因此E中的V被绑定在λ上。例如&lt;code&gt;λx.x&lt;/code&gt;，将第一个x视为变量，第二个x视为表达式，则其自由变量集合为空集。&lt;/li&gt;
&lt;li&gt;在表达式&lt;code&gt;(E E&amp;#39;)&lt;/code&gt;中，自由变量的集合石E和E’中自由变量集合的并集。例如&lt;code&gt;λx.x x&lt;/code&gt;，可以看作&lt;code&gt;((λx.x)(x))&lt;/code&gt;，因此自由变量集合为{x}。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;归约&quot;&gt;&lt;a href=&quot;#归约&quot; class=&quot;headerlink&quot; title=&quot;归约&quot;&gt;&lt;/a&gt;归约&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;根据λ演算的形式化定义，可以在λ表达式的集合上定义等价关系，即表述：“两个表达式其实表示的是同一个函数”。&lt;/li&gt;
&lt;li&gt;α-变换：被绑定变量的名称是不重要的。具体陈述为：若V与W均为变量，E是一个λ表达式，同时&lt;code&gt;E[V:=W]&lt;/code&gt;是指把表达式E中的所有的V的自由出现都替换为W，那么在W不是E中的一个自由出现，且如果W替换了V，W不会被E中的λ绑定的情况下，有&lt;code&gt;λV.E == λW.E[V:=W]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;β-归约：其表达的是函数作用的概念。陈述了若所有的E’的自由出现在E [V:=E’]中仍然是自由的情况下，有&lt;code&gt;((λV.E) E&amp;#39;) == E [V:=E&amp;#39;]&lt;/code&gt;成立。&lt;/li&gt;
&lt;li&gt;η-变换：表达的是外延性的概念，即两个函数对于所有的参数得到的结果都一致，当且仅当它们是同一个函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;丘奇整数&quot;&gt;&lt;a href=&quot;#丘奇整数&quot; class=&quot;headerlink&quot; title=&quot;丘奇整数&quot;&gt;&lt;/a&gt;丘奇整数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;丘奇整数是将自然数用高阶函数展示的一种形式。它将自然数n表示为任意给定函数f自身的n重复合。所有的丘奇整数都是接受两个参数的函数，可以通过λ演算定义如下。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ≡ λf.λx. x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ≡ λf.λx. f x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ≡ λf.λx. f (f x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; ≡ λf.λx. f (f (f x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n ≡ λf.λx. fn x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于sicp给出的0和add定义，可以用haskell表示，并用&lt;code&gt;:t&lt;/code&gt;查看其type。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; zero = (\f -&amp;gt; \x -&amp;gt; x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; :t zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;zero&lt;/span&gt; :: t -&amp;gt; t1 -&amp;gt; t1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; add1 n = (\f -&amp;gt; \x -&amp;gt; f ((n f) x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; :t add1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;add1&lt;/span&gt; :: ((t1 -&amp;gt; t) -&amp;gt; t2 -&amp;gt; t1) -&amp;gt; (t1 -&amp;gt; t) -&amp;gt; t2 -&amp;gt; t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; :t (add1 zero)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(add1 zero) :: (t1 -&amp;gt; t) -&amp;gt; t1 -&amp;gt; t&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由此可以得出1、2、3的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; one &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;add-1&lt;/span&gt; zero)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; one &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; one &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; two &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; three &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;回头看add-1的最初定义，已经感受到一致性：对n做add-1，就是对n所代表的过程再复合指定的函数f。这与丘奇整数的值和其复合指数相同一致。&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;add-1&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; f)&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下面是haskell对丘奇整数和整数之间转换的函数。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Church&lt;/span&gt; a = &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; -&amp;gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;)&lt;/span&gt; -&amp;gt; a -&amp;gt; a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;church&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;Integer&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Church&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;church&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; = \f -&amp;gt; \x -&amp;gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;church&lt;/span&gt; n = \f -&amp;gt; \x -&amp;gt; f (church (n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) f x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;unchurch&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;Church&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Integer&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;unchurch&lt;/span&gt; cn = cn (+ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;丘奇函数加深了对高阶函数、数据的过程性和书中“总可以将数据定义为一组适当的选择函数和构造函数，以及为使这些过程成为一套合法表示，他们就必须满足的一组特定条件”的认识。日后对λ演算做深入学习时再作补充。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： 《计算机程序的构造和解释》&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://forec.github.io/2016/03/24/church-count/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://forec.github.io/2016/03/24/church-count/&quot;&gt;http://forec.github.io/2016/03/24/church-count/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录自己在理解sicp习题2.6中Church计数时的思考过程，对术语的定义均来自&lt;a href=&quot;https://en.wikipedia.org/wiki/λ_calculus&quot;&gt;wiki&lt;/a&gt;。谨记函数为一等公民，过程即数据。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Language" scheme="http://forec.github.io/categories/Language/"/>
    
    
      <category term="sicp" scheme="http://forec.github.io/tags/sicp/"/>
    
      <category term="函数式编程" scheme="http://forec.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>复杂网络传统社区发现算法概述</title>
    <link href="http://forec.github.io/2016/03/12/community-found/"/>
    <id>http://forec.github.io/2016/03/12/community-found/</id>
    <published>2016-03-12T07:26:08.000Z</published>
    <updated>2016-03-19T08:41:15.004Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;复杂网络是复杂系统的抽象，其中一个重要特征是网络中所呈现出的社区结构。许多网络是异构的，对于构成网络的不同类型节点所组成的子图称为网络中的社区。整理了几个传统的社区发现算法流程和大致原理，记录备忘。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Kerighan-Lin算法&quot;&gt;&lt;a href=&quot;#Kerighan-Lin算法&quot; class=&quot;headerlink&quot; title=&quot;Kerighan-Lin算法&quot;&gt;&lt;/a&gt;Kerighan-Lin算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;算法为类似模拟退火式的试探优化法，采用贪婪的策略对网络进行二分社区。其复杂度仅为O(N^2)，适用于小规模的网络，但准确度不高，并且必须事先知道两个社区的规模大小。&lt;/li&gt;
&lt;li&gt;定义增益值&lt;code&gt;P = 两个社区内部边数 - 两个社区之间边数&lt;/code&gt;，并寻找使P最大的划分。&lt;/li&gt;
&lt;li&gt;算法流程如下&lt;ul&gt;
&lt;li&gt;(1) 随机将整个网络中的节点划分为两个社区A和B，其节点数分别为m和n，m和n已知。&lt;/li&gt;
&lt;li&gt;(2) 对于A和B中的每对节点&lt;code&gt;{(i,j), i∈A, j∈B&lt;/code&gt;，计算将i和j交换后的&lt;code&gt;ΔP = 交换后的P - 交换前的P&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;(3) 选取使ΔP最大的交换节点对并更新P值。另外，每个节点仅能交换一次。&lt;/li&gt;
&lt;li&gt;(4) 转(2)，直到A或者B二者中某个社区所有节点都已经被交换过一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基于Laplace图特征值的社区发现方法&quot;&gt;&lt;a href=&quot;#基于Laplace图特征值的社区发现方法&quot; class=&quot;headerlink&quot; title=&quot;基于Laplace图特征值的社区发现方法&quot;&gt;&lt;/a&gt;基于Laplace图特征值的社区发现方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个无向图G=(V,E)，矩阵D是一个对角矩阵，对角线上的元素Dii是节点i的度，矩阵W是图G的邻接矩阵。拉普拉斯矩阵&lt;code&gt;L = D - W&lt;/code&gt;，因此L为对称矩阵。其规定和具有的性质如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于W，定义图中A、B两个子图间的权重为&lt;code&gt;W(A, B) = ∑wij, i∈A, j∈B&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;与某个节点邻接的所有边的权值和定义为该顶点的度，即&lt;code&gt;di = ∑wij, i from 1 to n&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;L是一个对称半正定矩阵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;L·vector(1) = 0·vector(1)&lt;/code&gt;，因为&lt;code&gt;L·vector(1) = (D-W)·vector(1) = 0·vector(1)&lt;/code&gt;。这里vector代表向量，也就是说L的最小特征值是0，对应的特征向量是vector(1)。&lt;/li&gt;
&lt;li&gt;L有n个非负实特征值0 = λ1 &amp;lt;= λ2 &amp;lt;= λ3 &amp;lt;= … &amp;lt;= λn&lt;/li&gt;
&lt;li&gt;对于任何一个实向量f∈R^n，有&lt;code&gt;2f&amp;#39;Lf = ∑wij(fi - fj)^2, i,j from 1 to N&lt;/code&gt;。证明如下：&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;f&lt;span class=&quot;operator&quot;&gt;&#39;&lt;/span&gt;Lf = f&lt;span class=&quot;operator&quot;&gt;&#39;&lt;/span&gt;Df - f&lt;span class=&quot;operator&quot;&gt;&#39;&lt;/span&gt;Wf &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     = ∑difi^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - ∑fifjwij(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;∈&lt;span class=&quot;matrix&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,n]&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     = (∑difi^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;∑fifjwij + ∑djfj^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;∈&lt;span class=&quot;matrix&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,n]&lt;/span&gt;))/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     = (∑wij(fi-fj)^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; , &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;j&lt;/span&gt;∈&lt;span class=&quot;matrix&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,n]&lt;/span&gt;)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;切割图的目的在于 &lt;strong&gt;使被切掉的各边之和最小&lt;/strong&gt; ，因为其代表着子图之间连接的相似度最低。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;定义cut目标函数，式子中的~号表示对社区取反：&lt;code&gt;cut(A1, A2, ..., Ak) = (∑W(Ai, ~Ai), i∈[1,k])/2&lt;/code&gt;。该目标函数可能会导致不好的分割，例如将某个图分成一个单一点和其余的n-1个点。&lt;/li&gt;
&lt;li&gt;定义RatioCut目标函数：&lt;code&gt;Ratiocut(A1, A2, ..., Ak) = (∑W(Ai, ~Ai)/|Ai|, i∈[1,k])/2&lt;/code&gt;。其中|Ai|代表社区i中的节点数目。 &lt;strong&gt;最小化RatioCut等价于最小化f’Lf&lt;/strong&gt; ，这里的&lt;code&gt;f = (f1, f2, ..., fn)∈R^n&lt;/code&gt;，并且当节点vi∈A时，&lt;code&gt;fi = sqrt(|~A|/|A|)&lt;/code&gt;，否则&lt;code&gt;fi = -sqrt(|A|/|~A|)&lt;/code&gt;。根据上面提过的拉普拉斯矩阵性质，有&lt;code&gt;2f&amp;#39;Lf = ∑wij(fi - fj)^2, i,j from 1 to N&lt;/code&gt;。据此可以根据下面的推导得出，&lt;code&gt;min f&amp;#39;Lf &amp;lt;=&amp;gt; min RatioCut&lt;/code&gt;。&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/laplace%E6%8E%A8%E5%AF%BC.png&quot; width=&quot;500px&quot;&gt;&lt;/li&gt;
&lt;li&gt;因为向量f是单位向量1，所以有&lt;code&gt;|f|^2 = ∑(fi^2) = n&lt;/code&gt;，且&lt;code&gt;f&amp;#39;·1(单位向量）= ∑(fi) = 0&lt;/code&gt;。注意f是列向量，所以&lt;code&gt;f&amp;#39;·f&lt;/code&gt;是值，而&lt;code&gt;f·f&amp;#39;&lt;/code&gt;是一个NxN的矩阵。证明如下：&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/laplace%E6%8E%A8%E5%AF%BC2.png&quot; width=&quot;300px&quot;&gt;&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/laplace%E6%8E%A8%E5%AF%BC3.png&quot; width=&quot;300px&quot;&gt;&lt;/li&gt;
&lt;li&gt;假定&lt;code&gt;L·f = λ·f&lt;/code&gt;，这里L是Laplace矩阵，λ是矩阵L的一个特征值，f是L对应λ的特征向量。同时左乘f’，得到&lt;code&gt;f&amp;#39;·L·f = λn&lt;/code&gt;，因为n为定值，因此最小化&lt;code&gt;f&amp;#39;·L·f&lt;/code&gt;等价于最小化λ。因此需要寻找最小的特征值λ和对应的特征向量。因为Laplace矩阵最小的特征值为0，因此取第二小的特征值。更进一步，如果求出拉普拉斯矩阵的前K个特征向量，进行k-Means聚类得到k个簇，就从二聚类拓展到了k聚类。&lt;/li&gt;
&lt;li&gt;完整的算法描述如下&lt;ul&gt;
&lt;li&gt;构造图W，将各数据点相连，边的权重表示数据间的相似度。&lt;/li&gt;
&lt;li&gt;计算L = D - W（D为度矩阵，即W的每一列加到对角线上）&lt;/li&gt;
&lt;li&gt;求L的前k个特征值{λ1, λ2, …, λk}，并且按从小到大顺序排序，求出对应的特征向量vi，每个特征向量是一个Nx1的列向量。&lt;/li&gt;
&lt;li&gt;将这k个特征向量排成Nxk的矩阵，每一行都是k维空间中的一个向量，用k-Means聚类，聚类结果中的每一行的类别就是原来图中的节点所属类别。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;GN算法&quot;&gt;&lt;a href=&quot;#GN算法&quot; class=&quot;headerlink&quot; title=&quot;GN算法&quot;&gt;&lt;/a&gt;GN算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;分裂算法，复杂度为O(mxmxn)，需要事先知道图中社区的数目k。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1、计算每边的边介数，即网络上所有顶点对间的最短路径经过该边的次数。&lt;/li&gt;
&lt;li&gt;2、移除最大介数边。&lt;/li&gt;
&lt;li&gt;3、重新计算剩下边的介数。&lt;/li&gt;
&lt;li&gt;4、重复步骤2，3，直到剩下的社区个数满足指定社区数目k。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Newman快速算法&quot;&gt;&lt;a href=&quot;#Newman快速算法&quot; class=&quot;headerlink&quot; title=&quot;Newman快速算法&quot;&gt;&lt;/a&gt;Newman快速算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;时间复杂度为O(m(m+n))，比GN算法优化较多。是凝聚算法。&lt;/li&gt;
&lt;li&gt;首先将每个节点设为一个单独的社区，选出使模块度Q增值最大的社区合并，如果网络中所有顶点属于同一个社区则停止合并（自底向上的合并方式）。此时已经构造出了一棵凝聚树，这棵树的第k层对应着第k种社区划分方式，最底层对应着每个节点为一个社区。最终通过选取模块度最大的层数作为最佳划分。&lt;/li&gt;
&lt;li&gt;模块度Q的计算如下：假设有n个节点，m条边，每一步合并对应社区数目为r，组成一个rxr的矩阵e，矩阵中eij表示社区i和社区j的结点之间连边的数目在整个网络边数中所占的百分比。&lt;/li&gt;
&lt;li&gt;流程如下：&lt;ul&gt;
&lt;li&gt;1、初始情况下，有n个社区，m条边，若社区i（节点i）与社区j有连边，则eij=1/(2m)，否则为0。&lt;/li&gt;
&lt;li&gt;2、按照ΔQ最大或者最小的方向合并社区，并且更新合并后的模块度。这里增量&lt;code&gt;ΔQ = eij + eji - 2aiaj = 2(eij - aiaj)&lt;/code&gt;，这里的&lt;code&gt;ai = (∑eij)/2m&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;3、合并社区，并且修改矩阵e中的行列数。&lt;/li&gt;
&lt;li&gt;4、重复步骤2、3，合并至树根。&lt;/li&gt;
&lt;li&gt;5、计算模块度最大的社区划分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;派系过滤CPM方法&quot;&gt;&lt;a href=&quot;#派系过滤CPM方法&quot; class=&quot;headerlink&quot; title=&quot;派系过滤CPM方法&quot;&gt;&lt;/a&gt;派系过滤CPM方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;用于发现重叠社区，派系（clique）是任意两点都相连的顶点集合（完全子图）。k-派系表示网络中含有k个节点的完全子图。&lt;/li&gt;
&lt;li&gt;社区内部节点之间相互联系密切，容易形成派系，因此社区内部的边有较大可能形成大的完全子图，而社区之间的边却几乎不可能形成较大的完全子图 =&amp;gt; 从派系寻找社区。&lt;/li&gt;
&lt;li&gt;首先寻找网络中的极大完全子图，利用这些完全子图来寻找k-派系的连通子图，不同的k值对应了不同的社区结构。&lt;/li&gt;
&lt;li&gt;建立重叠矩阵：非对角元素代表两个连通派系中共享的节点数目，对角线元素代表派系的规模。将小于k-1的非对角线元素置为0，小于k的对角线元素置为1，得到k-派系连接矩阵。注意这里的k是输入参数，对结果有影响。k越大则生成的社区越大，社区的结构就越稀疏，通常k为4-6，视网络情况而定。&lt;/li&gt;
&lt;li&gt;CPM算法基于完全子图，因此适合完全子图比较多的网络，也就是边稠密网络，其处理稀疏图的效率较低。算法效率完全取决于寻找完全子图的效率，采用&lt;a href=&quot;http://forec.github.io/2015/09/19/Graph-Algorithms3/&quot;&gt;离线Tarjan算法&lt;/a&gt;会有所提高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Radicchi算法&quot;&gt;&lt;a href=&quot;#Radicchi算法&quot; class=&quot;headerlink&quot; title=&quot;Radicchi算法&quot;&gt;&lt;/a&gt;Radicchi算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;与GN相同，都基于去边，但不根据边介数，而引进边聚集系数，其算法复杂度为O(m^3/n^2)，适用于稀疏图。&lt;/li&gt;
&lt;li&gt;边聚集系数： &lt;strong&gt;一条边的两个端点和这两个端点的共同邻接点之间的另外两边所组成的三角环与可能包含该边的三角环数的比值&lt;/strong&gt;，即：&lt;code&gt;Cij = Zij/min(ki-1,kj-1)&lt;/code&gt;，这里ki，kj是端点i和j的度，公式中的分母表示该边可能被包含的三角环的最大数，Zij表示网络中包含该边的三角环的实际数目。&lt;/li&gt;
&lt;li&gt;如果网络中的一个三角环中含有一条连接不同社区的边，则该三角环中剩余的两边中还有一条连接同样两社区的可能性较大（因为具有社区结构的网络图中，社区之间的边较为稀少，因此包含一条给定的社区间脸变得三角形不会很多，即连接不同社区边的边聚集系数很小）。 =&amp;gt; 每一步删掉具有最小边聚集系数的边，并重新计算剩余边的边聚集系数（这里只需要重新计算和删除掉的边有关联的边的边聚集系数），循环至网络中不存在任何边。&lt;/li&gt;
&lt;li&gt;算法仅适用于三角环数较多的，如社会网络等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基于点聚集的局部算法&quot;&gt;&lt;a href=&quot;#基于点聚集的局部算法&quot; class=&quot;headerlink&quot; title=&quot;基于点聚集的局部算法&quot;&gt;&lt;/a&gt;基于点聚集的局部算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义连接相关度：&lt;code&gt;ΔC(ε, j) = C1(j) - C2(j)&lt;/code&gt;，这里C1(j)指节点j的点聚集系数，C2(j)指去除社区ε内部的所有边以及与其相关联的所有边之后，节点j的点聚集系数。&lt;/li&gt;
&lt;li&gt;定义点聚集系数：一个节点的不同邻接点互为邻接点的概率，公式为&lt;code&gt;C(i) = 2E(i)/(ki(ki-1))&lt;/code&gt;，这里ki是节点i的度，E(i)是与节点i邻接的节点之间的实际连边。整个网络ε的点聚集系数定义为&lt;code&gt;C(ε) = ∑C(i)/N&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;上面定义的连接相关度用来衡量某个社区ε对其邻接点的影响力大小。如果社区ε的一个邻接点x和x的邻接点间主要通过ε通信，则ε对x有重要影响，x趋向于成为ε的一员。&lt;/li&gt;
&lt;li&gt;以下是社区归纳点的几个约定&lt;ul&gt;
&lt;li&gt;如果节点x有一半以上的邻接点再ε中，则x∈ε。&lt;/li&gt;
&lt;li&gt;如果C(ε)=1，这意味着ε和它的邻接点们构成连通分量，则该ε的所有邻接点∈ε。&lt;/li&gt;
&lt;li&gt;如果该ε的一个邻接点j有C(j)=1，则j和j的邻接点都∈ε。&lt;/li&gt;
&lt;li&gt;如果ε的邻接点j有C(j) &amp;gt; C(ε)。并且ΔC(ε,j)是ε的所有邻接点中最大非负值，则j∈ε。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完整流程如下&lt;ul&gt;
&lt;li&gt;以图中某个节点作为局部社区的初始状态，不断寻找j加入社区并update，直到没有符合条件的点，结束局部社区。&lt;/li&gt;
&lt;li&gt;当所有局部社区形成后，分别计算每个社区的内度和外度，将内度小于外度的社区ε合并到与ε最紧密的社区中，直到所有社区都有内度&amp;gt;外度。&lt;/li&gt;
&lt;li&gt;算法缺点是受到代表社区的初始节点影响比较大。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;衡量网络分解：模块度&quot;&gt;&lt;a href=&quot;#衡量网络分解：模块度&quot; class=&quot;headerlink&quot; title=&quot;衡量网络分解：模块度&quot;&gt;&lt;/a&gt;衡量网络分解：模块度&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;设网络分裂为g个社区，定义gxg的矩阵e，其eij表示原网络中连接社区i和社区j中节点的边数在所有边中所占比例。e的迹表示网络中同一社区中节点的边占所有边的比例。&lt;code&gt;ai = ∑eij&lt;/code&gt;表示连接社区i的边所占比例。有&lt;code&gt;Q = Tre - ||e||^2&lt;/code&gt;，&lt;code&gt;∑(ai^2) = ∑(∑(eij·ejk)) = ||e||^2&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;参考博客和资料如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/v_july_v/article/details/40738211&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;July的博文《从拉普拉斯矩阵说到谱聚类》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/myan/article/details/1865397&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;孟岩的博文《理解矩阵（一）（二）（三）》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://engr.case.edu/ray_soumya/mlrg/Luxburg07_tutorial_spectral_clustering.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Tutorial on Spectral Clustering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://liuzhiqiangruc.iteye.com/blog/2117144&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;谱聚类的算法实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wenku.baidu.com/link?url=0la9WTtNcZNOV7A0zJmJPXx1XRK935PLZAJyKuGhK5h0vzVToyjdK9mW9eMv2tRc3o3-XFp-73aDn4YldFTpzL5cHigU6C6c9n0Kk33Z8wC&amp;amp;qq-pf-to=pcqq.group&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;复杂网络的社区发现算法研究&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.docin.com/p-886876763.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于点聚集系数和边聚集系数的社区发现算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://forec.github.io/2016/03/12/community-found/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://forec.github.io/2016/03/12/community-found/&quot;&gt;http://forec.github.io/2016/03/12/community-found/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;复杂网络是复杂系统的抽象，其中一个重要特征是网络中所呈现出的社区结构。许多网络是异构的，对于构成网络的不同类型节点所组成的子图称为网络中的社区。整理了几个传统的社区发现算法流程和大致原理，记录备忘。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://forec.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Algorithms" scheme="http://forec.github.io/tags/Algorithms/"/>
    
      <category term="图分割" scheme="http://forec.github.io/tags/%E5%9B%BE%E5%88%86%E5%89%B2/"/>
    
  </entry>
  
  <entry>
    <title>Linux各发行版及Emacs配置备忘</title>
    <link href="http://forec.github.io/2016/02/29/bugs-for-using-linux/"/>
    <id>http://forec.github.io/2016/02/29/bugs-for-using-linux/</id>
    <published>2016-02-29T11:42:03.000Z</published>
    <updated>2016-09-08T16:36:07.828Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;不定期整理在使用各类linux发行版和Emacs时的配置，以及遇到的各类问题的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Fedora&quot;&gt;&lt;a href=&quot;#Fedora&quot; class=&quot;headerlink&quot; title=&quot;Fedora&quot;&gt;&lt;/a&gt;Fedora&lt;/h1&gt;&lt;h2 id=&quot;Mysql5-1以上版本中文编码&quot;&gt;&lt;a href=&quot;#Mysql5-1以上版本中文编码&quot; class=&quot;headerlink&quot; title=&quot;Mysql5.1以上版本中文编码&quot;&gt;&lt;/a&gt;Mysql5.1以上版本中文编码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在mysql中输入&lt;code&gt;show variables like &amp;#39;character%&amp;#39;;&lt;/code&gt;查看编码配置，此时有某行为Latin1&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编辑/etc/mysql/my.cnf（或在/etc/my.cnf），为各部分增加或修改为&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[client]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default-character-set=utf8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[mysqld]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;character-set-server=utf8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;collation-server=utf8_general_ci&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;init_connect=&lt;span class=&quot;string&quot;&gt;&#39;SET NAMES utf8&#39;&lt;/span&gt;（或SET NAMES &lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[mysql]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;default-character-set=utf8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重启mysql，服务映射为mysqld，&lt;code&gt;sudo service restart mysqld&lt;/code&gt;或&lt;code&gt;sudo /etc/init.d/mysql restart&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;apache服务器配置&quot;&gt;&lt;a href=&quot;#apache服务器配置&quot; class=&quot;headerlink&quot; title=&quot;apache服务器配置&quot;&gt;&lt;/a&gt;apache服务器配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编辑~/work/program/apache-2.4.17/conf/httpd.conf&lt;/li&gt;
&lt;li&gt;将其中的&lt;code&gt;#Listen 12.34.56.78:80&lt;/code&gt;下面一行的&lt;code&gt;Listen 80&lt;/code&gt;改成监听端口，如8080&lt;/li&gt;
&lt;li&gt;向下找到User和Group两项，在终端输入groups可以看到当前用户和所属群组，修改为当前用户及群组&lt;/li&gt;
&lt;li&gt;向下找到ServerName，改为IP地址，如127.0.0.1:8080，通过其访问apache&lt;/li&gt;
&lt;li&gt;向下设置DocumentRoot，为网站所在目录，访问权限修改为Require all granted（全部允许）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;开机挂载非EXT分区&quot;&gt;&lt;a href=&quot;#开机挂载非EXT分区&quot; class=&quot;headerlink&quot; title=&quot;开机挂载非EXT分区&quot;&gt;&lt;/a&gt;开机挂载非EXT分区&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;fedora的分区配置在/dev/下&lt;/li&gt;
&lt;li&gt;在/mnt/下新建文件夹如Professional，&lt;code&gt;fdisk -l&lt;/code&gt;查看所有分区&lt;/li&gt;
&lt;li&gt;如对应分区为/dev/sdb4，则&lt;code&gt;mount /mnt/Professional /dev/sdb4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编辑/etc/fstab，在最后加入&lt;code&gt;/dev/sdb4 /mnt/Profession ntfs iocharset=utf8, umast=0 0 0&lt;/code&gt;，ntfs随分区格式改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sqlite3API编译&quot;&gt;&lt;a href=&quot;#sqlite3API编译&quot; class=&quot;headerlink&quot; title=&quot;sqlite3API编译&quot;&gt;&lt;/a&gt;sqlite3API编译&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gcc sqlite3.c test.c -lpthread -ldl&lt;/code&gt;生成a.out。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Ubuntu&quot;&gt;&lt;a href=&quot;#Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu&quot;&gt;&lt;/a&gt;Ubuntu&lt;/h1&gt;&lt;h2 id=&quot;安装Topcoder&quot;&gt;&lt;a href=&quot;#安装Topcoder&quot; class=&quot;headerlink&quot; title=&quot;安装Topcoder&quot;&gt;&lt;/a&gt;安装Topcoder&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;配置java环境，&lt;code&gt;apt-get install java&lt;/code&gt;，或者到&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index-jsp-138363.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java SE&lt;/a&gt;下载最新的jdk。&lt;/li&gt;
&lt;li&gt;点此&lt;a href=&quot;https://community.topcoder.com/tc?module=Static&amp;amp;d1=applet&amp;amp;d2=partial-support&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;下载Topcoder的客户端&lt;/a&gt;，下载ContestAppletProd.jnlp。&lt;/li&gt;
&lt;li&gt;安装javaws，并启动ContestAppletProd.jnlp。&lt;code&gt;sudo apt-get install javaws&lt;/code&gt;，&lt;code&gt;javaws ContestAppletProd.jnlp&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;制作Topcoder桌面启动器：&lt;code&gt;cd /usr/share/applications/&lt;/code&gt;，&lt;code&gt;sudo vi TopCoder.desktop&lt;/code&gt;，选取png图片作为启动器图标，保存在/path/to/TopCoder/TopCoderIcon.png，将以下内容保存，两个地址为绝对地址。&lt;/p&gt;
&lt;figure class=&quot;highlight protobuf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;　　　　[Desktop Entry]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;　　　　Version&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;　　　　Name&lt;/span&gt;=TopCoder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;　　　　Exec&lt;/span&gt;=javaws /path/to/TopCoder/ContestAppletProd.jnlp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;　　　　Terminal&lt;/span&gt;=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;　　　　Icon&lt;/span&gt;=/path/to/TopCoder/TopCoderIcon.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;　　　　Type&lt;/span&gt;=Application&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;constant&quot;&gt;　　　　Categories&lt;/span&gt;=Development&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装插件，在&lt;a href=&quot;https://community.topcoder.com/tc?module=Static&amp;amp;d1=applet&amp;amp;d2=plugins&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;下载TZTester、CodeProcessor和FileEdit。CodeProcessor对Python不支持。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;登录Arena后，选择”Options”→”Editors”，调出新窗口，点击”Add”，在”name”栏填”FileEdit”，”EntryPoint”栏填”fileedit.EntryPoint”，路径浏览选择”FileEdit.jar”所在位置，OK保存。&lt;/li&gt;
&lt;li&gt;“options”→”Editors”，调出新窗口，点击”Add”添加全部三个文件，包括 “FileEdit.jar”。此次”name”栏填”CodeProcessor”，”EntryPoint”栏填 “codeprocessor.EntryPoint”，路径栏浏览三个文件的位置。&lt;/li&gt;
&lt;li&gt;选择”CodeProcessor”作为”Default Editor”，即在前面的两个白色的括号中的第一个打勾。&lt;/li&gt;
&lt;li&gt;选定”CodeProcessor”（高亮显示），按 “Configure”。在”Editor EntryPoint”栏键入”fileedit.EntryPoint”，在 “Processor Class”栏键入 “tangentz.TZTester”，按 “Verify”，弹出窗口检查是否全部 “found”。点击后面的”configure”，选中”Write the problem description using HTML”，将”File Extension”改为”html”。在”Enter directory read/write problems to:”处填上编写程序文件的绝对路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装matlab&quot;&gt;&lt;a href=&quot;#安装matlab&quot; class=&quot;headerlink&quot; title=&quot;安装matlab&quot;&gt;&lt;/a&gt;安装matlab&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo mkdir /media/matlab/&lt;/code&gt;，&lt;code&gt;sudo mount -o loop /path/to/matlab.iso /media/matlab&lt;/code&gt;挂载iso镜像。&lt;/li&gt;
&lt;li&gt;cd到挂载的镜像中，&lt;code&gt;./install&lt;/code&gt;开始图形界面安装。使用/media/matlab/crack/下的序列号。&lt;/li&gt;
&lt;li&gt;安装完成后复制crack下的libmwservices.so到matlab安装目录下的bin/glnxa64。&lt;code&gt;sudo cp /path/to/libmwservices.so /path/to/matlab-install-place/bin/glnxa64/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;进入matlab安装目录下的bin文件夹，&lt;code&gt;./activate matlab&lt;/code&gt;对matlab激活，选中crack下的license激活。&lt;/li&gt;
&lt;li&gt;apt-get安装matlab-support，否则打开matlab闪退。matlab-support会把matlab自动加入环境变量，并生成桌面启动器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;修改环境变量&quot;&gt;&lt;a href=&quot;#修改环境变量&quot; class=&quot;headerlink&quot; title=&quot;修改环境变量&quot;&gt;&lt;/a&gt;修改环境变量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;修改系统环境变量&lt;code&gt;sudo vi /etc/environment&lt;/code&gt;，在PATH=末尾添加&lt;code&gt;:/path/to/your/dir&lt;/code&gt;，&lt;code&gt;source /etc/environment&lt;/code&gt;生效。&lt;/li&gt;
&lt;li&gt;修改当前用户环境变量&lt;code&gt;sudo vi ~/.bashrc&lt;/code&gt;，在末尾添加&lt;code&gt;export PATH=/path/to/your/dir:$PATH&lt;/code&gt;，&lt;code&gt;source ~/.bashrc&lt;/code&gt;生效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装LaTex&quot;&gt;&lt;a href=&quot;#安装LaTex&quot; class=&quot;headerlink&quot; title=&quot;安装LaTex&quot;&gt;&lt;/a&gt;安装LaTex&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install texlive-full&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install texmaker&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装中文字体支持&lt;code&gt;sudo apt-get install latex-cjk-all&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;hexo等工程需要更新nodejs&quot;&gt;&lt;a href=&quot;#hexo等工程需要更新nodejs&quot; class=&quot;headerlink&quot; title=&quot;hexo等工程需要更新nodejs&quot;&gt;&lt;/a&gt;hexo等工程需要更新nodejs&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install curl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl --silent --location https://deb.nodesource.com/setup_5.x | sudo bash -&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install nodejs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装libpcap库&quot;&gt;&lt;a href=&quot;#安装libpcap库&quot; class=&quot;headerlink&quot; title=&quot;安装libpcap库&quot;&gt;&lt;/a&gt;安装libpcap库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最新版本&lt;code&gt;http://tcpdump.org/release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解压后进入目录，&lt;code&gt;./configure&lt;/code&gt;过程可能缺少flex，之后&lt;code&gt;make&lt;/code&gt;过程可能缺少yacc（&lt;code&gt;sudo apt-get install -y byacc&lt;/code&gt;），均需安装。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make install&lt;/code&gt;后运行二进制文件会提示缺少链接库，需从&lt;code&gt;/usr/lib/x86_64-linux-gnu&lt;/code&gt;下拷贝&lt;code&gt;libpcap.so.1.x.x&lt;/code&gt;并重命名为&lt;code&gt;libpcap.so.1&lt;/code&gt;保存至&lt;code&gt;/usr/lib&lt;/code&gt;下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;为Firefox安装Adobe-Flash-Player&quot;&gt;&lt;a href=&quot;#为Firefox安装Adobe-Flash-Player&quot; class=&quot;headerlink&quot; title=&quot;为Firefox安装Adobe Flash Player&quot;&gt;&lt;/a&gt;为Firefox安装Adobe Flash Player&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从&lt;code&gt;https://get.adobe.com/cn/&lt;/code&gt;获取&lt;code&gt;.tar.gz&lt;/code&gt;格式的安装包。&lt;/li&gt;
&lt;li&gt;解压&lt;code&gt;install_flash_player_11_linux.x86_64.tar.gz&lt;/code&gt;到某目录下，得到&lt;code&gt;libflashplayer.so&lt;/code&gt;，将该文件复制到Firefox的插件目录下，通常在&lt;code&gt;/usr/lib/mozilla/plugins/&lt;/code&gt;，复制后chmod 777。&lt;/li&gt;
&lt;li&gt;将解压出来的usr目录下所有内容拷贝到系统usr目录下，&lt;code&gt;cp -r ./usr/* /usr/&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;开机挂载非EXT分区-1&quot;&gt;&lt;a href=&quot;#开机挂载非EXT分区-1&quot; class=&quot;headerlink&quot; title=&quot;开机挂载非EXT分区&quot;&gt;&lt;/a&gt;开机挂载非EXT分区&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Ubuntu 12.10后挂载的分区记录在/dev/下，分区默认挂载点在&lt;code&gt;/media/&amp;lt;username&amp;gt;/&amp;lt;device&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;/media/&amp;lt;username&amp;gt;&lt;/code&gt;下新建文件夹如Professional，&lt;code&gt;fdisk -l&lt;/code&gt;查看所有分区&lt;/li&gt;
&lt;li&gt;如对应分区为/dev/sdb4，挂载到Professional，则&lt;code&gt;mount -t fstype /dev/sdb4 /media/forec/Professional&lt;/code&gt;。挂载点可变。&lt;code&gt;-t&lt;/code&gt;指定挂载的文件系统类型，常用的有&lt;ul&gt;
&lt;li&gt;minix Linux最早使用的文件系统。&lt;/li&gt;
&lt;li&gt;ext2 Linux目前的常用文件系统。&lt;/li&gt;
&lt;li&gt;msdos MS-DOS 的 FAT。&lt;/li&gt;
&lt;li&gt;vfat Win85/98 的 VFAT。&lt;/li&gt;
&lt;li&gt;nfs 网络文件系统。&lt;/li&gt;
&lt;li&gt;iso9660 CD-ROM光盘的标准文件系统。&lt;/li&gt;
&lt;li&gt;ntfs Windows NT的文件系统。&lt;/li&gt;
&lt;li&gt;hpfs OS/2文件系统。Windows NT 3.51之前版本的文件系统。&lt;/li&gt;
&lt;li&gt;auto 自动检测文件系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可将经常使用的设备写入文件&lt;code&gt;/etc/fastab&lt;/code&gt;,以使系统在每次启动时自动加载。mount加载设备的信息记录在&lt;code&gt;/etc/mtab&lt;/code&gt;文件中。使用umount命令卸载设备时，记录将被清除。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo blkid&lt;/code&gt;查看分区UUID，编辑/etc/fstab，在文件末尾加入&lt;code&gt;UUID=********** /media/forec/Professional ntfs defaults 0 1&lt;/code&gt;，ntfs随分区格式改变&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装Google-Chrome&quot;&gt;&lt;a href=&quot;#安装Google-Chrome&quot; class=&quot;headerlink&quot; title=&quot;安装Google Chrome&quot;&gt;&lt;/a&gt;安装Google Chrome&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可从&lt;a href=&quot;https://www.google.com/intl/en/chrome/browser/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;此处&lt;/a&gt;下载Chrome，或使用wget下载，32位地址为&lt;code&gt;https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb&lt;/code&gt;，64位地址为&lt;code&gt;https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;下载完成后解包安装，&lt;code&gt;sudo dpkg -i google-chrome-stable_current_amd64.deb&lt;/code&gt;，可能出现缺少依赖项类的error。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get -f install&lt;/code&gt;，处理error并安装chrome。&lt;/li&gt;
&lt;li&gt;从终端输入&lt;code&gt;google-chrome link_you_want&lt;/code&gt;可从chrome访问网址，或从启动器启动。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Emacs&quot;&gt;&lt;a href=&quot;#Emacs&quot; class=&quot;headerlink&quot; title=&quot;Emacs&quot;&gt;&lt;/a&gt;Emacs&lt;/h1&gt;&lt;h2 id=&quot;Golang的代码跳转和补全&quot;&gt;&lt;a href=&quot;#Golang的代码跳转和补全&quot; class=&quot;headerlink&quot; title=&quot;Golang的代码跳转和补全&quot;&gt;&lt;/a&gt;Golang的代码跳转和补全&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在emacs24中安装&lt;a href=&quot;https://github.com/dominikh/go-mode.el&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;go-mode&lt;/a&gt;，可通过&lt;a href=&quot;http://ergoemacs.org/emacs/emacs_package_system.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ELPA&lt;/a&gt;或根据链接中的介绍手动安装。&lt;/li&gt;
&lt;li&gt;在emacs24中安装auto-complete插件。&lt;/li&gt;
&lt;li&gt;设置环境变量GOPATH和GOBIN，GOBIN可设为&lt;code&gt;/usr/local/bin&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;安装godef，&lt;code&gt;go get github.com/rogpeppe/godef&lt;/code&gt;，&lt;code&gt;sudo go install github.com/rogpeppe/godef&lt;/code&gt;，godef也可从&lt;a href=&quot;http://code.google.com/p/rog-go/exp/cmd/godef&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;此处&lt;/a&gt;获取。代码释义为&lt;code&gt;M-x godef-describe&lt;/code&gt;或&lt;code&gt;C-c C-d&lt;/code&gt;，代码跳转为&lt;code&gt;M-x godef-jump&lt;/code&gt;或&lt;code&gt;C-c C-j&lt;/code&gt;，代码返回为&lt;code&gt;M-*&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;安装gocode，&lt;code&gt;go get github.com/nsf/gocode&lt;/code&gt;，&lt;code&gt;sudo go install github.com/nsf/gocode&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;修改&lt;code&gt;.emacs&lt;/code&gt;，增加&lt;code&gt;load-path&lt;/code&gt;：&lt;code&gt;(add-to-list &amp;#39;load-path &amp;quot;~/.emacs.d/path/to/load-path&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将文件&lt;code&gt;$GOPATH/github.com/nsf/gocode/emacs/go-autocomplete.el&lt;/code&gt;拷贝到$load-path目录下&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;.emacs&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;quoted&quot;&gt;&#39;go-autocomplete&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;quoted&quot;&gt;&#39;auto-complete-config&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;ac-config-default&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;.emacs&lt;/code&gt;，使保存文件时gofmt：&lt;code&gt;(add-hook &amp;#39;before-save-hook #&amp;#39;gofmt-before-save)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;颜色关键词高亮与背景色&quot;&gt;&lt;a href=&quot;#颜色关键词高亮与背景色&quot; class=&quot;headerlink&quot; title=&quot;颜色关键词高亮与背景色&quot;&gt;&lt;/a&gt;颜色关键词高亮与背景色&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装rainbow-mode，可从&lt;a href=&quot;http://git.savannah.gnu.org/cgit/emacs/elpa.git/tree/packages/rainbow-mode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;此处&lt;/a&gt;下载，或在melpa stable下载。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;.emacs&lt;/code&gt;中增加hook使默认激活该模式，或启动后M-x rainbow-mode激活。&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;&#39;load-path&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;~/.emacs.d/path-to-rainbow-mode/&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;&#39;rainbow-mode&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;&#39;prog-mode-hook&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;&#39;rainbow-mode&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Markdown-mode&quot;&gt;&lt;a href=&quot;#Markdown-mode&quot; class=&quot;headerlink&quot; title=&quot;Markdown-mode&quot;&gt;&lt;/a&gt;Markdown-mode&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;参考 &lt;a href=&quot;http://jblevins.org/projects/markdown-mode/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Emacs Markdown Mode&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;设置后缀关联&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;quoted&quot;&gt;&#39;markdown-mode&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;markdown-mode&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;Major mode for editing Markdown files&quot;&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;t&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;quoted&quot;&gt;&#39;auto-mode-alist&lt;/span&gt; &lt;span class=&quot;quoted&quot;&gt;&#39;(&lt;span class=&quot;string&quot;&gt;&quot;\\.markdown\\&#39;&quot;&lt;/span&gt; . markdown-mode)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;quoted&quot;&gt;&#39;auto-mode-alist&lt;/span&gt; &lt;span class=&quot;quoted&quot;&gt;&#39;(&lt;span class=&quot;string&quot;&gt;&quot;\\.md\\&#39;&quot;&lt;/span&gt; . markdown-mode)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;quoted&quot;&gt;&#39;gfm-mode&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;gfm-mode&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;Major mode for editing GitHub Flavored Markdown files&quot;&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;t&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;quoted&quot;&gt;&#39;auto-mode-alist&lt;/span&gt; &lt;span class=&quot;quoted&quot;&gt;&#39;(&lt;span class=&quot;string&quot;&gt;&quot;README\\.md\\&#39;&quot;&lt;/span&gt; . gfm-mode)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://forec.github.io/2016/02/29/bugs-for-using-linux/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://forec.github.io/2016/02/29/bugs-for-using-linux/&quot;&gt;http://forec.github.io/2016/02/29/bugs-for-using-linux/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不定期整理在使用各类linux发行版和Emacs时的配置，以及遇到的各类问题的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="OS" scheme="http://forec.github.io/categories/OS/"/>
    
    
      <category term="Emacs" scheme="http://forec.github.io/tags/Emacs/"/>
    
      <category term="OS" scheme="http://forec.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>《机器学习实战》总结</title>
    <link href="http://forec.github.io/2016/02/27/marhinelearningsummary/"/>
    <id>http://forec.github.io/2016/02/27/marhinelearningsummary/</id>
    <published>2016-02-27T06:49:09.000Z</published>
    <updated>2016-02-27T11:38:09.073Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;书中的很多算法解决了此前的一些疑惑，让我一些拙劣的思维方式得到了一些提升，也让许多问题成为可能。从数据中挖掘重要特征是一件很有意义的事，这个过程让我更能理解数学的重要性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;概念总结&quot;&gt;&lt;a href=&quot;#概念总结&quot; class=&quot;headerlink&quot; title=&quot;概念总结&quot;&gt;&lt;/a&gt;概念总结&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;分类和回归属于监督学习，分类主要用于预测标称型数据，回归主要用于预测数值型数据。监督学习指算法知道预测什么，对应的无监督学习处理的数据没有类别信息，也不会给定目标值，将数据集合分成由类似的对象组成的多个类的过程称为聚类。&lt;/li&gt;
&lt;li&gt;处理数据之前需要理解数据特征：特征值是离散型变量还是连续性变量，特征值中是否存在缺失的值，何种原因造成缺失值，数据中是否存在异常值，某个特征发生的频率如何等。&lt;/li&gt;
&lt;li&gt;开发过程：收集数据，准备输入数据，分析输入数据，训练算法（无监督学习不需要）。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/04/machinelearning1-4/&quot;&gt;kNN近邻算法&lt;/a&gt;：精度高、对异常值不敏感、无数据输入假定，但计算复杂度高、空间复杂度高，可应用在数值型和标称型。该算法通过计算目标数据到训练数据的距离，根据距离排序，选择排名靠前的几个训练数据类型，投票决定预测类型。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/04/machinelearning1-4/&quot;&gt;决策树&lt;/a&gt;：计算复杂度不高、输出结果容易理解、对中间值缺失不敏感、可处理不相关特征，但可能会产生过度匹配问题，适用于数值型和标称型。该算法每次选择一个特征进行划分，依照该特征划分可以获得最大的信息增益，划分后将该特征移除，一直到所有训练数据均已分类成功或所有特征均已经使用。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/04/machinelearning1-4/&quot;&gt;朴素贝叶斯&lt;/a&gt;：在数据较少的情况下依然有效、可以处理多类别问题，但对于输入数据的准备方式较为敏感，适用于标称型数据。该算法通过对目标数据计算概率，选择使概率最大的分类。算法需要一个先验输入，例如邮件分类系统中，需要对此前收到的邮件进行统计，计算垃圾邮件占比。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/09/machinelearning5/&quot;&gt;Logistic回归&lt;/a&gt;：计算代价不高，易于理解和实现，但容易欠拟合，分类精度可能不高，适用于数值型和标称型。该算法使用海维塞德阶跃函数进行二值分类，训练算法的过程就是在寻找回归系数，分类时用回归系数和输入向量的点乘计算阶跃函数的参数。寻找回归系数的过程可以使用梯度上升法，选择移动量最大的方向来迭代更新系数。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/11/machinelearning6/&quot;&gt;支持向量机&lt;/a&gt;：泛化错误率低、计算开销不大、结果易解释，但对参数调节和核函数的选择敏感，院士分类器不加修改仅适用于处理二类问题。适用于数值型和标称型数据。其中一种实现是通过序列最小优化（SMO）算法，可以通过核函数将SVM拓展到无法线性划分的数据集。SVM的过程主要是寻找最佳分类间隔，这是一个线性平面，其最小间隔最大。核函数可以把低维空间数据映射到无穷维度，因此在当前空间无法线性划分的数据在无穷维度可以线性划分。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/14/machinelearning7/&quot;&gt;AdaBoost元算法&lt;/a&gt;：元算法是对其他算法进行组合的一种方式，其泛化错误率低，易编码、可以应用在大部分分类器上，对离群点敏感。适用于数值型和标称型数据。该算法使用多个弱分类器如单层决策树（某个特征基于阈值分类），每个弱分类器的权值不同，这个权值随着迭代次数增加不断更新。同时，每个样本也具有权重，如果某个样本被错误分类，则下次该样本的权重增加。最终对每个弱分类器的分类结果加权作为最终分类结果。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/18/machinelearning8/&quot;&gt;回归&lt;/a&gt;：回归结果易于理解、计算不复杂，但对非线性的数据拟合不好。适用于数值型和标称型。标准线性回归可以直接用矩阵计算，局部加权线性回归减少欠拟合现象，为数据点附近的其他数据点赋予不同权重。当数据的矩阵非奇异时，可以使用岭回归或者与lasso类似的前向逐步回归来约束回归系数。回归中的偏差指回归结果和真实结果的误差，而方差则指多次回归后不同回归系数之间的差异。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/20/machinelearning9/&quot;&gt;树回归&lt;/a&gt;：可以对复杂和非线性的数据建模，但结果不易理解。适用于数值型和标称型数据。回归树的叶节点包含单个值，而模型树的叶节点包含一个线性方程。剪枝可以降低决策树的复杂度，包含预剪枝和后剪枝。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/21/machinelearning10/&quot;&gt;K-均值聚类&lt;/a&gt;：无监督学习，可以随即初始化k个簇，或者采用二分K-均值聚类算法，从一个簇开始划分。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/22/machinelearning11/&quot;&gt;Apriori算法&lt;/a&gt;:算法基于Apriori原则，如果某个项集不频繁，则其超集必然不频繁。可以从频繁相集中挖掘关联规则，如果某条规则不满足最小可信度要求，那么该规则的所有子集也不满足最小可信度要求。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/24/machinelearning12/&quot;&gt;FP-growth算法&lt;/a&gt;：算法速度快，只需要扫描整个数据集两次，但实现比较困难，在某些数据集上效率可能下降。适用于标称型数据。FP树的构造有些类似字典树，但增加了一个headerTable用于存储每个元素在树中首次出现的位置，并且为每个节点增加了parent域，从而可以从叶节点向上追溯，创建条件树，发现频繁项集。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/25/machinelearning13/&quot;&gt;PCA&lt;/a&gt;：PCA可以降低数据的复杂性，识别最重要的多个特征。但该步骤不一定重要，有可能损失有用信息。适用于数值型数据。另外几种降维技术有FA和ICA。算法通过协方差矩阵来计算主成分，并作为主要坐标轴，并继续计算次成分。当前几个成分覆盖了大部分方差时，可以认为后面的特征都是噪声。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/26/machinelearning14/&quot;&gt;SVD&lt;/a&gt;：SVD是一种矩阵分解技术，将矩阵&lt;code&gt;Data&lt;/code&gt;分解成&lt;code&gt;U&lt;/code&gt;、&lt;code&gt;∑&lt;/code&gt;和&lt;code&gt;V^T&lt;/code&gt;三个矩阵，其中∑矩阵为对角矩阵，并且从左到右数据逐渐减小，在r个数据后认为0。可以用这r个数据重构原矩阵的近似矩阵，计算方法为&lt;code&gt;U[:r]*∑[:r]*VT[r:]&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://forec.github.io/2016/02/27/machinelearning15/&quot;&gt;MapReduce框架&lt;/a&gt;：当数据运算需求超过当前资源的运算能力，可以考虑借助MapReduce框架并行计算，利用网络服务提供的租赁资源。大部分情况下并不需要MapReduce。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;资源&quot;&gt;&lt;a href=&quot;#资源&quot; class=&quot;headerlink&quot; title=&quot;资源&quot;&gt;&lt;/a&gt;资源&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://archive.ics.uci.edu/ml/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;美国加州大学欧文分校的机器学习数据资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://aws.amazon.com/publicdatasets/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Amazon公众大数据库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.data.gov&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Data.gov的政府数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.data.gov/opendatasites&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Data.gov的美国国家网站超链接列表&lt;/a&gt;，这些网站提供开放性数据&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.infochimps.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Infochimps的开放数据集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://metaoptimize.com/qa/questions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;机器学习问答论坛&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： 《机器学习实战 - 美Peter Harrington》&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://forec.github.io/2016/02/27/machinelearningsummary/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://forec.github.io/2016/02/27/machinelearningsummary/&quot;&gt;http://forec.github.io/2016/02/27/machinelearningsummary/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;书中的很多算法解决了此前的一些疑惑，让我一些拙劣的思维方式得到了一些提升，也让许多问题成为可能。从数据中挖掘重要特征是一件很有意义的事，这个过程让我更能理解数学的重要性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://forec.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="机器学习" scheme="http://forec.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习笔记（Chapter 15 - MapReduce框架）</title>
    <link href="http://forec.github.io/2016/02/27/machinelearning15/"/>
    <id>http://forec.github.io/2016/02/27/machinelearning15/</id>
    <published>2016-02-27T06:32:18.000Z</published>
    <updated>2016-03-18T16:28:11.456Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;MapReduce是一个分布式计算框架，可以将单个计算作业分配给多台计算机执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;MapReduce工作流程&quot;&gt;&lt;a href=&quot;#MapReduce工作流程&quot; class=&quot;headerlink&quot; title=&quot;MapReduce工作流程&quot;&gt;&lt;/a&gt;MapReduce工作流程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;MapReduce框架的优点是可以短时间内完成大量工作，缺点是算法必须经过重写，需要对系统工程有一定理解。适用于数值型和标称型数据。&lt;/li&gt;
&lt;li&gt;MapReduce工作流程是：单个作业被分成很多小份，输入数据被切片分发到每个节点，各个节点只在本地数据上做运算，对应的运算代码称为mapper，该过程称为map阶段。每个mapper的输出通过某种方式组合（一般还会做排序），排序后的结果再被分成小份分发给各个节点进行下一步处理。第二步处理阶段称为reduce，对应运行代码称为reducer。reducer的输出为程序最终执行结果。&lt;/li&gt;
&lt;li&gt;在任何时候，每个mapper或reducer之间都不进行通信。每个节点值处理自己的事务，且在本地分配的数据集上计算。&lt;/li&gt;
&lt;li&gt;主节点控制MapReduce的作业流程，数据被重复存放在不同的机器上防止某个机器失效。mapper和reducer传输的数据形式为key/value对。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;MapReduce上的机器学习&quot;&gt;&lt;a href=&quot;#MapReduce上的机器学习&quot; class=&quot;headerlink&quot; title=&quot;MapReduce上的机器学习&quot;&gt;&lt;/a&gt;MapReduce上的机器学习&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;简单贝叶斯：直接使用reducer将各个mapper的结果相加&lt;/li&gt;
&lt;li&gt;k-近邻算法：构建树存储数据，利用树形结构缩小搜索范围，该方法在特征数小于10的情况下效果很好。高维数据下（文本、图像、视频）的近邻查找方法是局部敏感哈希算法。&lt;/li&gt;
&lt;li&gt;支持向量机：SMO算法构造的SVM无法在MapReduce框架实现，但Pegasos算法构造的SVM和“最邻近支持向量机”更快并且易于在MapReduce框架下实现。&lt;/li&gt;
&lt;li&gt;奇异值分解：Lanczos算法是一个有效的求近似特征值的算法，可以应用在MapReduce上从而有效找到大数据的奇异值。该算法还可以应用于PCA。&lt;/li&gt;
&lt;li&gt;K-均值聚类：canopy聚类是一个流行的分布式聚类方法，可以先调用canopy聚类法取得最初的k个簇，再运行K-均值聚类算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;在Python中使用mrjob自动化MapReduce&quot;&gt;&lt;a href=&quot;#在Python中使用mrjob自动化MapReduce&quot; class=&quot;headerlink&quot; title=&quot;在Python中使用mrjob自动化MapReduce&quot;&gt;&lt;/a&gt;在Python中使用mrjob自动化MapReduce&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://packages.python.org/mrjob/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mrjob&lt;/a&gt;之前是Yelp的内部框架，2010年底开源。可以用于在Amazon网络服务上启动MapReduce&lt;br&gt;作业。可以通过pip安装，也可以clone &lt;a href=&quot;https://github.com/Yelp/mrjob&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub上的源码&lt;/a&gt;来安装。在AWS上使用mrjob之前需要设置&lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt;和&lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt;两个环境变量。&lt;/li&gt;
&lt;li&gt;使用mrjob可以在EMR上运行Hadoop流，也可以在单机上测试。单机测试的命令为&lt;code&gt;% python mrMean.py &amp;lt; inputFile.txt &amp;gt; myOut.txt&lt;/code&gt;，在EMR上运行同样任务的命令为&lt;code&gt;% python mrMean.py -r emr &amp;lt; inputFile.txt &amp;gt; myOut.txt&lt;/code&gt;。所有上传和表单填写由mrjob自动完成。&lt;/li&gt;
&lt;li&gt;添加下面代码到mrMean.py，创建一个新的MRJob继承类，代码中的mapper和reducer都是该类的方法。steps方法定义了执行的步骤，在该方法中需要为mrjob制定mapper和reducer的名称，未指出则默认调用mapper和reducer。将原来代码中的&lt;code&gt;mr&lt;/code&gt;方法修改为&lt;code&gt;mrjob.step.MRStep&lt;/code&gt;。&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from mrjob.job import MRJob&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import mrjob&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class MRmean(MRJob):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def __init__(self, *args, **kwargs):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(MRmean, self).__init__(*args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.inCount = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.inSum = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.inSqSum = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def map(self, key, val):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if False:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            yield&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inVal = float(val)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.inCount += 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.inSum += inVal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.inSqSum += inVal*inVal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def map_final(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mn = self.inSum/self.inCount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mnSq = self.inSqSum/self.inCount&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        yield(1, [self.inCount, mn, mnSq])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def reduce(self, key, packedValues):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        cumVal = 0.0; cumSumSq = 0.0; cumN = 0.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for valArr in packedValues:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            nj = float(valArr[0])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cumN += nj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cumVal += nj*float(valArr[1])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cumSumSq += nj*float(valArr[2])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mean = cumVal/cumN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var = (cumSumSq - 2*mean*cumVal + cumN*mean*mean)/cumN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        yield(mean, var)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    def steps(self):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return ([mrjob.step.MRStep(mapper=self.map, reducer=self.reduce,\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            mapper_final=self.map_final)])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if __name__ == &#39;__main__&#39;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MRmean.run()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ python mrMean.py --mapper &amp;lt; inputFile.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1       [100, 0.5095697, 0.34443931307936]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ python mrMean.py &amp;lt; inputFile.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reading from STDIN&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;writing to %\mrMean.Forec.20160227.045814.965000\step-0-mapper_part-00000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Counters from step 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (no counters found)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;writing to %\mrMean.Forec.20160227.045814.965000\step-0-mapper-sorted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; sort &#39;%\mrMean.Forec.20160227.045814.965000\step-0-mapper_part-00000&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;writing to %\mrMean.Forec.20160227.045814.965000\step-0-reducer_part-00000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Counters from step 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (no counters found)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Moving %\mrMean.Forec.20160227.045814.965000\step-0-reducer_part-00000\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; -&amp;gt; %\mrMean.Forec.20160227.045814.965000\output\part-00000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Streaming final output from %\mrMean.Forec.20160227.045814.965000\output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0.5095697       0.08477803392126998&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;removing tmp directory %\mrMean.Forec.20160227.045814.965000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;分布式SVM的Pegasos算法&quot;&gt;&lt;a href=&quot;#分布式SVM的Pegasos算法&quot; class=&quot;headerlink&quot; title=&quot;分布式SVM的Pegasos算法&quot;&gt;&lt;/a&gt;分布式SVM的Pegasos算法&lt;/h1&gt;&lt;h2 id=&quot;Pegasos算法&quot;&gt;&lt;a href=&quot;#Pegasos算法&quot; class=&quot;headerlink&quot; title=&quot;Pegasos算法&quot;&gt;&lt;/a&gt;Pegasos算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;SMO算法的一个替代品是Pegasos算法，后者可以很容易写成MapReduce形式。Pegasos是指原始估计梯度求解器（Primal Estimated sub-GrAdient Solver）。该算法使用某种形式的随机梯度下降方法来解决SVM所定义的优化问题，该算法所需的迭代次数取决于用户所期望的精确度而不是数据集的大小。其工作流程是：从训练集中随机挑选一些样本点添加到待处理列表中，之后按序判断每个样本点是否能被分类正确；如果是则忽略，否则将其加入待更新集合。批处理完毕后，权重向量按照这些错分的样本进行更新。伪代码为：&lt;ul&gt;
&lt;li&gt;将W初始化为0&lt;/li&gt;
&lt;li&gt;对每次批处理&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;随机选择k个样本点（向量）&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;对每个向量&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;如果该向量被错分&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;更新权重向量W&lt;/li&gt;
&lt;li&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;累加对W的更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码为Pegasos算法的串行版本，输入值T和k分别设定了迭代次数和待处理列表的大小。在T次迭代过程中，每次需要重新计算eta。&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;predict&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(w, x)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; w*x.T&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;batchPegasos&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(dataSet, labels, lam, T, k)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; random&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    m, n = shape(dataSet); w = zeros(n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dataIndex = range(m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; t &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, T+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wDelta = mat(zeros(n))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        eta = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;/(lam*t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        random.shuffle(dataIndex)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(k):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i = dataIndex[j]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            p = predict(w, dataSet[i,:])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; labels[i]*p &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                wDelta += labels[i]*dataSet[i,:].A&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        w = (&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/t)*w + (eta/k)*wDelta&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; w&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;mrjob实现MapReduce版本的SVM&quot;&gt;&lt;a href=&quot;#mrjob实现MapReduce版本的SVM&quot; class=&quot;headerlink&quot; title=&quot;mrjob实现MapReduce版本的SVM&quot;&gt;&lt;/a&gt;mrjob实现MapReduce版本的SVM&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Pegasos算法有大量的内积计算，内积计算可以并行。&lt;code&gt;Cinfigure_options&lt;/code&gt;方法建立了一些变量，包括迭代次数T，待处理列表大小k。steps方法告诉mrjob应该做什么，按照什么顺序做。其创建了一个python列表，包含&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;map_fin&lt;/code&gt;和&lt;code&gt;reduce&lt;/code&gt;几个步骤，最后将该列表乘以迭代次数，即在每次迭代中重复调用这个列表。mapper需要能够正确读取reducer输出的数据，对输入和输出格式作如下规定：Mapper输入为&lt;code&gt;&amp;lt;mapperNum, valueList&amp;gt;&lt;/code&gt;，无输出；&lt;code&gt;Mapper_final&lt;/code&gt;无输入，输出为&lt;code&gt;&amp;lt;l, valueList&amp;gt;&lt;/code&gt;；Reducer的输入输出均为&lt;code&gt;&amp;lt;mapperNum, valueList&amp;gt;&lt;/code&gt;。传入的值是列表数组，valueList第一个元素是一个字符串，表示列表后面存放的数据类型，每个&lt;code&gt;Mapper_final&lt;/code&gt;都将输出同样的key以保证所有的key/value都输出给同一个reducer。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; mrjob.job &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; MRJob&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; mrjob&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pickle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MRsvm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(MRJob)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DEFAULT_INPUT_PROTOCOL = &lt;span class=&quot;string&quot;&gt;&#39;json_value&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, *args, **kwargs)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(MRsvm, self).__init__(*args, **kwargs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.data = pickle.load(open(&lt;span class=&quot;string&quot;&gt;&#39;%\\svmDat27&#39;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.w = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.eta = &lt;span class=&quot;number&quot;&gt;0.69&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.dataList = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.k = self.options.batchsize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.numMappers = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.t = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, mapperId, inVals)&lt;/span&gt;:&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#needs exactly 2 arguments&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#input: nodeId, (&#39;w&#39;, w-vector) OR nodeId, (&#39;x&#39;, int)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;False&lt;/span&gt;: &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; inVals[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;:                  &lt;span class=&quot;comment&quot;&gt;#accumulate W-vector&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.w = inVals[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; inVals[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            self.dataList.append(inVals[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;span class=&quot;comment&quot;&gt;#accumulate data points to calc&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; inVals[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;string&quot;&gt;&#39;t&#39;&lt;/span&gt;: self.t = inVals[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;: self.eta=inVals &lt;span class=&quot;comment&quot;&gt;#this is for debug, eta not used in map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map_fin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        labels = self.data[:,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; X=self.data[:,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;span class=&quot;comment&quot;&gt;#reshape data into X and Y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self.w == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;: self.w = [&lt;span class=&quot;number&quot;&gt;0.001&lt;/span&gt;]*shape(X)[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;#init w on first iteration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; self.dataList:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            p = mat(self.w)*X[index,:].T &lt;span class=&quot;comment&quot;&gt;#calc p=w*dataSet[key].T &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; labels[index]*p &amp;lt; &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;u&#39;&lt;/span&gt;, index])&lt;span class=&quot;comment&quot;&gt;#make sure everything has the same key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;, self.w])       &lt;span class=&quot;comment&quot;&gt;#so it ends up at the same reducer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;t&#39;&lt;/span&gt;, self.t])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, _, packedVals)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; valArr &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; packedVals: &lt;span class=&quot;comment&quot;&gt;#get values from streamed inputs&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; valArr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;string&quot;&gt;&#39;u&#39;&lt;/span&gt;:  self.dataList.append(valArr[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; valArr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;: self.w = valArr[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; valArr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]==&lt;span class=&quot;string&quot;&gt;&#39;t&#39;&lt;/span&gt;:  self.t = valArr[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        labels = self.data[:,-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]; X=self.data[:,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wMat = mat(self.w);   wDelta = mat(zeros(len(self.w)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; index &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; self.dataList:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            wDelta += float(labels[index])*X[index,:] &lt;span class=&quot;comment&quot;&gt;#wDelta += label*dataSet&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        eta = &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;/(&lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;*self.t)       &lt;span class=&quot;comment&quot;&gt;#calc new: eta&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#calc new: w = (1.0 - 1/t)*w + (eta/k)*wDelta&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wMat = (&lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;/self.t)*wMat + (eta/self.k)*wDelta&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; mapperNum &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,self.numMappers+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; (mapperNum, [&lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;, wMat.tolist()[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] ]) &lt;span class=&quot;comment&quot;&gt;#emit w&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self.t &amp;lt; self.options.iterations:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; (mapperNum, [&lt;span class=&quot;string&quot;&gt;&#39;t&#39;&lt;/span&gt;, self.t+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;span class=&quot;comment&quot;&gt;#increment T&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(self.k/self.numMappers):&lt;span class=&quot;comment&quot;&gt;#emit random ints for mappers iid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; (mapperNum, [&lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;, random.randint(shape(self.data)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) ])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;configure_options&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        super(MRsvm, self).configure_options()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.add_passthrough_option(&lt;span class=&quot;string&quot;&gt;&#39;--iterations&#39;&lt;/span&gt;, dest=&lt;span class=&quot;string&quot;&gt;&#39;iterations&#39;&lt;/span&gt;, default=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            type = &lt;span class=&quot;string&quot;&gt;&#39;int&#39;&lt;/span&gt;, help=&lt;span class=&quot;string&quot;&gt;&#39;T: number of iterations to run&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        self.add_passthrough_option(&lt;span class=&quot;string&quot;&gt;&#39;--batchsize&#39;&lt;/span&gt;, dest=&lt;span class=&quot;string&quot;&gt;&#39;batchsize&#39;&lt;/span&gt;, default=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            type=&lt;span class=&quot;string&quot;&gt;&#39;int&#39;&lt;/span&gt;, help=&lt;span class=&quot;string&quot;&gt;&#39;k: number of data points in a batch&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ([mrjob.step.MRStep(mapper=self.map, mapper_final=self.map_fin, \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            reducer=self.reduce)]*self.options.iterations)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MRsvm.run()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大多数情况下并不需要使用MapReduce框架，如果作业花费了太多时间，首先应思考能否用更高效的语言编写，或者是否可以优化。寻找影响处理速度的瓶颈才能根本解决效率底下的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;MapReduce总结&quot;&gt;&lt;a href=&quot;#MapReduce总结&quot; class=&quot;headerlink&quot; title=&quot;MapReduce总结&quot;&gt;&lt;/a&gt;MapReduce总结&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;当运算需求超出了当前资源的运算能力，可以考虑购买更好的机器，或者租用网络服务并使用MapReduce框架并行执行。很多机器学习算法都可以容易地写成MapReduce作业，而某些需要经过重写。大部分情况下，MapReduce并不需要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： 《机器学习实战 - 美Peter Harrington》&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://forec.github.io/2016/02/27/machinelearning15/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://forec.github.io/2016/02/27/machinelearning15/&quot;&gt;http://forec.github.io/2016/02/27/machinelearning15/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MapReduce是一个分布式计算框架，可以将单个计算作业分配给多台计算机执行。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://forec.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Algorithms" scheme="http://forec.github.io/tags/Algorithms/"/>
    
      <category term="机器学习" scheme="http://forec.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
