<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Forec&#39;s Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://forec.github.io/"/>
  <updated>2017-03-01T15:45:29.000Z</updated>
  <id>http://forec.github.io/</id>
  
  <author>
    <name>Forec</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>来看几种基本 Monad</title>
    <link href="http://forec.github.io/2017/03/01/talk-about-some-simple-monads/"/>
    <id>http://forec.github.io/2017/03/01/talk-about-some-simple-monads/</id>
    <published>2017-03-01T13:52:16.000Z</published>
    <updated>2017-03-01T15:45:29.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;@Fallenwood 选修的 《Foundations of Programming Languages》 课程让我看的很手痒。整理一下基本的 Typeclass 和 Monad，准备跟随贵科步伐重新学习 Haskell。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;只做整理不做总结，绝不写任何有关自己对 Monad 的理解。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;基本-Typeclass&quot;&gt;&lt;a href=&quot;#基本-Typeclass&quot; class=&quot;headerlink&quot; title=&quot;基本 Typeclass&quot;&gt;&lt;/a&gt;基本 Typeclass&lt;/h2&gt;&lt;h3 id=&quot;Functor&quot;&gt;&lt;a href=&quot;#Functor&quot; class=&quot;headerlink&quot; title=&quot;Functor&quot;&gt;&lt;/a&gt;Functor&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Functor&lt;/code&gt; （&lt;code&gt;Data.Functor&lt;/code&gt;）类型类表明型别可以被 &lt;code&gt;map&lt;/code&gt; ，类型类声明为：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt; f &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fmap :: (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Functor&lt;/code&gt; 类型类定义中 &lt;code&gt;f&lt;/code&gt; 的 kind 是 &lt;code&gt;* -&amp;gt; *&lt;/code&gt;；&lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; 是 &lt;code&gt;fmap&lt;/code&gt; 的语法糖。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Functor&lt;/code&gt; 类型类需要遵守以下守则：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fmap id = id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fmap (f . g) = fmap f . fmap g&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Applicative&quot;&gt;&lt;a href=&quot;#Applicative&quot; class=&quot;headerlink&quot; title=&quot;Applicative&quot;&gt;&lt;/a&gt;Applicative&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Applicative&lt;/code&gt; （&lt;code&gt;Control.Applicative&lt;/code&gt;）算是 &lt;code&gt;Functor&lt;/code&gt; 的加强版，将一个 “包装” 在某个抽象型别中的函数应用到对应型别的值中，类型类声明为：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Functor&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;Applicative&lt;/span&gt; f &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  pure :: a -&amp;gt; f a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&amp;lt;*&amp;gt;) :: f (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&amp;lt;*) :: f a -&amp;gt; f b -&amp;gt; f a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (*&amp;gt;) :: f a -&amp;gt; f b -&amp;gt; f b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Applicative&lt;/code&gt; 类型类中定义的型别 &lt;code&gt;f&lt;/code&gt; 必须也是 &lt;code&gt;Functor&lt;/code&gt; 类型类的实例。&lt;code&gt;pure&lt;/code&gt; 函数将值包装到 &lt;code&gt;Applicative Functor&lt;/code&gt; 中。&lt;code&gt;&amp;lt;*&lt;/code&gt; 和 &lt;code&gt;*&amp;gt;&lt;/code&gt; 函数均有默认实现。&lt;/li&gt;
&lt;li&gt;对于一个纯粹的函数 &lt;code&gt;func :: a -&amp;gt; b&lt;/code&gt;，可以通过 &lt;code&gt;fmap&lt;/code&gt; 将其作用到一个 &lt;code&gt;Functor&lt;/code&gt; 类型类上，也可以通过 &lt;code&gt;pure&lt;/code&gt; 将 &lt;code&gt;func&lt;/code&gt; 提升到 &lt;code&gt;Applicative Functor&lt;/code&gt; 中，再利用 &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; 将其运用到该类型类包装的值上。例如，&lt;code&gt;pure (+) &amp;lt;*&amp;gt; (Just 2) &amp;lt;*&amp;gt; (Just 3)&lt;/code&gt; 的结果是 &lt;code&gt;Just 5&lt;/code&gt;。可以利用 &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; 这一语法糖简化为 &lt;code&gt;(+) &amp;lt;$&amp;gt; (Just 2) &amp;lt;*&amp;gt; (Just 3)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Applicative&lt;/code&gt; 类型类需要遵守如下守则（必然也满足 &lt;code&gt;Functor Laws&lt;/code&gt;）：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pure f &amp;lt;*&amp;gt; x = fmap f x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pure id &amp;lt;*&amp;gt; x = x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pure (.) &amp;lt;*&amp;gt; u &amp;lt;*&amp;gt; v &amp;lt;*&amp;gt; w = u &amp;lt;*&amp;gt; (v &amp;lt;*&amp;gt; w)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pure f &amp;lt;*&amp;gt; pure x = pure (f x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u &amp;lt;*&amp;gt; pure y = pure ($ y) &amp;lt;*&amp;gt; u&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Monoid&quot;&gt;&lt;a href=&quot;#Monoid&quot; class=&quot;headerlink&quot; title=&quot;Monoid&quot;&gt;&lt;/a&gt;Monoid&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Monoid&lt;/code&gt; （&lt;code&gt;Data.Monoid&lt;/code&gt;）类型类的定义如下，它对应实例的型别 &lt;code&gt;m&lt;/code&gt; 的 kind 是 &lt;code&gt;*&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Monoid&lt;/span&gt; m &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mempty :: m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mappend :: m -&amp;gt; m -&amp;gt; m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mconcat :: [m] -&amp;gt; m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mconcat = foldr mappend mempty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Monoid&lt;/code&gt; 指群论中的半群，其需满足封闭性和右结合律。&lt;code&gt;Monoid&lt;/code&gt; 的名字看起来像是 &lt;code&gt;mono&lt;/code&gt; 和 &lt;code&gt;id&lt;/code&gt; 的组合，即 “单幺元”。这里的 &lt;code&gt;mempty&lt;/code&gt; 和下面 &lt;code&gt;MonadPlus&lt;/code&gt; 中的 &lt;code&gt;mzero&lt;/code&gt; 均为幺元。&lt;/li&gt;
&lt;li&gt;几种常见的 &lt;code&gt;Monoid&lt;/code&gt; 如： &lt;code&gt;List&lt;/code&gt;、&lt;code&gt;Any&lt;/code&gt;、&lt;code&gt;All&lt;/code&gt;、&lt;code&gt;Sum&lt;/code&gt;、&lt;code&gt;Product&lt;/code&gt;、&lt;code&gt;Ordering&lt;/code&gt;、&lt;code&gt;Maybe&lt;/code&gt; 等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monoid&lt;/code&gt; 需要遵守如下守则：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mappend mempty x = x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mappend x mempty = x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mappend (mappend x y) z = mappend x (mappend y z)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monoid&lt;/code&gt; 也应用在 &lt;code&gt;Foldable&lt;/code&gt; 类型类的 &lt;code&gt;foldMap&lt;/code&gt; 函数中。&lt;code&gt;foldMap&lt;/code&gt; 的型别声明为 &lt;code&gt;(Foldable t, Monoid m) =&amp;gt; (a -&amp;gt; m) -&amp;gt; t a -&amp;gt; m&lt;/code&gt;。可以为自定义类型实作 &lt;code&gt;Foldable&lt;/code&gt; 类型类，即可通过 &lt;code&gt;foldMap&lt;/code&gt; 对自定义类型的元素做 map over、折叠等操作。注意 &lt;code&gt;foldMap&lt;/code&gt; 和 &lt;code&gt;fmap&lt;/code&gt; 的区别在于 &lt;code&gt;foldMap&lt;/code&gt; 不会将函数返回值再次包装到原类型类中，而是包装到 &lt;code&gt;Monoid&lt;/code&gt; 中。举个例子，对于自定义类型 &lt;code&gt;data Tree a = Node a (Tree a) (Tree a) | Empty&lt;/code&gt;，要想确定树中有无小于 0 的元素，只需 &lt;code&gt;getAny $ foldMap (\x -&amp;gt; Any $ x &amp;lt; 0) tree&lt;/code&gt;，这里 &lt;code&gt;foldMap&lt;/code&gt; 把树中每个元素映射到 &lt;code&gt;Any Monoid&lt;/code&gt; 中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Monad&quot;&gt;&lt;a href=&quot;#Monad&quot; class=&quot;headerlink&quot; title=&quot;Monad&quot;&gt;&lt;/a&gt;Monad&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt; （&lt;code&gt;Control.Monad&lt;/code&gt;）类型类定义如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Applicative&lt;/span&gt; m =&amp;gt; &lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt; m &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&amp;gt;&amp;gt;=) :: m a -&amp;gt; (a -&amp;gt; m b) -&amp;gt; m b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&amp;gt;&amp;gt;) :: m a -&amp;gt; m b -&amp;gt; m b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x &amp;gt;&amp;gt; y = x &amp;gt;&amp;gt;= \_ -&amp;gt; y&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return :: a -&amp;gt; m a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fail :: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; -&amp;gt; m a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fail msg = error msg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt; 的实例本身必须是 &lt;code&gt;Applicative&lt;/code&gt; 的实例。其类型类定义中已经默认实现了 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;fail&lt;/code&gt;，定义实例时可以重写这些函数，也可以只实现 &lt;code&gt;return&lt;/code&gt; 和 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;。&lt;code&gt;return&lt;/code&gt; 等价于 &lt;code&gt;pure&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;语法 &lt;code&gt;do&lt;/code&gt; 可帮助把一些 &lt;code&gt;Monad&lt;/code&gt; 操作连接在一起，其包裹的代码的每一行均为一个 &lt;code&gt;Monad&lt;/code&gt; 实例的值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt; 的 &lt;code&gt;Monad&lt;/code&gt; 实例定义如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt; [] &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return x = [x]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  xs &amp;gt;&amp;gt;= f = concat (map f xs)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  fail _ = []&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;从 &lt;code&gt;List&lt;/code&gt; 实例定义可看出，&lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 类似过程式语言中的循环嵌套，即将 &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; 左侧的 List 中的每个元素依次应用到右侧的函数上。List Comprehension 仅仅是它的语法糖，如 &lt;code&gt;[x | x &amp;lt;- [1..10], x&lt;/code&gt;mod&lt;code&gt;3 == 0]&lt;/code&gt; 等价于 &lt;code&gt;[1..10] &amp;gt;&amp;gt;= \x -&amp;gt; if x&lt;/code&gt;mod&lt;code&gt;3 == 0 then [x] else []&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt; 需要遵守如下守则：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;return x &amp;gt;&amp;gt;= f = f x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;m &amp;gt;&amp;gt;= return = m&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(m &amp;gt;&amp;gt;= f) &amp;gt;&amp;gt;= g = m &amp;gt;&amp;gt;= (\x -&amp;gt; f x &amp;gt;&amp;gt;= g)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;MonadPlus&quot;&gt;&lt;a href=&quot;#MonadPlus&quot; class=&quot;headerlink&quot; title=&quot;MonadPlus&quot;&gt;&lt;/a&gt;MonadPlus&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;上面的 List Comprehension 也等价于 &lt;code&gt;[1..10] &amp;gt;&amp;gt;= \x -&amp;gt; guard (x&lt;/code&gt;mod&lt;code&gt;3 == 0) &amp;gt;&amp;gt; return x&lt;/code&gt;。这需要用到 &lt;code&gt;MonadPlus&lt;/code&gt; 类型类，它指同时表现为 &lt;code&gt;Monoid&lt;/code&gt; 的 &lt;code&gt;Monad&lt;/code&gt;，其定义为：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt; m =&amp;gt; &lt;span class=&quot;type&quot;&gt;MonadPlus&lt;/span&gt; m &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mzero :: m a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mplus :: m a -&amp;gt; m a -&amp;gt; m a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mzero&lt;/code&gt; 等价于 &lt;code&gt;mempty&lt;/code&gt;，&lt;code&gt;mplus&lt;/code&gt; 等价于 &lt;code&gt;mappend&lt;/code&gt;。 &lt;code&gt;guard&lt;/code&gt; 函数的定义如下。当 &lt;code&gt;guard&lt;/code&gt; 监察的 &lt;code&gt;Bool&lt;/code&gt; 变量为 &lt;code&gt;True&lt;/code&gt; 时，&lt;code&gt;return&lt;/code&gt; 会返回一个空 unit，否则 在 List Comprehension 例子中，&lt;code&gt;mzero = []&lt;/code&gt; 不会产生任何结果。 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;guard&lt;/span&gt; :: (&lt;span class=&quot;type&quot;&gt;MonadPlus&lt;/span&gt; m) =&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; -&amp;gt; m ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;True&lt;/span&gt; = return ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;False&lt;/span&gt; = mzero&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;常用-Monad&quot;&gt;&lt;a href=&quot;#常用-Monad&quot; class=&quot;headerlink&quot; title=&quot;常用 Monad&quot;&gt;&lt;/a&gt;常用 Monad&lt;/h2&gt;&lt;h3 id=&quot;Writer&quot;&gt;&lt;a href=&quot;#Writer&quot; class=&quot;headerlink&quot; title=&quot;Writer&quot;&gt;&lt;/a&gt;Writer&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Writer&lt;/code&gt; （&lt;code&gt;Control.Monad.Writer&lt;/code&gt;）的定义和 &lt;code&gt;Monad&lt;/code&gt; 实例定义如下，该模块并未导出其值构造子。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Writer&lt;/span&gt; w a = &lt;span class=&quot;type&quot;&gt;Writer&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;&amp;#123; &lt;span class=&quot;title&quot;&gt;runWriter&lt;/span&gt; :: (&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;w&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Monoid&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;w&lt;/span&gt;)&lt;/span&gt; =&amp;gt; &lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Writer&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;w&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return x = &lt;span class=&quot;type&quot;&gt;Writer&lt;/span&gt; (x, mempty)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;type&quot;&gt;Writer&lt;/span&gt; (x, v)) &amp;gt;&amp;gt;= f = &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Writer&lt;/span&gt; (y, v&#39;) = f x &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Writer&lt;/span&gt; (y, v `mappend` v&#39;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;可用 &lt;code&gt;tell&lt;/code&gt; 向 Writer 加入 log。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;gt-r&quot;&gt;&lt;a href=&quot;#gt-r&quot; class=&quot;headerlink&quot; title=&quot;((-&amp;gt;) r)&quot;&gt;&lt;/a&gt;((-&amp;gt;) r)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;函数也是 &lt;code&gt;Monad&lt;/code&gt;，其实例为：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;((-&amp;gt;)&lt;/span&gt; r) &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return = const&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  g &amp;gt;&amp;gt;= f = \v -&amp;gt; f (g v) v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Reader&quot;&gt;&lt;a href=&quot;#Reader&quot; class=&quot;headerlink&quot; title=&quot;Reader&quot;&gt;&lt;/a&gt;Reader&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Reader&lt;/code&gt; （对函数 Monad 的一种包装）：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Reader&lt;/span&gt; s a = &lt;span class=&quot;type&quot;&gt;Reader&lt;/span&gt;&lt;span class=&quot;container&quot;&gt;&amp;#123; &lt;span class=&quot;title&quot;&gt;runReader&lt;/span&gt; :: &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt; -&amp;gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;Reader&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return x = &lt;span class=&quot;type&quot;&gt;Reader&lt;/span&gt; (const x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  m &amp;gt;&amp;gt;= k = &lt;span class=&quot;type&quot;&gt;Reader&lt;/span&gt; $ \r -&amp;gt; runReader (k (runReader m r)) r&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;State&quot;&gt;&lt;a href=&quot;#State&quot; class=&quot;headerlink&quot; title=&quot;State&quot;&gt;&lt;/a&gt;State&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;State&lt;/code&gt; （&lt;code&gt;Control.Monad.State&lt;/code&gt;）常用来表示状态迁移，代表了改变状态的操作：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;newtype&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;State&lt;/span&gt; s a = &lt;span class=&quot;type&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;container&quot;&gt;&amp;#123;&lt;span class=&quot;title&quot;&gt;runState&lt;/span&gt; :: &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt; -&amp;gt; (&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt;)&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Monad&lt;/span&gt; &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;s&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  return x = &lt;span class=&quot;type&quot;&gt;State&lt;/span&gt; $ \s -&amp;gt; (x, s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;type&quot;&gt;State&lt;/span&gt; h) &amp;gt;&amp;gt;= f = &lt;span class=&quot;type&quot;&gt;State&lt;/span&gt; $ \s -&amp;gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; (a, newState) = h s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                      (&lt;span class=&quot;type&quot;&gt;State&lt;/span&gt;  g) = f a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; g newState&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2017/03/01/talk-about-some-simple-monads/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2017/03/01/talk-about-some-simple-monads/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2017/03/01/talk-about-some-simple-monads/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;@Fallenwood 选修的 《Foundations of Programming Languages》 课程让我看的很手痒。整理一下基本的 Typeclass 和 Monad，准备跟随贵科步伐重新学习 Haskell。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="Haskell" scheme="http://forec.github.io/tags/Haskell/"/>
    
      <category term="函数式编程" scheme="http://forec.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>形式语言与自动机（一）：概念</title>
    <link href="http://forec.github.io/2017/02/25/formal-languages-and-automata1/"/>
    <id>http://forec.github.io/2017/02/25/formal-languages-and-automata1/</id>
    <published>2017-02-25T15:33:13.000Z</published>
    <updated>2017-02-25T15:57:50.506Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这个寒假遇到的一些问题让我想起之前形式语言与自动机的内容，程序执行的本质是状态的变化，我觉得有必要将这部分理论捡起来，需要的时候方便自己回忆。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;概念整理&quot;&gt;&lt;a href=&quot;#概念整理&quot; class=&quot;headerlink&quot; title=&quot;概念整理&quot;&gt;&lt;/a&gt;概念整理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;形式语言&lt;/strong&gt; 是形式化描述的 &lt;strong&gt;字母表&lt;/strong&gt; 上的 &lt;strong&gt;字符串&lt;/strong&gt; 的集合。&lt;em&gt;字母表&lt;/em&gt; 为字符的有限集合，多用 &lt;code&gt;T&lt;/code&gt; 表示；&lt;em&gt;字符串&lt;/em&gt; 指字母表中的字符构成的 &lt;strong&gt;有限&lt;/strong&gt; 序列。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动机&lt;/strong&gt; 接受一定的输入，执行一定的动作，产生一定的结果。使用状态迁移描述整个过程。例如可实现一个用于识别字符串的自动机系统，根据输入的字符串解析形式语言。&lt;strong&gt;状态&lt;/strong&gt; 是一个标识，用于区分自动机在不同时刻的状况；自动机的本质是 &lt;strong&gt;根据状态、输入和规则决定下一个状态&lt;/strong&gt; （状态迁移）。&lt;/li&gt;
&lt;li&gt;有限自动机可以认为是由一个带有读写头的有限控制器和一条写有字符的输入带组成。&lt;/li&gt;
&lt;li&gt;关系：&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;形式语言&lt;/td&gt;&lt;td&gt;非限定性语言&lt;/td&gt;&lt;td&gt;上下文有关语言&lt;/td&gt;&lt;td&gt;上下文无关语言&lt;/td&gt;&lt;td&gt;正则语言&lt;/td&gt;&lt;/tr&gt;&lt;br&gt;&lt;tr&gt;&lt;td&gt;自动机&lt;/td&gt;&lt;td&gt;图灵机&lt;/td&gt;&lt;td&gt;线性有界自动机&lt;/td&gt;&lt;td&gt;下推式存储自动机&lt;/td&gt;&lt;td&gt;有限自动机&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;语言及文法&quot;&gt;&lt;a href=&quot;#语言及文法&quot; class=&quot;headerlink&quot; title=&quot;语言及文法&quot;&gt;&lt;/a&gt;语言及文法&lt;/h2&gt;&lt;p&gt;TODO&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;专栏目录：&lt;a href=&quot;http://blog.forec.cn/columns/cs-basic.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机理论基础&lt;/a&gt;&lt;br&gt;此专栏的上一篇文章：无&lt;br&gt;此专栏的下一篇文章：暂无  &lt;/p&gt;
&lt;p&gt;参考资料：《形式语言与自动机》，王柏、杨娟编著，北京邮电大学出版社&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2017/02/25/formal-languages-and-automata1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2017/02/25/formal-languages-and-automata1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2017/02/25/formal-languages-and-automata1/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个寒假遇到的一些问题让我想起之前形式语言与自动机的内容，程序执行的本质是状态的变化，我觉得有必要将这部分理论捡起来，需要的时候方便自己回忆。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机理论基础" scheme="http://forec.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="自动机" scheme="http://forec.github.io/tags/%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>用 Haskell 实现解释器</title>
    <link href="http://forec.github.io/2017/02/14/talk-about-interpreter/"/>
    <id>http://forec.github.io/2017/02/14/talk-about-interpreter/</id>
    <published>2017-02-14T12:38:16.000Z</published>
    <updated>2017-02-15T12:10:56.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这篇文章主要基于王垠早年发过的文章&lt;a href=&quot;http://www.yinwang.org/blog-cn/2012/08/01/interpreter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《怎样写一个解释器》&lt;/a&gt;，我参考了 Racket 版本的 R2 解释器，并用 Haskell 实现 &lt;code&gt;H2Lang&lt;/code&gt; 的简单解释器，较 R2 的功能做了一点改进。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;代码的表示&quot;&gt;&lt;a href=&quot;#代码的表示&quot; class=&quot;headerlink&quot; title=&quot;代码的表示&quot;&gt;&lt;/a&gt;代码的表示&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;王垠的 R2 解释器用 Racket 实现，Racket 可以很容易地用 &lt;code&gt;&amp;#39;(op e1 e1)&lt;/code&gt; 的形式表示 S-expr，并且 lambda 表达式也可以复用。&lt;a href=&quot;http://fallenwood.github.io/2017/02/04/writing-a-simple-lisp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fallenwood&lt;/a&gt; 也用 Python 实现了一个类似的 Lisp 解释器，他将操作符和表达式均以列表的形式存储，利用了 Python 的动态类型。知乎上 “&lt;a href=&quot;https://www.zhihu.com/question/20115358&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;如何写 Lisp 解释器&lt;/a&gt;” 这个问题下，答主 &lt;a href=&quot;https://www.zhihu.com/people/be5invis/answers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Belleve&lt;/a&gt; 给出了 JS 实现的 Lisp 解释器，并实现了 &lt;code&gt;call/cc&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Haskell 是静态类型，没法把动态类型列表迭代那一套搬过来，因此基本思路和王垠文章中所述类似。为了方便起见，我声明新的类型，并用字符串表示值操作符：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Float&lt;/span&gt;       |&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;type&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt;      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;type&quot;&gt;String&#39;&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;      |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;type&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;type&quot;&gt;Lambda&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt;    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;type&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt;    |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;type&quot;&gt;Let&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt;   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;type&quot;&gt;Closure&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Env&lt;/span&gt;   |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;type&quot;&gt;Call&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;deriving&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Show&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;在上面的型别声明中，提供了三种类型的数据（&lt;code&gt;Float&lt;/code&gt;、&lt;code&gt;Bool&lt;/code&gt; 和 &lt;code&gt;String&lt;/code&gt;），以及变量（&lt;code&gt;Param&lt;/code&gt;）、错误信息（&lt;code&gt;Error&lt;/code&gt;）、运算式（&lt;code&gt;Op&lt;/code&gt;）、函数（&lt;code&gt;Lambda&lt;/code&gt;）、条件表达式（&lt;code&gt;If&lt;/code&gt;）、绑定（&lt;code&gt;Let&lt;/code&gt;）、闭包（&lt;code&gt;Closure&lt;/code&gt;）和函数调用（&lt;code&gt;Call&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;出于方便考虑，只支持了二元运算符，这从 &lt;code&gt;Exp&lt;/code&gt; 的声明中也能看出。如果想支持一元运算符，最简单的方式是增加型别的值构造子，并修改解释器的模式匹配；如果想支持多元运算符，可以绑定嵌套。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Closure&lt;/code&gt; 值构造子有一个参数为 &lt;code&gt;Env&lt;/code&gt;，它用于维护闭包内表达式所处的环境的副本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;变量、值的绑定&quot;&gt;&lt;a href=&quot;#变量、值的绑定&quot; class=&quot;headerlink&quot; title=&quot;变量、值的绑定&quot;&gt;&lt;/a&gt;变量、值的绑定&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;有了上述型别，简单的值可以通过对应的值构造子产生，如 &lt;code&gt;Value 2.34&lt;/code&gt;、&lt;code&gt;Boolean True&lt;/code&gt;、&lt;code&gt;String&amp;#39; &amp;quot;test&amp;quot;&lt;/code&gt; 等。&lt;/li&gt;
&lt;li&gt;变量与值的绑定通过类似 &lt;code&gt;Data.Map&lt;/code&gt; 的结构，因为值和函数、运算等都可归一为表达式 &lt;code&gt;Exp&lt;/code&gt;，因此用一个 &lt;code&gt;[(String, Exp)]&lt;/code&gt; 的 list 存放对当前代码区域可见的变量-值绑定，称之为环境。函数 ·extEnv` 扩展已有的环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Env&lt;/span&gt; = [&lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt;)&lt;/span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;extEnv&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Env&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Env&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;extEnv&lt;/span&gt; x v env = (x, v) : env&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;需要查找变量时，在当前环境中检查有无对应的键。因为 &lt;code&gt;extEnv&lt;/code&gt; 将后绑定的变量插入到环境的头部，因此可以屏蔽先插入的同名变量，从而模拟出变量的就近原则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;运算符的计算&quot;&gt;&lt;a href=&quot;#运算符的计算&quot; class=&quot;headerlink&quot; title=&quot;运算符的计算&quot;&gt;&lt;/a&gt;运算符的计算&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为了保持解释器主体部分简短，我将运算符的计算提取成单独的函数。其大致结构如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;calc&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;calc&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;+&quot;&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; v1&#39;) (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; v2&#39;)      = &lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; (v1&#39; + v2&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;calc&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; v1&#39;) (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; v2&#39;)      = &lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; (v1&#39; - v2&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;calc&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; v1&#39;) (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; v2&#39;)      = &lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; (v1&#39; * v2&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;calc&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; v1&#39;) (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; v2&#39;)      = &lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; (v1&#39; / v2&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;calc&lt;/span&gt; ...... &lt;span class=&quot;comment&quot;&gt;-- other patterns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;为了支持 &lt;code&gt;String&amp;#39;&lt;/code&gt; 和 &lt;code&gt;Boolean&lt;/code&gt; 类型的计算，&lt;code&gt;calc&lt;/code&gt; 函数必须为每种类型均增加模式匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;函数声明和调用&quot;&gt;&lt;a href=&quot;#函数声明和调用&quot; class=&quot;headerlink&quot; title=&quot;函数声明和调用&quot;&gt;&lt;/a&gt;函数声明和调用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Exp&lt;/code&gt; 型别有一个 &lt;code&gt;Lambda&lt;/code&gt; 值构造子用来声明函数，解释器遇到 &lt;code&gt;Lambda&lt;/code&gt; 表达式时，会将其转化为 &lt;code&gt;Closure&lt;/code&gt; 值类型，即将该函数所处的环境保存下来，这么做的目的与 Lexical Scoping 和 Dynamic Scoping 有关。这一点在王垠的文章中讲的很清楚，这里简单提一下。Lexical Scoping，中文为静态域或者词法定界，Dynamic Scoping 为动态作用域，举个例子，&lt;code&gt;let x = 2 in (let f = \y-&amp;gt; x * y in (let x = 4 in (f 3)))&lt;/code&gt;，如果结果为 6 就是 Lexical Scoping，结果为 12 就是 Dynamic Scoping。Dynamic Scoping 会带来很多意想不到的后果，因此要想实现静态域，就要在函数定义时保存其所处的环境，并在函数调用时从该环境中提取变量绑定。&lt;/li&gt;
&lt;li&gt;实现的 &lt;code&gt;H2Lang&lt;/code&gt; 解释器会在匹配到 &lt;code&gt;Lambda&lt;/code&gt; 表达式时将其转化为闭包：&lt;code&gt;interp s@(Lambda _ _) env = Closure s env&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;为了方便区分普通表达式和函数调用，我在 &lt;code&gt;Exp&lt;/code&gt; 的型别中声明了 &lt;code&gt;Call&lt;/code&gt; 值构造子，它将两个表达式组合到一起，并认定第一个表达式代表函数，第二个表达式代表某个变量或者值。因为多元函数可以用柯里化不断简化，因此解释器就不做处理了，在调用时可以通过 &lt;code&gt;Call&lt;/code&gt; 的嵌套实现。&lt;/li&gt;
&lt;li&gt;当解释器匹配到 &lt;code&gt;Call e1 e2&lt;/code&gt; 时，根据当前环境递归调用解释器计算出 &lt;code&gt;e2&lt;/code&gt; 最终的表达式，假设 &lt;code&gt;e1&lt;/code&gt; 匹配了 &lt;code&gt;Closure (Lambda (Param x) e) env&amp;#39;)&lt;/code&gt;，则将计算出 &lt;code&gt;e2&lt;/code&gt; 的结果绑定到变量 &lt;code&gt;x&lt;/code&gt;，并计算函数的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;解释器&quot;&gt;&lt;a href=&quot;#解释器&quot; class=&quot;headerlink&quot; title=&quot;解释器&quot;&gt;&lt;/a&gt;解释器&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;解释器的主体代码如下，完整代码在 &lt;a href=&quot;https://github.com/Forec/learn/blob/master/2017.1/haskell-interpreter/h2lang.hs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;h2lang.hs&lt;/a&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;interp&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Env&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Exp&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;interp&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; x) env = fromMaybe (&lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;undefined variable&quot;&lt;/span&gt; ++ x)) (lookup x env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;interp&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; x) _ = &lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;interp&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Boolean&lt;/span&gt; x) _ = &lt;span class=&quot;type&quot;&gt;Boolean&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;interp&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;String&#39;&lt;/span&gt; x) _ = &lt;span class=&quot;type&quot;&gt;String&#39;&lt;/span&gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;interp&lt;/span&gt; s@(&lt;span class=&quot;type&quot;&gt;Lambda&lt;/span&gt; _ _) env = &lt;span class=&quot;type&quot;&gt;Closure&lt;/span&gt; s env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;interp&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Let&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; x) e1 e2) env = interp e2 (extEnv x (interp e1 env) env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;interp&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Op&lt;/span&gt; op e1 e2) env = &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; v1 = interp e1 env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               v2 = interp e2 env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                           &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; calc op v1 v2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;interp&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;If&lt;/span&gt; cond e1 e2) env = &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; c = interp cond env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                             &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; c &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt; _       -&amp;gt; &lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;syntax error&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               &lt;span class=&quot;type&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;False&lt;/span&gt; -&amp;gt; interp e2 env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               _             -&amp;gt; interp e1 env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;interp&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Call&lt;/span&gt; e1 e2) env = &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; v2 &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; _   -&amp;gt; callExp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;type&quot;&gt;Boolean&lt;/span&gt; _ -&amp;gt; callExp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;type&quot;&gt;String&#39;&lt;/span&gt; _ -&amp;gt; callExp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            _         -&amp;gt; &lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;syntax error&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      v2 = interp e2 env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      col = interp e1 env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      callExp = &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; col &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (&lt;span class=&quot;type&quot;&gt;Closure&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Lambda&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; x) e) env&#39;) -&amp;gt; interp e (extEnv x v2 env&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                _                                   -&amp;gt; &lt;span class=&quot;type&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;syntax error&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;效果：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;h2&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Let&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;x&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      (&lt;span class=&quot;type&quot;&gt;Let&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;f&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Lambda&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;y&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;*&quot;&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;x&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;y&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         (&lt;span class=&quot;type&quot;&gt;Let&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;x&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            (&lt;span class=&quot;type&quot;&gt;Call&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;f&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)))))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Value 6.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;h2&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Let&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;x&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3.9&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;x&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4.32&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Value 0.9027778&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;h2&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Let&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;x&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8.75&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;=&quot;&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Param&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;x&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Boolean True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;h2&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;==&quot;&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;True&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;False&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- Boolean False&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;h2&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;++&quot;&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;String&#39;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;test&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;String&#39;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot; case&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- String&#39; &quot;test case&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;h2&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;If&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;=&quot;&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2.3&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;Value&lt;/span&gt; (-&lt;span class=&quot;number&quot;&gt;2.754&lt;/span&gt;))) (&lt;span class=&quot;type&quot;&gt;String&#39;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Yes&quot;&lt;/span&gt;) (&lt;span class=&quot;type&quot;&gt;String&#39;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;No&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- String&#39; &quot;Yes&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;参考资料：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.yinwang.org/blog-cn/2012/08/01/interpreter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;王垠 - 怎样写一个解释器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fallenwood.github.io/2017/02/04/writing-a-simple-lisp/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fallenwood - 怎样写一个解释器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://norvig.com/lispy.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;(How to Write a (Lisp) Interpreter (in Python))&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/20115358&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;知乎 - 如何写 Lisp 解释器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2017/02/14/talk-about-interpreter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2017/02/14/talk-about-interpreter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2017/02/14/talk-about-interpreter/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇文章主要基于王垠早年发过的文章&lt;a href=&quot;http://www.yinwang.org/blog-cn/2012/08/01/interpreter&quot;&gt;《怎样写一个解释器》&lt;/a&gt;，我参考了 Racket 版本的 R2 解释器，并用 Haskell 实现 &lt;code&gt;H2Lang&lt;/code&gt; 的简单解释器，较 R2 的功能做了一点改进。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="Haskell" scheme="http://forec.github.io/tags/Haskell/"/>
    
  </entry>
  
  <entry>
    <title>HMM 关键词检索</title>
    <link href="http://forec.github.io/2017/02/06/talk-about-hmm/"/>
    <id>http://forec.github.io/2017/02/06/talk-about-hmm/</id>
    <published>2017-02-06T08:22:30.000Z</published>
    <updated>2017-02-14T03:21:35.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;记一下 HMM 的一些总是忘记的名词和计算过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;HMM&quot;&gt;&lt;a href=&quot;#HMM&quot; class=&quot;headerlink&quot; title=&quot;HMM&quot;&gt;&lt;/a&gt;HMM&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;离散一阶马尔可夫链：系统在 t 时刻状态只和其在 t-1 时刻的状态相关。&lt;/li&gt;
&lt;li&gt;马尔可夫模型：随机过程独立于时间 t，且状态转移概率 &lt;code&gt;Σ a_ij = 1 (j=1..N)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;HMM 可观察到的事件是状态的随机函数，状态转移过程隐蔽（马尔可夫链），事件是一般随机过程。一个随机事件由观察值序列 &lt;code&gt;O = O_1, O_2, .., O_T&lt;/code&gt; 表示，该事件背后隐藏着实际的状态序列 &lt;code&gt;Q = q_1, q_2, .., q_T&lt;/code&gt;。HMM 的关键在于将两个序列联系起来，用可观察明字符组成的观察序列去表征由离散隐状态组成的状态序列（路径）。&lt;/li&gt;
&lt;li&gt;HMM 要求满足马尔可夫性假设（状态构成一阶马尔可夫链）、不动性假设（状态和具体时间无关）以及输出独立性假设（输出，也就是观察到的值仅与背后的状态有关）。&lt;/li&gt;
&lt;li&gt;HMM 由五元组 &lt;code&gt;λ = (N, M, A, B, π)&lt;/code&gt; 描述：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;N = {q_1, q_2, .., q_N}&lt;/code&gt;：有限状态集合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;M = {v_1, v_2, .., v_M}&lt;/code&gt;：有限观察值集合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A = {a_ij}&lt;/code&gt;：状态转移概率矩阵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;B = {b_jk}, b_jk = P(O_t = v_k | q_t = Sj)&lt;/code&gt;：观察值概率分布矩阵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;π = π_i&lt;/code&gt;：初始状态概率分布&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;给定 HMM 模型 &lt;code&gt;λ = (A, B, π)&lt;/code&gt;，观察序列通过状态的不断转移和 &lt;code&gt;B&lt;/code&gt; 矩阵产生，初始根据 &lt;code&gt;π&lt;/code&gt; 选择 &lt;code&gt;q_1&lt;/code&gt;，根据状态转移概率生成 &lt;code&gt;q_t&lt;/code&gt;，并根据 &lt;code&gt;q_t = i&lt;/code&gt; 和 &lt;code&gt;b_ik&lt;/code&gt; 生成 &lt;code&gt;O_t = v_k&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;对于给定模型 &lt;code&gt;λ = (π, A, B)&lt;/code&gt;，令 &lt;code&gt;O = O_1, O_2, .., O_T&lt;/code&gt; 为观察值序列，三个基本问题及解决方案：&lt;ul&gt;
&lt;li&gt;评估问题（前向算法）：对于给定模型，求任意观察值序列的概率 &lt;code&gt;P(O | λ)&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;解码问题（韦特比算法）：对于给定模型和观察值序列，求可能性最大的状态序列 &lt;code&gt;maxQ{P(Q | O, λ)}&lt;/code&gt;，也称 Q 为最优路径。即有效选择 “最优” 状态序列以尽量好地解释观察序列。&lt;/li&gt;
&lt;li&gt;学习问题（向前向后算法）：给定观察值序列，调整 &lt;code&gt;λ&lt;/code&gt; 使该观察值序列出现的概率 &lt;code&gt;P(O | λ)&lt;/code&gt; 最大。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;前向算法&quot;&gt;&lt;a href=&quot;#前向算法&quot; class=&quot;headerlink&quot; title=&quot;前向算法&quot;&gt;&lt;/a&gt;前向算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;α(t, i) = P(o_1, o_2, .., o_T, q_t = S_i | λ)&lt;/code&gt; 指 “在时刻 t，得到 t 之前的所有明符号序列，且时刻 t 的状态是 S_i” 这一事件的概率。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;α(1, i) = P(o_1, q_1 = S_i | λ) = π(i)b(i, o_1)&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;递推：`α(t+1, j) = [Σ α(t, i) · a(i, j), i=1..N] × b(j, o_t+1)；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;α(T, i) = P(o_1, .., o_T, q_T = S_i | λ)&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;P(O | λ) = Σ α(T, i), (i = 1..N)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Viterbi-算法&quot;&gt;&lt;a href=&quot;#Viterbi-算法&quot; class=&quot;headerlink&quot; title=&quot;Viterbi 算法&quot;&gt;&lt;/a&gt;Viterbi 算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;算法和卷积码的韦特比解码同名，因为本质就一样。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;δ(t, i)&lt;/code&gt; 为在 1..t 时刻按照状态序列 &lt;code&gt;q_1, .., q_t&lt;/code&gt; 且 &lt;code&gt;q_t = S_i&lt;/code&gt; 能够产生出 &lt;code&gt;o_1, o_2, .., o_t&lt;/code&gt; 的最大概率，即 &lt;code&gt;δ(t, i) = max{ P(q_1, .., q_t-1, q_t = Si, o_1, .., o_t | λ) }&lt;/code&gt;。序列 &lt;code&gt;o&lt;/code&gt; 和系统 &lt;code&gt;λ&lt;/code&gt; 都是确定的，&lt;code&gt;max&lt;/code&gt; 根据序列 &lt;code&gt;q&lt;/code&gt; 的变动选取最优解。&lt;/li&gt;
&lt;li&gt;记忆变量：&lt;code&gt;φ(t, i)&lt;/code&gt; 记录概率最大路径上当前状态的前一个状态。&lt;/li&gt;
&lt;li&gt;初始化：&lt;code&gt;δ(1, i) = π(i)b(i, O_1)&lt;/code&gt;，&lt;code&gt;φ(1, i) = 0&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;递推 ：&lt;code&gt;δ(t, j) = max{δ(t-1, j) × a_ji} × b(i, O_t), 2 ≤ t ≤ T, 1 ≤ i ≤ N&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;终止：&lt;code&gt;p* = max{δ(T, i)}&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;路径回溯：&lt;code&gt;q* = φ(t+1, q*_t+1), t = T-1, T-2, .., 1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;向前向后算法&quot;&gt;&lt;a href=&quot;#向前向后算法&quot; class=&quot;headerlink&quot; title=&quot;向前向后算法&quot;&gt;&lt;/a&gt;向前向后算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;最大似然估计无法解决学习问题，因为 HMM 中的状态序列为隐变量，无法被观察到。EM 算法由交替的 “期望” 过程（E）和 “极大似然估计” 过程（M）组成，E 过程从条件期望中构造完全数据的似然函数值，M 过程利用参数的统计量重新估计概率模型的参数，使训练数据对数似然最大。&lt;/li&gt;
&lt;li&gt;初始化：满足概率条件的情况下随机给 &lt;code&gt;π_i&lt;/code&gt;、&lt;code&gt;a_ij&lt;/code&gt; 和 &lt;code&gt;b_jk&lt;/code&gt; 赋值，得模型 &lt;code&gt;λ_0&lt;/code&gt;，设 &lt;code&gt;i = 0&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;E 过程：由 &lt;code&gt;λ_i&lt;/code&gt; 根据下面公式计算期望值 &lt;code&gt;ε(t, i, j)&lt;/code&gt;（给定模型和观察序列，在时间 t 位于状态 &lt;code&gt;S_i&lt;/code&gt;，时间 t+1 位于状态 &lt;code&gt;S_j&lt;/code&gt; 的概率） 和 &lt;code&gt;γ(t, i)&lt;/code&gt;（给定模型和观察序列，在时间 t 位于状态 i 的概率），E 过程的期望是根据上一个 M 过程重估后的模型计算的；&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ε&lt;span class=&quot;comment&quot;&gt;(t, i, j)&lt;/span&gt; = P&lt;span class=&quot;comment&quot;&gt;(q_t = S_i, q_t+1 = S_j | O, λ)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           = P&lt;span class=&quot;comment&quot;&gt;(q_t = S_i, q_t+1 = S_j, O | λ)&lt;/span&gt; / P&lt;span class=&quot;comment&quot;&gt;(O | λ)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           = α&lt;span class=&quot;comment&quot;&gt;(t, i)&lt;/span&gt;· a&lt;span class=&quot;comment&quot;&gt;(i, j)&lt;/span&gt; · b&lt;span class=&quot;comment&quot;&gt;(j, O_t+1)&lt;/span&gt; · β&lt;span class=&quot;comment&quot;&gt;(t+1, j)&lt;/span&gt; / P&lt;span class=&quot;comment&quot;&gt;(O | λ)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           = α&lt;span class=&quot;comment&quot;&gt;(t, i)&lt;/span&gt;· a&lt;span class=&quot;comment&quot;&gt;(i, j)&lt;/span&gt; · b&lt;span class=&quot;comment&quot;&gt;(j, O_t+1)&lt;/span&gt; · β&lt;span class=&quot;comment&quot;&gt;(t+1, j)&lt;/span&gt; / &amp;#123;Σi Σj α&lt;span class=&quot;comment&quot;&gt;(t, i)&lt;/span&gt; · a&lt;span class=&quot;comment&quot;&gt;(i, j)&lt;/span&gt; · b&lt;span class=&quot;comment&quot;&gt;(j, O_t+1)&lt;/span&gt; · β&lt;span class=&quot;comment&quot;&gt;(t+1, j)&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;γ&lt;span class=&quot;comment&quot;&gt;(t, i)&lt;/span&gt; = Σj ε&lt;span class=&quot;comment&quot;&gt;(t, i, j)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;M 过程：根据 E 过程得出的期望值，根据下面公式重新估计 &lt;code&gt;πi&lt;/code&gt;，&lt;code&gt;a_ij&lt;/code&gt; 和 &lt;code&gt;b_jk&lt;/code&gt;，得到模型 &lt;code&gt;λ_i+1&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight gcode&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;π&lt;span class=&quot;comment&quot;&gt;(i)&lt;/span&gt; = P&lt;span class=&quot;comment&quot;&gt;(q_1 = S_i)&lt;/span&gt; = γ&lt;span class=&quot;comment&quot;&gt;(1, i)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a&lt;span class=&quot;comment&quot;&gt;(i, j)&lt;/span&gt; = &amp;#123;Σt ε&lt;span class=&quot;comment&quot;&gt;(t, i, j)&lt;/span&gt;&amp;#125; / &amp;#123;Σt γ&lt;span class=&quot;comment&quot;&gt;(t, i)&lt;/span&gt;&amp;#125;, t = &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;.T&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b&lt;span class=&quot;comment&quot;&gt;(j, k)&lt;/span&gt; = &amp;#123;Σt γ&lt;span class=&quot;comment&quot;&gt;(t, j)&lt;/span&gt; × δ&lt;span class=&quot;comment&quot;&gt;(O_t, v_k)&lt;/span&gt;&amp;#125; / &amp;#123;Σt γ&lt;span class=&quot;comment&quot;&gt;(t, j)&lt;/span&gt;&amp;#125;, t = &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;.T&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;重复 E、M 过程直到模型收敛。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;前向算法、Viterbi 和 Baum-Welch 算法的概率值连续乘法运算容易下溢。&lt;/li&gt;
&lt;li&gt;前向算法中每步运算都可以乘一个比例因子 &lt;code&gt;c(t)&lt;/code&gt;，如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;α(t+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, j) = [Σ α(t, i) · &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i, j)&lt;/span&gt;&lt;/span&gt;, i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;..N] × &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(j, o_t+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;α&lt;span class=&quot;string&quot;&gt;&#39;(t+1, j) = c(t) × [Σ α(t, i)&#39;&lt;/span&gt; · &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(i, j)&lt;/span&gt;&lt;/span&gt;, i=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;..N] × &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(j, o_t+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(t)&lt;/span&gt;&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; / Σ α(t, i) , &lt;span class=&quot;tag&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;..N&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Viterbi 算法可以将概率值取对数（乘积化为对数求和）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;相关链接&quot;&gt;&lt;a href=&quot;#相关链接&quot; class=&quot;headerlink&quot; title=&quot;相关链接&quot;&gt;&lt;/a&gt;相关链接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/20962240&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;逼乎 “如何用通俗易懂的例子解释 HMM”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/ppn029012/article/details/8923501&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我邮学长 Nong Bloody 的博客&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hankcs.com/ml/hidden-markov-model.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hankcs 的隐马模型笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2017/02/06/talk-about-hmm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2017/02/06/talk-about-hmm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2017/02/06/talk-about-hmm/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记一下 HMM 的一些总是忘记的名词和计算过程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机理论基础" scheme="http://forec.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Algorithms" scheme="http://forec.github.io/tags/Algorithms/"/>
    
      <category term="机器学习" scheme="http://forec.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>VS Code 配置记录</title>
    <link href="http://forec.github.io/2017/01/31/vscode-configuration/"/>
    <id>http://forec.github.io/2017/01/31/vscode-configuration/</id>
    <published>2017-01-31T07:38:13.000Z</published>
    <updated>2017-01-31T12:26:01.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;VS Code 的配置记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;全局配置&quot;&gt;&lt;a href=&quot;#全局配置&quot; class=&quot;headerlink&quot; title=&quot;全局配置&quot;&gt;&lt;/a&gt;全局配置&lt;/h2&gt;&lt;h3 id=&quot;编辑器配置&quot;&gt;&lt;a href=&quot;#编辑器配置&quot; class=&quot;headerlink&quot; title=&quot;编辑器配置&quot;&gt;&lt;/a&gt;编辑器配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;参考 &lt;a href=&quot;https://fallenwood.github.io/2016/05/24/configuring-visual-studio-code/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fallendwood 的 Blog&lt;/a&gt;，我个人修改后配置如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;window.reopenFolders&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;editor.fontSize&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;editor.tabSize&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;editor.formatOnType&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;&lt;span class=&quot;attribute&quot;&gt;extensions.autoUpdate&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;git&quot;&gt;&lt;a href=&quot;#git&quot; class=&quot;headerlink&quot; title=&quot;git&quot;&gt;&lt;/a&gt;git&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git 扩展默认开启，修改 &lt;code&gt;git.path&lt;/code&gt; 和 &lt;code&gt;git.autofetch&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;终端集成&quot;&gt;&lt;a href=&quot;#终端集成&quot; class=&quot;headerlink&quot; title=&quot;终端集成&quot;&gt;&lt;/a&gt;终端集成&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;配置 &lt;code&gt;&amp;quot;terminal.integrated.shell.windows&amp;quot;: &amp;quot;C:/Windows/System32/WindowsPowerShell/v1.0/powershell.exe&amp;quot;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;C-C&quot;&gt;&lt;a href=&quot;#C-C&quot; class=&quot;headerlink&quot; title=&quot;C/C++&quot;&gt;&lt;/a&gt;C/C++&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装 &lt;code&gt;c/c++&lt;/code&gt;，&lt;code&gt;c/c++ clang&lt;/code&gt; 和 &lt;code&gt;clang-format&lt;/code&gt; 插件。&lt;/li&gt;
&lt;li&gt;安装 &lt;code&gt;Native Debug&lt;/code&gt; 插件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;launch.json&lt;/code&gt; 用来配置启动任务，修改 &lt;code&gt;launch.json&lt;/code&gt; 来配置调试：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;version&quot;: &quot;0.2.0&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;configurations&quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;name&quot;: &quot;C++ Launch (GDB)&quot;,                 // 配置名称，将会在启动配置的下拉菜单中显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;type&quot;: &quot;cppdbg&quot;,                           // 配置类型，这里只能为cppdbg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;request&quot;: &quot;launch&quot;,                        // 请求配置类型，可以为launch（启动）或attach（附加）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;launchOptionType&quot;: &quot;Local&quot;,                // 调试器启动类型，这里只能为Local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;targetArchitecture&quot;: &quot;x86&quot;,                // 生成目标架构，一般为x86或x64，可以为x86, arm, arm64, mips, x64, amd64, x86_64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;program&quot;: &quot;$&amp;#123;file&amp;#125;.exe&quot;,                   // 将要进行调试的程序的路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;miDebuggerPath&quot;:&quot;path/to/gdb.exe&quot;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                        // miDebugger的路径，注意这里要与MinGw的路径对应&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;args&quot;: [&quot;blackkitty&quot;,  &quot;1221&quot;, &quot;# #&quot;],     // 程序调试时传递给程序的命令行参数，一般设为空即可&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;stopAtEntry&quot;: false,                       // 设为true时程序将暂停在程序入口处，一般设置为false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;cwd&quot;: &quot;$&amp;#123;workspaceRoot&amp;#125;&quot;,                  // 调试程序时的工作目录，一般为$&amp;#123;workspaceRoot&amp;#125;即代码所在目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;externalConsole&quot;: true,                    // 调试时是否显示控制台窗口，一般设置为true显示控制台&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;preLaunchTask&quot;: &quot;g++&quot;　　                  // 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;，输入 &lt;code&gt;Run Build Tasks&lt;/code&gt;，配置 &lt;code&gt;tasks.json&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;version&quot;: &quot;0.1.0&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;command&quot;: &quot;g++&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;args&quot;: [&quot;-g&quot;,&quot;$&amp;#123;file&amp;#125;&quot;,&quot;-o&quot;,&quot;$&amp;#123;file&amp;#125;.exe&quot;],    // 编译命令参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;problemMatcher&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;owner&quot;: &quot;cpp&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;fileLocation&quot;: [&quot;relative&quot;, &quot;$&amp;#123;workspaceRoot&amp;#125;&quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;pattern&quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;regexp&quot;: &quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;file&quot;: 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;line&quot;: 2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;column&quot;: 3,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;severity&quot;: 4,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &quot;message&quot;: 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;自动补全：&lt;code&gt;Ctrl + Shift + P&lt;/code&gt; 输入 &lt;code&gt;settings&lt;/code&gt; 打开用户设置，配置 &lt;code&gt;clang.executable&lt;/code&gt;、&lt;code&gt;clang.cflags&lt;/code&gt; 和 &lt;code&gt;clang.cxxflags&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&quot;clang.cxxflags&quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-std=c++1y&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-Wall&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-I/mingw64/include&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-I/mingw64/x86_64-w64-mingw32/include&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-I/mingw64/lib/gcc/x86_64-w64-mingw32/6.3.0/include&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-I$&amp;#123;workspaceRoot&amp;#125;/include&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-I$&amp;#123;cwd&amp;#125;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;clang.cflags&quot;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-std=c99&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-Wall&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-I/mingw64/include&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-I/mingw64/x86_64-w64-mingw32/include&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-I/mingw64/lib/gcc/x86_64-w64-mingw32/6.3.0/include&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-I$&amp;#123;workspaceRoot&amp;#125;/include&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot;-I$&amp;#123;cwd&amp;#125;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;clang.executable&quot;: &quot;/mingw64/bin/clang.exe&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;配置 &lt;code&gt;cpptools&lt;/code&gt; 的 &lt;code&gt;c_cpp_properties.json&lt;/code&gt;，将对应系统的 &lt;code&gt;include&lt;/code&gt; 项修改为 &lt;code&gt;settings.json&lt;/code&gt; 中相同的几个路径。&lt;/li&gt;
&lt;li&gt;按 &lt;code&gt;F8&lt;/code&gt; 可生成目标文件和可执行文件，按 &lt;code&gt;F5&lt;/code&gt; 启动调试。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;标签自动关闭可安装插件 &lt;code&gt;Auto Close Tag&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;根据开始标签自动修改关闭标签可安装插件 &lt;code&gt;Auto Rename Tag&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Go&quot;&gt;&lt;a href=&quot;#Go&quot; class=&quot;headerlink&quot; title=&quot;Go&quot;&gt;&lt;/a&gt;Go&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Go 语言有唯一的插件可以安装。需要手动 &lt;code&gt;go get&lt;/code&gt; 所需的工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Python&quot;&gt;&lt;a href=&quot;#Python&quot; class=&quot;headerlink&quot; title=&quot;Python&quot;&gt;&lt;/a&gt;Python&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装 &lt;code&gt;Python&lt;/code&gt; 插件，配置一下 &lt;code&gt;python.pythonPath&lt;/code&gt; 就可以使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;主题、配色&quot;&gt;&lt;a href=&quot;#主题、配色&quot; class=&quot;headerlink&quot; title=&quot;主题、配色&quot;&gt;&lt;/a&gt;主题、配色&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt; 输入 &lt;code&gt;File Icon Theme&lt;/code&gt; 可以修改图标主题。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Code Runner&lt;/code&gt; 可以选中一行/几行代码并右击运行，功能非常强大，用处比较大。&lt;/li&gt;
&lt;li&gt;需要在文件头部加上固定内容可以使用插件 &lt;code&gt;vscode-file-header-comment-helper&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;改背景图 &lt;code&gt;Background&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;彩虹括号 &lt;code&gt;Rainbow Brackets&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Project Manager&lt;/code&gt; 可在多个 git 项目之间切换。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File Peeker&lt;/code&gt; 可点击编辑内容中的文件名并打开文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Path Intellisense&lt;/code&gt; 可自动补全路径。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://fallenwood.github.io/2016/05/24/configuring-visual-studio-code/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fallendwood 的配置介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/c_duoduo/article/details/51615381&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Windows下VSCode编译调试c/c++ - 黑猫崽儿的 CSDN 博客&lt;/a&gt;    &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/30269449/how-do-i-set-up-vscode-to-compile-c-code&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How do I set up VSCode to compile C++ code? - StackOverFlow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/eric-z/p/5217530.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;windows下用visual studio code 调试go代码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/huyong/p/4573041.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visual Studio Code 介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2017/01/31/vscode-configuration/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2017/01/31/vscode-configuration/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2017/01/31/vscode-configuration/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;VS Code 的配置记录。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Configuration" scheme="http://forec.github.io/categories/Configuration/"/>
    
    
  </entry>
  
  <entry>
    <title>顶点云（应用）文件传输</title>
    <link href="http://forec.github.io/2017/01/15/zenith-cloud-8/"/>
    <id>http://forec.github.io/2017/01/15/zenith-cloud-8/</id>
    <published>2017-01-15T13:22:07.000Z</published>
    <updated>2017-02-15T14:05:53.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;设计文件传输代理和具体的实现细节，包括文件的上传和批量下载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;传输代理&quot;&gt;&lt;a href=&quot;#传输代理&quot; class=&quot;headerlink&quot; title=&quot;传输代理&quot;&gt;&lt;/a&gt;传输代理&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在 &lt;a href=&quot;http://blog.forec.cn/2016/12/03/zenith-cloud-7/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;顶点云（应用）用户代理&lt;/a&gt; 中介绍了客户端发送的不涉及文件传输的指令处理。涉及文件传输的操作由客户端启动独立的线程申请，并在独立线程中将命令转交给 &lt;code&gt;rc.dealWithTransmissions()&lt;/code&gt; 方法：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (u *cuser) DealWithTransmission(db *sql.DB, t trans.Transmitable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 传输结束后从用户传输列表移除线程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; u.RemoveTransmit(t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	recvB, err := t.RecvBytes()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		u.RemoveTransmit(t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	command := &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(recvB)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(command) &amp;gt;= &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;amp;&amp;amp; strings.ToUpper(command[:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]) == &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 下载请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		u.get(db, command, t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(command) &amp;gt;= &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;amp;&amp;amp; strings.ToUpper(command[:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]) == &lt;span class=&quot;string&quot;&gt;&quot;PUT&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 上传请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		u.put(db, command, t)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 指令无法识别&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;涉及传输操作的只有上传和下载。下载支持目录，即客户端可以在用户本地构建云盘的目录结构并复现整个目录。上传操作仅支持单个文件上传，但客户端可以通过 Facade 模式将上传包装，在客户端处理小文件的拼凑、多个文件的异步/同步上传。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;文件上传&quot;&gt;&lt;a href=&quot;#文件上传&quot; class=&quot;headerlink&quot; title=&quot;文件上传&quot;&gt;&lt;/a&gt;文件上传&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;文件上传的流程在&lt;a href=&quot;http://blog.forec.cn/2016/11/13/zenith-cloud-1/#上传文件&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《顶点云认证、传输协议设计》&lt;/a&gt;中详细叙述过，以下代码实现了该流程，各段代码的解释已经写在注释中：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (u *cuser) put(db *sql.DB, command &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;, t trans.Transmitable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 传输流程:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 收取下载指令：PUT&amp;lt;SEP&amp;gt;上传文件uid&amp;lt;SEP&amp;gt;上传文件大小&amp;lt;SEP&amp;gt;上传文件 md5 值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 验证指令合法性并回送代码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 合法则启动传输，否则结束传输&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; err1, err2, err error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; uid, _cid, cid, size, _ref, ref &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; shouldTransmit, valid &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt; = &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; queryRow *sql.Row&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	args := generateArgs(command, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; args == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		valid = &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 指令不合法，无法获取参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		uid, err1 = strconv.Atoi(args[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		size, err2 = strconv.Atoi(args[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err1 != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; || err2 != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; || size &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || strings.ToUpper(args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) != &lt;span class=&quot;string&quot;&gt;&quot;PUT&quot;&lt;/span&gt; ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 指令格式错误&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			!auth.IsMD5(args[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			valid = &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 查找实体文件列表中是否存在相同 md5 值的文件，并获取实体文件引用数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			queryRow = db.QueryRow(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`select uid, ref from cfile &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				where md5=&#39;%s&#39; and size=%d`&lt;/span&gt;, strings.ToUpper(args[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]), size))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; queryRow == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				shouldTransmit = &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				err = queryRow.Scan(&amp;amp;cid, &amp;amp;ref)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					shouldTransmit = &lt;span class=&quot;constant&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 判断是否启动传输&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fmt.Println(shouldTransmit)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; valid != &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 指令不合法或文件不存在时发送 300 错误码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; shouldTransmit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 启动传输返回 201 错误码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;201&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;启动上传，返回 201&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 使用 md5 值创建临时文件并获取待临时文件句柄&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		file, err := os.OpenFile(conf.STORE_PATH+args[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], os.O_WRONLY|os.O_CREATE|os.O_TRUNC, &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 启动数据传输函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fileWriter := bufio.NewWriter(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !t.RecvToWriter(fileWriter) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;203&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_, err = db.Exec(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`insert into cfile values(null, &#39;%s&#39;, %d, 0, &#39;%s&#39;)`&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			strings.ToUpper(args[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]), size, time.Now().Format(&lt;span class=&quot;string&quot;&gt;&quot;2006-01-02 15:04:05&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 获取新加入实体文件的编号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		queryRow = db.QueryRow(&lt;span class=&quot;string&quot;&gt;`select max(uid) from cfile`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; queryRow == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			err = queryRow.Scan(&amp;amp;cid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		file.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 修改临时文件名为实体文件编号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		err = os.Rename(conf.STORE_PATH+args[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%s%d&quot;&lt;/span&gt;, conf.STORE_PATH, cid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 获取实体文件句柄，计算 MD5 以验证用户提供的 MD5 值是否合法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		file, err = os.Open(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%s%d&quot;&lt;/span&gt;, conf.STORE_PATH, cid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		fileReader := bufio.NewReader(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_md5 := auth.CalcMD5ForReader(fileReader)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		file.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _md5 == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 计算 MD5 值失败&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; strings.ToUpper(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(args[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])) != strings.ToUpper(&lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;(_md5)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 用户声明的 MD5 值和服务器计算的 MD5 值不一致&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;403&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 从数据库删除实体文件记录，并从文件存储路径删除实体文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			db.Exec(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;delete from cfile where uid=%d&quot;&lt;/span&gt;, cid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			os.Remove(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%s%s&quot;&lt;/span&gt;, conf.STORE_PATH, cid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ref = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 检查用户是否已创建要上传的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	queryRow = db.QueryRow(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`select cfileid from ufile where uid=%d and ownerid=%d`&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		uid, u.id))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; queryRow == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;301&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		err = queryRow.Scan(&amp;amp;_cid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 用户文件引用的实体文件未发生变化，实体文件引用数不需更新&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _cid == cid &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 向客户端发送 200 代码，确认传输结束&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 获取实体文件的引用记录数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	queryRow = db.QueryRow(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`select ref from cfile where uid=%d`&lt;/span&gt;, _cid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _cid &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; queryRow != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		err = queryRow.Scan(&amp;amp;_ref)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; _ref != &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				db.Exec(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`update cfile set ref=%d where uid=%d`&lt;/span&gt;, _ref-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, _cid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				db.Exec(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`delete from cfile where uid=%d`&lt;/span&gt;, _cid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 更新资源文件引用的实体文件编号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_, err = db.Exec(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`update ufile set cfileid=%d where uid=%d and ownerid=%d`&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		cid, uid, u.id))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 更新实体文件的引用记录数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_, err = db.Exec(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`update cfile set ref=%d where uid=%d`&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ref+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, cid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		u.used += &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(size)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		db.Exec(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`update cuser set used=%d where uid=%d`&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			u.used, u.id)) &lt;span class=&quot;comment&quot;&gt;// 更新用户使用云盘容量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;文件（夹）下载&quot;&gt;&lt;a href=&quot;#文件（夹）下载&quot; class=&quot;headerlink&quot; title=&quot;文件（夹）下载&quot;&gt;&lt;/a&gt;文件（夹）下载&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;单个文件或者一个目录的批量传输流程在&lt;a href=&quot;http://blog.forec.cn/2016/11/13/zenith-cloud-1/#%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%EF%BC%88%E5%A4%B9%EF%BC%89&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《顶点云认证、传输协议设计》&lt;/a&gt;中详细叙述过，下面的代码已添加注释：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;212&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (u *cuser) get(db *sql.DB, command &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;, t trans.Transmitable) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 指令格式: GET&amp;lt;SEP&amp;gt;文件uid&amp;lt;SEP&amp;gt;提取码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; err error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; isdir, private &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; uid, valid &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; recordCount, ownerid, cfileid, parentLength, downloaded &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pass, filename, originFilename, path, subpath &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; queryRow *sql.Row&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; queryRows *sql.Rows&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fileReader *bufio.Reader&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	args := generateArgs(command, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; args == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		valid = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 无法获取参数，valid = 1：指令不合法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; GET_VERIFY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	uid, err = strconv.Atoi(args[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; || strings.ToUpper(args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) != &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 参数格式不正确，指令不合法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		valid = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; GET_VERIFY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	queryRow = db.QueryRow(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`select isdir, private, ownerid, linkpass, cfileid, filename, path, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		downloaded from ufile where uid=%d`&lt;/span&gt;, uid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; queryRow == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		valid = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 数据库查询出错，valid = 2：无法获取记录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; GET_VERIFY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	queryRow.Scan(&amp;amp;isdir, &amp;amp;private, &amp;amp;ownerid, &amp;amp;pass, &amp;amp;cfileid, &amp;amp;filename, &amp;amp;path, &amp;amp;downloaded)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(ownerid) != u.id &amp;amp;&amp;amp; pass != args[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] || &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(ownerid) != u.id &amp;amp;&amp;amp; private &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 用户不是资源所有者且提取码不正确 或 用户不是资源所有者且资源为私有&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		valid = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 用户不具有权限，valid = 3：无法下载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; GET_VERIFY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GET_VERIFY:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; valid != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 指令执行失败，发送错误码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.SendBytes([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;NOTPERMITTED&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 指令被允许执行，激活&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		t.SendBytes([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;VALID&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// 更新待下载资源的下载次数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	db.Exec(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`update ufile set downloaded=%d where uid=%d`&lt;/span&gt;, downloaded+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, uid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; totalFileLength &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !isdir &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 仅下载单个文件时，待发送文件数目为 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 发送待下载文件文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !t.SendBytes([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(filename)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 发送待下载资源的类型（文件/目录）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !t.SendBytes([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(auth.Int64ToBytes(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cfileid &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 文件未引用实体文件，则为空文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.SendFromReader(&lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 提取实体文件的大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			queryRow = db.QueryRow(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`select size from cfile where uid=%d`&lt;/span&gt;, cfileid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; queryRow == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			queryRow.Scan(&amp;amp;totalFileLength)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 获取实体文件句柄&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			file, err := os.Open(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%s%d&quot;&lt;/span&gt;, conf.STORE_PATH, cfileid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; file.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fileReader = bufio.NewReader(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 启动传输&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.SendFromReader(fileReader, &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(totalFileLength))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 用户试图下载一个目录，需计算共传输多少文件/目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		queryRow = db.QueryRow(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`select count (*) from ufile where &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			path like &#39;%s%%&#39; and ownerid=%d`&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			path+filename+&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, u.id))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		originFilename = filename&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; queryRow == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 扫描待下载文件数目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		err = queryRow.Scan(&amp;amp;recordCount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 增加 1 个待下载数量（根目录）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		recordCount += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 发送待下载文件数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(recordCount))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 发送根目录名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !t.SendBytes([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(filename)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 发送 1（根目录类型为 1，目录）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		parentLength = &lt;span class=&quot;built_in&quot;&gt;len&lt;/span&gt;(path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 提取待下载目录下的目录结构&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		queryRows, err = db.Query(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`select filename, path from ufile where path like &#39;%s%%&#39; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			and isdir=1 and ownerid=%d order by length(path)`&lt;/span&gt;, path+filename+&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, ownerid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; queryRows.Next() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			err = queryRows.Scan(&amp;amp;filename, &amp;amp;subpath)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			filename = subpath[parentLength:] + filename&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 根据客户端版本决定是否修改路径中的分隔符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; conf.CLIENT_VERSION == &lt;span class=&quot;string&quot;&gt;&quot;Windows&quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				filename = strings.Replace(filename, &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;\\&quot;&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 发送相对路径名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !t.SendBytes([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(filename)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 发送 1（目录类型）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 发送待下载路径下的文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		queryRow = db.QueryRow(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`select count (*) from ufile where path like &#39;%s%%&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			and isdir=0 and ownerid=%d`&lt;/span&gt;, path+originFilename+&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, ownerid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; queryRow == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		err = queryRow.Scan(&amp;amp;recordCount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// 待下载文件信息列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		file_list := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;([]downloadItem, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, recordCount)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fileItem downloadItem&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		queryRows, err = db.Query(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`select filename, path, cfileid from ufile where path like &#39;%s%%&#39; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			and isdir=0 and ownerid=%d order by length(path)`&lt;/span&gt;, path+originFilename+&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, ownerid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; queryRows.Next() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			err = queryRows.Scan(&amp;amp;filename, &amp;amp;subpath, &amp;amp;cfileid)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 获取实体文件大小，若无实体文件编号则大小为 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cfileid &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				totalFileLength = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				queryRow = db.QueryRow(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;`select size from cfile where uid=%d`&lt;/span&gt;, cfileid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; queryRow == &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					totalFileLength = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				err = queryRow.Scan(&amp;amp;totalFileLength)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					totalFileLength = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fileItem.size = totalFileLength&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 生成文件在客户端的相对路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			filename = subpath[parentLength:] + filename&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 根据客户端系统替换路径分隔符&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; conf.CLIENT_VERSION == &lt;span class=&quot;string&quot;&gt;&quot;Windows&quot;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				filename = strings.Replace(filename, &lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;\\&quot;&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fileItem.filename = filename&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fileItem.cfileid = cfileid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			file_list = &lt;span class=&quot;built_in&quot;&gt;append&lt;/span&gt;(file_list, fileItem)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, fileItem = &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; file_list &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 发送文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !t.SendBytes([]&lt;span class=&quot;typename&quot;&gt;byte&lt;/span&gt;(fileItem.filename)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fmt.Println(&lt;span class=&quot;string&quot;&gt;&quot;发送文件名: &quot;&lt;/span&gt;, fileItem.filename)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 发送 0 （文件类型）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; !t.SendBytes(auth.Int64ToBytes(&lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; fileItem.size &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; fileItem.cfileid &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;comment&quot;&gt;// 待下载文件引用了实体文件，获取实体文件句柄&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				file, err := os.Open(fmt.Sprintf(&lt;span class=&quot;string&quot;&gt;&quot;%s%d&quot;&lt;/span&gt;, conf.STORE_PATH, fileItem.cfileid))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;comment&quot;&gt;// 发生错误时发送空文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					fileItem.size = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					fileReader = &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; file.Close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					fileReader = bufio.NewReader(file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				fileReader = &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// 发送文件，空文件使 reader 为 nil 即可跳过发送&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			t.SendFromReader(fileReader, &lt;span class=&quot;typename&quot;&gt;int64&lt;/span&gt;(fileItem.size))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;专栏目录：&lt;a href=&quot;http://blog.forec.cn/columns/zenith-cloud.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;顶点云（应用）设计与实现&lt;/a&gt;&lt;br&gt;此专栏的上一篇文章：&lt;a href=&quot;http://blog.forec.cn/2016/12/03/zenith-cloud-7/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;顶点云（应用）用户代理&lt;/a&gt;&lt;br&gt;此专栏的下一篇文章：这是此专栏的最后一篇文章     &lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2017/01/15/zenith-cloud-8/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2017/01/15/zenith-cloud-8/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2017/01/15/zenith-cloud-8/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;设计文件传输代理和具体的实现细节，包括文件的上传和批量下载。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="Golang" scheme="http://forec.github.io/tags/Golang/"/>
    
      <category term="云存储" scheme="http://forec.github.io/tags/%E4%BA%91%E5%AD%98%E5%82%A8/"/>
    
      <category term="线程" scheme="http://forec.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>互斥读者-读者问题</title>
    <link href="http://forec.github.io/2017/01/08/os-concepts-16/"/>
    <id>http://forec.github.io/2017/01/08/os-concepts-16/</id>
    <published>2017-01-08T09:52:59.000Z</published>
    <updated>2017-01-11T14:47:38.752Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在 &lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-14/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统（专题）：信号量编程（上）&lt;/a&gt; 中，我对《操作系统概念》原书课后习题 7.16 过桥问题做了一定改动，此部分记录对改动后题目的分析。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;注：以下解法均已通过程序验证，不会发生饥饿或死锁，验证代码可在 &lt;a href=&quot;https://github.com/Forec/semaphore-test&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt; 查看。&lt;/p&gt;
&lt;h2 id=&quot;村庄过桥问题&quot;&gt;&lt;a href=&quot;#村庄过桥问题&quot; class=&quot;headerlink&quot; title=&quot;村庄过桥问题&quot;&gt;&lt;/a&gt;村庄过桥问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;原题大致翻译（原书 7.16）：一座桥连接了南北两个村庄，两个村庄的居民可以从桥上通过，但桥上不能同时承载两个人（无论同方向还是相向）。使用信号量保证死锁和饥饿都不会发生。&lt;/li&gt;
&lt;li&gt;我个人对此题编写的信号量解法如下，通过两个互斥信号量均衡双方争夺过桥权限的次数：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num_waiting_north = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num_waiting_south = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;// 南北方等待过桥人数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore mutex_south = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore mutex_north = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;// 南北方等待过桥人数修改互斥锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore bridge = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;          &lt;span class=&quot;comment&quot;&gt;// 过桥权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore north_entry = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore south_entry = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 南北参与争夺桥的权限，开始双方均允许争夺&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enter_bridge_north&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;    &lt;span class=&quot;comment&quot;&gt;// 北方居民试图过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex_north);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num_waiting_north ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex_north);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(north_entry);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 将自己加入等待队列，如果等待队列有资源就可以等待桥资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(bridge);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex_north);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num_waiting_north --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex_north);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex_south);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (num_waiting_south == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 若南方当前无人准备过桥则本次过桥不计入争夺次数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(north_entry);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 若南方有居民准备过桥则允许南方等待队列中的一个居民争夺过桥权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(south_entry);      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex_south);   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(bridge);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enter_bridge_south&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;    &lt;span class=&quot;comment&quot;&gt;// 南方居民试图过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 与北方居民对称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;互斥读者-读者问题&quot;&gt;&lt;a href=&quot;#互斥读者-读者问题&quot; class=&quot;headerlink&quot; title=&quot;互斥读者-读者问题&quot;&gt;&lt;/a&gt;互斥读者-读者问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在 &lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-15/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统（专题）：信号量编程（下）&lt;/a&gt; 的 “简单信号量编程” 部分中，北京大学 1992 年的入学考试题实际也是对书后习题 7.16 的改动，即 &lt;strong&gt;同一方向允许多辆车依次通过但不允许两辆车相对行驶&lt;/strong&gt; ，但未要求不发生饥饿。&lt;/li&gt;
&lt;li&gt;再对原题做了一点改变：将原题条件改成同一方向同时允许多个居民依次通过但不允许两个居民相向行走， &lt;strong&gt;同时保证不发生饥饿现象&lt;/strong&gt; 。 &lt;strong&gt;新的题目和原来的两道题目的主要区别&lt;/strong&gt; 在于：&lt;ul&gt;
&lt;li&gt;与教材 7.16 相比，教材 7.16 要求桥上任何时刻最多只能有一个人，而新的题目允许桥上 &lt;strong&gt;同时&lt;/strong&gt; 出现多个同方向的居民。即原题要求 &lt;strong&gt;依次&lt;/strong&gt; 通过，所以即使是同方向的居民也需要等待；新的题目允许 &lt;strong&gt;同时&lt;/strong&gt; 通过，即同方向的居民无需等待。&lt;/li&gt;
&lt;li&gt;与北京大学 1992 入学考试题相比，原题允许同方向多辆车同时通过，但未要求保证不发生饥饿，而新的题目要求保证不发生饥饿现象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;我个人认为改造后的问题等价为读者-写者问题的变种：将读者-写者问题中的写者也换成另一类读者，并且要保证没有饥饿现象。因此我将改造后的问题称作 &lt;strong&gt;互斥读者-读者问题&lt;/strong&gt; ，只需要对第三读者写者问题中的写者稍作处理就可以使用第三读者写者问题的解法实现。我基于第三读者-写者问题编写的信号量解法如下，解法依赖于信号量自身进程队列的先进先出特性：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num_waiting_north = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num_waiting_south = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;// 南北等待人数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore north_mutex = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore south_mutex = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;// 修改等待人数的互斥锁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore bridge = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;         &lt;span class=&quot;comment&quot;&gt;// 桥资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore &lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;          &lt;span class=&quot;comment&quot;&gt;// 通过信号量的先进先出维护双方居民顺序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enter_bridge_north&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;   &lt;span class=&quot;comment&quot;&gt;// 北方居民尝试过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(north_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num_waiting_north++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (num_waiting_north == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 第一个北方居民要获得桥的通过权&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wait(bridge);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(north_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(north_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num_waiting_north --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (num_waiting_north == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 最后一个离开的北方居民交出桥的通过权权&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(bridge);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(north_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enter_bridge_south&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;    &lt;span class=&quot;comment&quot;&gt;// 南方居民尝试过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 与北方居民过桥对称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;对于上面改造后的问题，通过转换为第三读者-写者问题得到的解法 &lt;strong&gt;依赖于信号量进程队列的先进先出特性&lt;/strong&gt; 。我构想了另一种解法（下面的代码），但我认为这种解法有些过于复杂，并且依赖状态的记录。此算法已经经过程序验证。或者你有另外的解法，请一定要告诉我（在评论中留言或 &lt;a href=&quot;mailto:forec@bupt.edu.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点此&lt;/a&gt; 向我发送邮件）！&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 其它变量和上面代码相同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; north_entered = FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; south_entered = FALSE;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 我方自上次对方通过桥后是否又有人通过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore north_entry = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore south_entry = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;// 双方居民争夺桥权的资格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enter_bridge_north&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;   &lt;span class=&quot;comment&quot;&gt;// 北方居民过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex_north);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num_waiting_north ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex_north);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(north_entry);    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 此句必须放置在 num_waiting_north++ 后，否则一方通过后将再无机会&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 打断对方的权限，直到对方主动交出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (num_waiting_north == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 第一个北方居民要获取桥的资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wait(bridge);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    north_entered = TRUE;    &lt;span class=&quot;comment&quot;&gt;// 标记北方已经有人通过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (num_waiting_south == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 南方无人等待过桥则允许下一个北方居民过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如果南方有人过桥，过桥后一定会再次给北方机会所以跳过此步&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(north_entry); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex_north);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    num_waiting_north --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (south_entered) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(south_entry);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        south_entered = FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果有南方居民已经通过桥，则说明 south_entry 为 0，因为最后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 一个通过的南方居民没有机会对 south_entry 做 signal。这样最后&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 一个离开的北方居民需要将 south_entry 置为 1，使南方居民能够获得过桥资格。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex_north);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(bridge);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enter_bridge_south&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;    &lt;span class=&quot;comment&quot;&gt;// 南方居民过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 与北方居民对称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;专栏目录：&lt;a href=&quot;http://blog.forec.cn/columns/cs-basic.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机理论基础&lt;/a&gt;&lt;br&gt;此专栏的上一篇文章：&lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-15/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统（十五）：信号量编程（下）&lt;/a&gt;&lt;br&gt;此专栏的下一篇文章：专栏已结束&lt;/p&gt;
&lt;p&gt;参考资料：《操作系统概念 英文第七版》，恐龙书，英文名《Operating System Concepts》，作者 Abraham Silberschatz、Peter Baer Galvin、Greg Gagne&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-16/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-16/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2017/01/08/os-concepts-16/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在 &lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-14/&quot;&gt;操作系统（专题）：信号量编程（上）&lt;/a&gt; 中，我对《操作系统概念》原书课后习题 7.16 过桥问题做了一定改动，此部分记录对改动后题目的分析。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机理论基础" scheme="http://forec.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="OS" scheme="http://forec.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>操作系统（专题）：信号量编程（下）</title>
    <link href="http://forec.github.io/2017/01/08/os-concepts-15/"/>
    <id>http://forec.github.io/2017/01/08/os-concepts-15/</id>
    <published>2017-01-08T03:53:13.000Z</published>
    <updated>2017-01-11T15:10:32.859Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;此部分包括一些和 《&lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-14/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;信号量编程（上）&lt;/a&gt;》 相比稍难的信号量编程习题，可能有一小部分超出了考试范畴。这部分习题的解答均根据我个人理解编写， &lt;strong&gt;不保证提供的答案绝对正确或最优&lt;/strong&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;注 1：习题主要来自 2000 年左右的各高校入学考试题，部分来自网络以及经典的信号量问题。&lt;/li&gt;
&lt;li&gt;注 2：以下问题顺序随机，难度之间并无递增/递减关系，可能有部分问题超出考试范畴。但其中第 1 ~ 4 题和之前 &lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-14/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;信号量编程（上）&lt;/a&gt; 中的习题 7.16 类似，之间存在类比、递进的关系。&lt;/li&gt;
&lt;li&gt;注 3：我提供了一份比较简陋的代码，可以帮助你 &lt;strong&gt;测试设计的信号量算法是否正确&lt;/strong&gt; 。详细可查看本文末尾的 “信号量编程测试”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;单向行驶问题&quot;&gt;&lt;a href=&quot;#单向行驶问题&quot; class=&quot;headerlink&quot; title=&quot;单向行驶问题&quot;&gt;&lt;/a&gt;单向行驶问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;（北京大学 1992 年）有一座桥连接了南北两侧，两侧均有车辆试图到另一侧，桥上不允许两车交会，但允许相同方向多辆车依次通行（桥上可以有多个同方向的车）。用信号量实现交通管理。&lt;/li&gt;
&lt;li&gt;本题和 &lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-14/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;信号量编程（上）&lt;/a&gt; 中的习题 7.16 （过桥问题）类似，但过桥问题要求桥上同时只能通过一人且保证不出现饥饿现象（习题 7.15 不要求处理饥饿，7.16 要求保证不会发生饥饿），所以此处我将其称之为单向行驶问题。我对本题的进一步修改和分析记录在 &lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-16/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;互斥读者-读者问题&lt;/a&gt; 中。&lt;/li&gt;
&lt;li&gt;分析：因为同方向允许多辆车连续通行，很容易联想到读者-写者问题的读者。在 &lt;a href=&quot;http://blog.forec.cn/2016/11/24/os-concepts-5/#读者-写者问题&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统（五）：进程互斥&lt;/a&gt; 里介绍的读者-写者问题中，允许多个到来的读者一起读数据库。将车辆视作读者，同方向到来的多个车辆可以依次通过而不必等待。既然允许多个读者，就必须记录当前的　“读者”，也就是这里的汽车数量。&lt;/li&gt;
&lt;li&gt;定义信号量和变量如下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;count1 = count2 = 0&lt;/code&gt; ：分别记录当前已经位于桥上的南北两个方向来车数量，显然两个变量要么均为 0，要么一个非 0 而另一个就必须为 0。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutex1 = mutex2 = 1&lt;/code&gt; ：用于控制对 &lt;code&gt;count1&lt;/code&gt; 和 &lt;code&gt;count2&lt;/code&gt; 的互斥操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bridge = 1&lt;/code&gt; ：过桥的权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; count1 = count2 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore mutex1 = mutex2 = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore bridge = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 北方来车&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;car_from_north&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count1 ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (count1 == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wait(bridge);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count1 --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (count1 == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(bridge);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 南方来车与北方对称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;士兵过桥问题&quot;&gt;&lt;a href=&quot;#士兵过桥问题&quot; class=&quot;headerlink&quot; title=&quot;士兵过桥问题&quot;&gt;&lt;/a&gt;士兵过桥问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;独木桥的左右两端各停留一队士兵，左侧有 m 个，右侧有 n 个。两侧士兵均可上桥，但一旦有一侧士兵上桥，另一侧士兵必须等待已上桥一侧的士兵全部通过后才可上桥。试使用信号量描述此过程。&lt;/li&gt;
&lt;li&gt;分析：与单向行驶问题类似，只需要保证一方先全部通过即可。因此需要记录两侧的人数。&lt;/li&gt;
&lt;li&gt;定义变量和信号量：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int left = 0, right = 0&lt;/code&gt; ：记录左右两侧已经通过的士兵数目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore left_mutex = right_mutex = 1&lt;/code&gt; ：操作变量 &lt;code&gt;left&lt;/code&gt; 和 &lt;code&gt;right&lt;/code&gt; 的互斥锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore bridge = 1&lt;/code&gt; ：桥的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 左侧士兵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(left_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    left ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; number = left;  &lt;span class=&quot;comment&quot;&gt;// 临时变量记录自己是第几个通过的士兵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (left == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wait(bridge);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(left_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (number == m)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(bridge);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 右侧士兵与左侧同理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;有限双向行驶问题&quot;&gt;&lt;a href=&quot;#有限双向行驶问题&quot; class=&quot;headerlink&quot; title=&quot;有限双向行驶问题&quot;&gt;&lt;/a&gt;有限双向行驶问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;（南开大学 1997 年题）在南开大学和天津大学之间有一条小路 S -&amp;gt; T，小路中间有一个安全岛 M，安全岛能够同时容纳两辆自行车，可供两个已经从两端进入小路的自行车错车用。整个地图如下图，S 到 K 段的小路和 T 到 L 段的小路同时都只能允许一辆自行车通过。试设计一个算法，使来往的自行车都能顺利通过。&lt;br&gt;&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/nankai-tianda.jpg&quot; width=&quot;400px&quot;&gt;&lt;/li&gt;
&lt;li&gt;此题和上面的单向行驶问题类似，但同时每个方向只能允许一辆车通过，并且允许两个方向各有来车一辆。此题和教材 7.16 过桥问题也非常相似。应当注意体会本题和单向行驶、习题 7.16 的区别与联系。&lt;/li&gt;
&lt;li&gt;分析：需要先确定需要用信号量维护的资源对象种类和数量。首先 S 端和 T 端能且仅能进入一辆自行车，直到进入的自行车从另一端离开，否则在我方通行两辆自行车期间，一旦对方有来车就会出现死锁。正因为 S 和 T 端最多只能进入一辆，所以安全岛 M 最多也只会出现两辆自行车，所以不需要为 M 设置信号量。此外，除了要控制路口 S 和 T 的进入权限，还要控制两段小路 S-K 和 L-T 的通行权限，不能允许从 S 方向进入的自行车和从 T 方向进入的自行车同时进入这两段小路。因此共有 4 个互斥信号量。&lt;/li&gt;
&lt;li&gt;声明信号量：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;semaphore S = T = 1&lt;/code&gt; ：两端最多允许进入一辆&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore SK = LT = 1&lt;/code&gt; ：两段小路最多允许进入一辆&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// S 口进入的自行车&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(S);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(SK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 通过 S-K 段小路&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 进入安全岛 M&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(LT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 通过 L-T 段小路&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(LT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(S);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// T 口进入的自行车与 S 口进入的自行车对称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;互斥读者-写者问题&quot;&gt;&lt;a href=&quot;#互斥读者-写者问题&quot; class=&quot;headerlink&quot; title=&quot;互斥读者-写者问题&quot;&gt;&lt;/a&gt;互斥读者-写者问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;具体见 &lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-16/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;互斥读者-读者问题&lt;/a&gt;        &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;理发店问题&quot;&gt;&lt;a href=&quot;#理发店问题&quot; class=&quot;headerlink&quot; title=&quot;理发店问题&quot;&gt;&lt;/a&gt;理发店问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;（原书书后习题 6.11 ，有修改）一个理发店配有一个有 10 个椅子的休息室和一个有理发椅的理发室。如果没有顾客则理发师睡觉；如果顾客来了而休息室、理发椅都没有空则离开；如果理发师在忙而有空的椅子，则顾客选择一个坐下等待；如果理发师在睡觉则顾客摇醒他。&lt;/li&gt;
&lt;li&gt;分析：理发师在没有顾客时睡觉，并且顾客在没有空椅时离开，因此应当记录顾客的数量。&lt;/li&gt;
&lt;li&gt;定义信号量：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int count = 11&lt;/code&gt; ：空闲的椅子数量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore mutex = 1&lt;/code&gt; ：对椅子数量的修改互斥&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore barber_chair = 1&lt;/code&gt; ：理发师互斥，同时只能给一个人理发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore customers = 0&lt;/code&gt; ：顾客人数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 顾客&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (count == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (count == &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(customers);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 唤醒 barber&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(barber_chair);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 理发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 理发师&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(customers);  &lt;span class=&quot;comment&quot;&gt;// 睡觉等待顾客&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 被唤醒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 剪发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(barber_chair);  &lt;span class=&quot;comment&quot;&gt;// 下一个客人剪发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;上面的代码将顾客排队顺序交给了信号量自身的排队机制处理，如果需要确保顾客能够维持一个先来先服务的剪发顺序，则需要维护一个容量为 11 的队列，顾客到来后加到队列尾部，每次从队头取走最先到来的顾客。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;上机实习问题&quot;&gt;&lt;a href=&quot;#上机实习问题&quot; class=&quot;headerlink&quot; title=&quot;上机实习问题&quot;&gt;&lt;/a&gt;上机实习问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;某高校计算机系安排学生上机实习，机房共 30 台机器，有超过 60 名学生选课。规定每两个学生一组，一组占一台机器，协同完成实习。只有凑够两个学生且机房仍有空闲机器的情况下，门卫才允许该组学生进入机房。每组上机实习结束时需要由一名固定的老师检查完毕后，该组学生才可离开。&lt;/li&gt;
&lt;li&gt;分析：互斥资源有需要检查的教师，同步资源涉及机房里的 30 台机器。此外，学生必须两两凑成一组才能进入机房，因此需要维护当前准备进入机房的学生人数，一旦超过 1 个人就可以组成一组。此外，应当注意学生组队和获取机器的先后关系，为了保证两个学生只获取一台机器，可以只使偶数号到来的学生获取机器，因为偶数号学生到来时可以保证能够凑成至少一组。本题涉及的进程只有学生。&lt;/li&gt;
&lt;li&gt;定义信号量：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int count = 0&lt;/code&gt; ：开始时在机房外等候的学生人数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore mutex = 1&lt;/code&gt; ：修改学生人数的互斥信号量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore teacher = 1&lt;/code&gt; ：验收的老师&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore machine = 30&lt;/code&gt; ：30 台机器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 学生进程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; temp = count;     &lt;span class=&quot;comment&quot;&gt;// 记录自己的编号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (count % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)   &lt;span class=&quot;comment&quot;&gt;// 偶数号学生&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wait(machine);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 上机&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 上机完成，等待验收&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(teacher);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 验收&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(teacher);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (temp % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(machine);   &lt;span class=&quot;comment&quot;&gt;// 由偶数号学生释放机器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 必须先释放机器再尝试获取 mutex&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 因为等待的偶数号学生先获取了 mutex，并且正在等待机器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wait(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        count -= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;// 一组学生离开&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(TRUE);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;吸烟者问题&quot;&gt;&lt;a href=&quot;#吸烟者问题&quot; class=&quot;headerlink&quot; title=&quot;吸烟者问题&quot;&gt;&lt;/a&gt;吸烟者问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;假设一个系统有 3 个吸烟者进程和一个供应商进程，制造一根香烟需要三种材料各一份。三个吸烟者分别无限量的拥有三种材料中的一种。供应商进程可以无限量的供应这三种材料，一旦一个吸烟者想吸烟，则他向供应商发出请求，供应商会为这个吸烟者提供另外两种材料。供货商同时只能为一个吸烟者提供服务，多个吸烟者同时发出请求时按固定顺序服务。如此循环往复，请用信号量编写程序控制四个进程同步执行。&lt;/li&gt;
&lt;li&gt;分析：供货商需要判断有哪些吸烟者当前试图吸烟，因为可能有多个吸烟者发出请求，因此供货商需要分别判断。吸烟者需要三种材料中的两种，因此每种材料需要设置一个信号量表示资源请求。此外多个吸烟者同时发出请求，那么它们可能会同时争抢供货商提供的某个材料，因此需要一个互斥信号量控制提出请求的权限。&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; smoker1, smoker2, smoker3;   &lt;span class=&quot;comment&quot;&gt;// 分别表示 1、2、3 吸烟者是否发出请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore a = b = c = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 初始供应的三种材料数量，1、2、3 号吸烟者分别持有 a、b、c类型材料&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semaphore smoker_request = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;     &lt;span class=&quot;comment&quot;&gt;// 吸烟者发出请求权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 供应商&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (smoker1 == TRUE) &amp;#123;   &lt;span class=&quot;comment&quot;&gt;// 吸烟者 1 有请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (smoker2 == TRUE) &amp;#123;   &lt;span class=&quot;comment&quot;&gt;// 吸烟者 2 有请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (smoker3 == TRUE) &amp;#123;   &lt;span class=&quot;comment&quot;&gt;// 吸烟者 3 有请求&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(TRUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//吸烟者 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(smoker_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    smoker1 = TRUE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(smoker_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;苹果-橘子或老虎与猪&quot;&gt;&lt;a href=&quot;#苹果-橘子或老虎与猪&quot; class=&quot;headerlink&quot; title=&quot;苹果-橘子或老虎与猪&quot;&gt;&lt;/a&gt;苹果-橘子或老虎与猪&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;两类问题本质一样，描述不同，在期中考试已经出现过。老虎与猪的描述如下：有一个笼子可以容纳一只老虎或者两只猪，如果笼子中已经有猪，则老虎不能被放入。猎人 A 每次向笼子中放入一只老虎，猎人 B 每次向笼子中放入一只猪。饲养员每次会从笼子中取出一只老虎，厨师每次会从笼子中取出一只猪。对笼子的操作是互斥的。试用信号量描述此过程。&lt;/li&gt;
&lt;li&gt;分析：此题的关键在于笼子中允许有两只猪，而当笼子中有猪时就无法放入老虎，因此需要维护猪的数量。猎人 A 需要和饲养员维持同步关系，猎人 B 需要和厨师维持同步关系。本题其实也可以看作生产者-消费者问题和第一类读者-写者问题的结合，但限制了读者的数量。&lt;/li&gt;
&lt;li&gt;变量和信号量定义：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int pig_count = 0&lt;/code&gt; ：笼子中当前猪的数量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore coop = 1&lt;/code&gt; ：笼子的互斥锁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore tiger = 0&lt;/code&gt; ：用于在猎人 A 和饲养员之间的同步，同时这个信号量和 &lt;code&gt;coop&lt;/code&gt; 也是互补的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore pig = 0&lt;/code&gt; ：用于在猎人 B 和厨师之间同步&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore pig_space = 2&lt;/code&gt; ：用于限制可以放置猪的剩余空间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;semaphore pig_count_mutex = 1&lt;/code&gt; ：用于限制对 &lt;code&gt;pig_count&lt;/code&gt; 的互斥访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 猎人 A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 抓到一只老虎&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(coop);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将老虎放入笼子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(tiger);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 饲养员&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(tiger);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 从笼子中取出老虎&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(coop);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 猎人 B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 抓到一只猪&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(pig_space);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(pig_count_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pig_count ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pig_count == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        wait(coop);    &lt;span class=&quot;comment&quot;&gt;// 笼子中没有猪的情况下要等待笼子权限&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将猪放入笼子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(pig_count_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(pig);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 厨师&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(pig);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(pig_count_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 从笼子中取出一只猪&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pig_count --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (pig_count == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(coop);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(pig_count_mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(pig_space);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;信号量编程测试&quot;&gt;&lt;a href=&quot;#信号量编程测试&quot; class=&quot;headerlink&quot; title=&quot;信号量编程测试&quot;&gt;&lt;/a&gt;信号量编程测试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;我编写了一点简单的测试代码（Windows 下）来辅助测试信号量算法能否工作成功。你可以在 &lt;a href=&quot;https://github.com/Forec/semaphore-test&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt; 获取这些代码。&lt;/li&gt;
&lt;li&gt;代码包括一个基类 &lt;code&gt;WorkStation&lt;/code&gt;（包含在 &lt;code&gt;base.hpp&lt;/code&gt; 中） 和两个可以用来做参考的测试文件。其中 &lt;code&gt;bridge1.cpp&lt;/code&gt; 用来验证 &lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-14/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;信号量编程（上）&lt;/a&gt; 中习题 7.16， &lt;code&gt;bridge2.cpp&lt;/code&gt; 用来验证 &lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-16/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;互斥读者-读者问题&lt;/a&gt; 中我针对修改后问题给出的自己的解答。你可以仿照这两个文件，继承 &lt;code&gt;WorkStation&lt;/code&gt; 类来测试自己的信号量程序。&lt;/li&gt;
&lt;li&gt;测试举例：以上面的老虎与猪问题为例，定义一个类 &lt;code&gt;Coop&lt;/code&gt; 继承 &lt;code&gt;WorkStation&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;将所需变量添加到子类中，并实现虚方法 &lt;code&gt;init()&lt;/code&gt;，该方法对你需要用到的信号量/变量做初始化。注意 &lt;code&gt;init()&lt;/code&gt; 函数中需要设置 &lt;code&gt;thread_type&lt;/code&gt;，这个变量表示有多少不同类型的进程，此问题有 4 种（猎人 A、B，厨师、饲养员），故 &lt;code&gt;thread_type&lt;/code&gt; 应当为 4。&lt;/li&gt;
&lt;li&gt;定义自己的参数结构体，对于上面老虎与猪问题而言需要将所用到的所有变量/信号量的地址放置到一个结构体中，对于此问题为：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Param&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *pig_count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HANDLE *coop, *tiger, *pig;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    HANDLE *pig_space, *pig_count_mutex;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;实现虚函数 &lt;code&gt;void * getParam(int index)&lt;/code&gt;，此函数格式比较固定，对于此问题应当为：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * &lt;span class=&quot;title&quot;&gt;getParam&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Param *p = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Param;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;pig_count = &amp;amp;pig_count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;coop = &amp;amp;coop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;tiger = &amp;amp;tiger;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;pig = &amp;amp;pig;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;pig_space = &amp;amp;pig_space;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    p-&amp;gt;pig_count_mutex = &amp;amp;pig_count_mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;实现四个进程对应的函数，只需要将已经写好的代码复制到你的代码中，格式参考 &lt;code&gt;bridge1.cpp&lt;/code&gt; 和 &lt;code&gt;bridge2.cpp&lt;/code&gt;。例如上面的猎人 A，应当写为：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;DWORD WINAPI &lt;span class=&quot;title&quot;&gt;hunter_A&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(LPVOID param)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Param p = *(Param*) param;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 抓到一只老虎&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    WaitForSingleObject(*(p.coop), INFINITE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 将老虎放入笼子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ReleaseSemaphore(*(p.coop), &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;假设你实现的代表四个进程的四个函数分别名为 &lt;code&gt;hunter_A&lt;/code&gt;、&lt;code&gt;hunter_B&lt;/code&gt;、&lt;code&gt;cook&lt;/code&gt; 和 &lt;code&gt;feeder&lt;/code&gt;。则向 &lt;code&gt;init()&lt;/code&gt; 函数添加下面的代码更新驱动表：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_threads[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = hunter_A;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_threads[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] = hunter_B;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_threads[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = cook;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_threads[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;] = feeder;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;修改 &lt;code&gt;main()&lt;/code&gt; 函数以测试。将 &lt;code&gt;main()&lt;/code&gt; 函数中 &lt;code&gt;simulate()&lt;/code&gt; 方法的第一个参数修改为 1，此参数表示每个进程创建多少个实例，此问题四种进程各一个，因此为 1。后一个参数表示程序运行多久退出，通常默认 60s 足够测试完成。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;专栏目录：&lt;a href=&quot;http://blog.forec.cn/columns/cs-basic.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机理论基础&lt;/a&gt;&lt;br&gt;此专栏的上一篇文章：&lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-14/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统（专题）：信号量编程（上）&lt;/a&gt;&lt;br&gt;此专栏的下一篇文章：&lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-16/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;互斥读者-读者问题&lt;/a&gt;        &lt;/p&gt;
&lt;p&gt;参考资料：《操作系统概念 英文第七版》，恐龙书，英文名《Operating System Concepts》，作者 Abraham Silberschatz、Peter Baer Galvin、Greg Gagne&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-15/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-15/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2017/01/08/os-concepts-15/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此部分包括一些和 《&lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-14/&quot;&gt;信号量编程（上）&lt;/a&gt;》 相比稍难的信号量编程习题，可能有一小部分超出了考试范畴。这部分习题的解答均根据我个人理解编写， &lt;strong&gt;不保证提供的答案绝对正确或最优&lt;/strong&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机理论基础" scheme="http://forec.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="OS" scheme="http://forec.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>操作系统（专题）：信号量编程（上）</title>
    <link href="http://forec.github.io/2017/01/06/os-concepts-14/"/>
    <id>http://forec.github.io/2017/01/06/os-concepts-14/</id>
    <published>2017-01-06T09:21:43.000Z</published>
    <updated>2017-01-11T15:16:21.061Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;此部分主要包括原书第六章（进程同步）和第七章（死锁）的部分习题（有些不属于考试范围），以及一些简单信号量编程习题（低于考试难度）的分析。这部分习题的解答均根据我个人理解编写或翻译， &lt;strong&gt;不保证提供的答案绝对正确或最优&lt;/strong&gt; 。稍微复杂一些的信号量编程在 《&lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-15/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;信号量编程（下）&lt;/a&gt;》。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;原书选题&quot;&gt;&lt;a href=&quot;#原书选题&quot; class=&quot;headerlink&quot; title=&quot;原书选题&quot;&gt;&lt;/a&gt;原书选题&lt;/h1&gt;&lt;p&gt;课后习题的解答主要是我对原书答案的翻译和解释。此外：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;“进程同步”中，第 6 题之后（含第 6 题）超出考试范围&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;“死锁”中，第 5 题超出考试范围&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;进程同步&quot;&gt;&lt;a href=&quot;#进程同步&quot; class=&quot;headerlink&quot; title=&quot;进程同步&quot;&gt;&lt;/a&gt;进程同步&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;证明 &lt;a href=&quot;http://blog.forec.cn/2016/11/24/os-concepts-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;进程互斥&lt;/a&gt; 中介绍的 &lt;strong&gt;Peterson 算法&lt;/strong&gt; 满足临界区的三个要求。&lt;ul&gt;
&lt;li&gt;参考 &lt;a href=&quot;http://blog.forec.cn/2016/11/24/os-concepts-4/#Peterson 算法&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;进程互斥 - Peterson 算法&lt;/a&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;什么是 &lt;strong&gt;忙等待（busy waiting）&lt;/strong&gt; ？操作系统中还有哪些等待方式？忙等待可以被完全避免吗？&lt;ul&gt;
&lt;li&gt;忙等待意味着进程在等待一个条件被满足，并且进程在等待的过程中仍然不放弃对 CPU 的控制（如通过 &lt;code&gt;while&lt;/code&gt; 循环不断判断条件是否被满足）。&lt;/li&gt;
&lt;li&gt;操作系统可以在一个进程等待某条件时将 CPU 控制权限交给其他进程，而等待的进程可以在将来某个合适的、条件满足的情况下被唤醒。&lt;/li&gt;
&lt;li&gt;忙等待可以被避免，但需要在进程的调度上花费更多的资源。等待进程需要被挂起，等到进程等待的条件满足时再唤醒。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;试解释为什么 &lt;strong&gt;自旋锁（旋转锁，spinlock）&lt;/strong&gt; 不适合单处理器系统，但在多处理器系统中很常用。&lt;ul&gt;
&lt;li&gt;对于单处理器系统：一个进程使用自旋锁等待条件时仍然占据着唯一的 CPU，其他进程得不到执行，而占据 CPU 的进程等待的条件需要其它进程的执行才能得到满足。&lt;/li&gt;
&lt;li&gt;对于多处理器系统：进程使用自旋锁时占据着一个 CPU 资源，而其他进程可以在剩余的 CPU 上运转，并且改变某些数据从而使停滞在旋转锁的进程的等待条件得到满足。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;试解释为什么在单处理器系统的用户进程中通过屏蔽中断来实现同步是不合理的。&lt;ul&gt;
&lt;li&gt;如果用户进程具有屏蔽中断的权限，那么它可以同样屏蔽计时器中断，没有时钟中断则分派程序无法运行，进程会无限执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;试解释为什么在多处理器系统系统中无法通过屏蔽中断来实现同步。&lt;ul&gt;
&lt;li&gt;屏蔽中断仅仅阻止其他进程在被屏蔽了中断的处理器上运行，其他进程可能在其它处理器上运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;试在多处理器环境下通过 &lt;code&gt;TestAndSet()&lt;/code&gt; 指令实现 &lt;code&gt;wait()&lt;/code&gt; 和 &lt;code&gt;signal()&lt;/code&gt; 信号量操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始定义 &lt;code&gt;int semaphore_value = 0&lt;/code&gt; 表示当前信号量剩余资源，定义 &lt;code&gt;bool guard = TRUE&lt;/code&gt; 保证对 &lt;code&gt;semaphore_value&lt;/code&gt; 的互斥修改。&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;void wait()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while (TestAndSet(&amp;amp;guard) == TRUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (semaphore_value == 0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 暂时没有资源可用，将进程挂起到信号量队列中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        semaphore_value --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    guard = FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;void signal()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    while (TestAndSet(&amp;amp;guard) == TRUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if (semaphore_value == 0 &amp;amp;&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        there&#39;s a process waiting in the queue)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 信号量资源数为 0 并且有进程挂起在信号量中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // 唤醒该进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        semaphore_value ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    guard = FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;证明 &lt;strong&gt;管程（monitor）&lt;/strong&gt; 和信号量可以互相实现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.forec.cn/2016/11/24/os-concepts-6/#使用信号量实现管程&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统（六）：管程 - 使用信号量实现管程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;使用管程实现信号量：&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;monitor semaphore &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; value = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    condition c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c.signal();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (value == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            c.wait();    &lt;span class=&quot;comment&quot;&gt;// 注意体会此处 while 而非 if 的意义&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        value --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用管程实现有限缓冲的生产者 - 消费者模型。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;monitor bounded_buffer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; items[MAX_ITEMS];    &lt;span class=&quot;comment&quot;&gt;// 生产的资源缓冲区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; numItems = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;        &lt;span class=&quot;comment&quot;&gt;// 缓冲区内当前资源数目&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    condition full, empty;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;produce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; v)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (numItems == MAX_ITEMS)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            full.wait();     &lt;span class=&quot;comment&quot;&gt;// 缓冲区满时将生产者挂起到条件变量 full&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        items[numItems++] = v;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        empty.signal();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;consume&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; retVal;          &lt;span class=&quot;comment&quot;&gt;// 临时变量保存返回值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (numItems == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            empty.wait();    &lt;span class=&quot;comment&quot;&gt;// 缓冲区为空将消费者挂起到条件变量 empty&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        retVal = items[--numItems];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        full.signal();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; retVal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;试提出一种解决读者-写者问题中饥饿现象的方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 3 类读者-写者问题的一种解答：&lt;a href=&quot;http://blog.forec.cn/2016/11/24/os-concepts-5/#第三读者-写者问题&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统（五）：进程同步 - 第三读者-写者问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;另一种方案：每个读者/写者都保留开始等待时刻的时间戳，当一个写者完成写任务后，会唤醒等待时间最长的进程。当有读者正在临界区内而有新读者到来时，新读者必须在没有写者在等待的情况下才能也进入临界区。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;信号量的 &lt;code&gt;signal()&lt;/code&gt; 和管程中条件变量 &lt;code&gt;signal&lt;/code&gt; 操作的区别。&lt;ul&gt;
&lt;li&gt;如 &lt;a href=&quot;http://blog.forec.cn/2016/11/24/os-concepts-6/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统（六）：管程&lt;/a&gt; 所讲，管程模式下的 &lt;code&gt;x.signal()&lt;/code&gt; 和信号量的 &lt;code&gt;signal()&lt;/code&gt; 区别在于： &lt;strong&gt;信号量操作 &lt;code&gt;signal()&lt;/code&gt; 会影响信号量的状态&lt;/strong&gt; ，而管程下的 &lt;code&gt;x.signal()&lt;/code&gt; 在 x 不存在挂起进程的情况下没有任何影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个系统包含 n 个进程 P1~n，每个进程都有唯一的优先级编号，共有 3 台打印机供这 n 个进程使用。试通过管程实现按优先级调度的资源分配。&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;monitor printers &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num_avail = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;// 可用资源数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num_waiting;      &lt;span class=&quot;comment&quot;&gt;// 等待进程数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; waiting_processes[MAX_PROCS];    &lt;span class=&quot;comment&quot;&gt;// 等待进程列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    condition c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;request_printer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; proc_number)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (num_avail &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;        &lt;span class=&quot;comment&quot;&gt;// 有资源可分配则进程直接获得&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            num_avail --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        waiting_processes[num_waiting] = proc_number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        num_waiting++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sort(waiting_processes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (num_avail == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            waiting_processes[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] != proc_number)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 当可用资源数量为 0 并且当前进程不处于等待队列的第一位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            c.wait();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        waiting_processes[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = waiting_processes[--num_waiting];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sort(waiting_processes);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        num_avail--;    &lt;span class=&quot;comment&quot;&gt;// 使用一个资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;release_printer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        num_avail ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c.signal();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;死锁&quot;&gt;&lt;a href=&quot;#死锁&quot; class=&quot;headerlink&quot; title=&quot;死锁&quot;&gt;&lt;/a&gt;死锁&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;考虑教材 7.1 描述的交通死锁问题（如下图所示），试说明死锁发生的四个必要条件在这个问题中均得到满足，并简述在这个问题中避免死锁的方案。（原书 7.1）&lt;br&gt;&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/deadlock-traffic.jpg&quot; width=&quot;400px&quot;&gt;&lt;ul&gt;
&lt;li&gt;死锁发生的四个必要条件分别是：互斥、占有并等待、非抢占和循环等待。因为只有一条道路的每个位置上只能由一辆车占据，故满足资源互斥；当一辆车占据道路上某个位置时，它必须等待前面的车移动（获取新位置）才可以移动，，即占有并等待；一辆车不能被移开，故此系统为非抢占；每个车都在等待前面的车移动，每个十字路口的车辆则循环等待下一个十字路口的车辆移动，故循环等待。&lt;/li&gt;
&lt;li&gt;一个简单的方案是：当十字路口已存在车辆时，新到来的车辆不能进入十字路口。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在真实计算机系统中，无论是可用资源还是进程对资源的需求都会随着时间的推移而改变。假设现在系统处于安全状态（通过银行家算法计算出），那么对于下面的几种改变，哪些改变执行之后一定能维持系统的安全状态？（原书 7.5）&lt;ul&gt;
&lt;li&gt;增加可用资源：维持安全状态&lt;/li&gt;
&lt;li&gt;减少可用资源：可能导致死锁，因为银行家算法计算出的安全状态是基于改变前的资源数量&lt;/li&gt;
&lt;li&gt;增加某个进程所需要的最大资源数量：可能导致死锁，理由同上&lt;/li&gt;
&lt;li&gt;减少某个进程所需要的最大资源数量：维持安全状态&lt;/li&gt;
&lt;li&gt;增加进程数量：可能导致死锁，理由同上&lt;/li&gt;
&lt;li&gt;减少进程数量：维持安全状态，进程退出竞争必然使可用资源增加或保持不变&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个系统有四个相同类型的资源，它们被三个进程同时共享，每个进程最多需要两个资源。试证明这个系统不会发生死锁。（原书 7.6）&lt;ul&gt;
&lt;li&gt;假设系统发生死锁，则必然满足占有并等待和循环等待的条件。故每个进程都持有一个资源（若持有两个则已经满足要求，可以运行结束并释放），并且每个进程都在等待下一个资源。根据狄利克雷抽屉原理，四个资源分配给三个进程，必然有一个进程获得两个资源，这个进程必然可以执行完毕，然后释放持有的全部资源以使其它进程得以执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个系统有 m 个相同类型的资源，它们被 n 个进程同时共享。在每个时刻，进程只能至多申请或者释放一个资源。假设系统满足以下两个条件：每个进程所需的最大资源数量在 1~m 个之间、所有进程的最大资源需求数量之和小于 m+n 个，试证明这个系统不会发生死锁。（原书 7.7）&lt;ul&gt;
&lt;li&gt;解答 1：每个进程尚需的资源向量 &lt;code&gt;Need[i,] = Max[i,] - Allocation[i,]&lt;/code&gt;。假设存在死锁，则必有 &lt;code&gt;Σ(i = 1 to n) Allocation[i,] = m&lt;/code&gt; ，即所有资源都已经分配，没有资源空闲。&lt;/li&gt;
&lt;li&gt;因为进程所需的资源总和不超过 m+n·，故 &lt;code&gt;Σ Need[i,] + Σ Allocation[i,] = Σ Max[i,] &amp;lt; m + n&lt;/code&gt; ，和上式结合化简即为 &lt;code&gt;Σ Need[i,] &amp;lt; n&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;因为 n 个进程所需的资源总数小于 n，意味着至少有一个进程 P 还需要 0 个资源，所以进程 P 能够执行到结束。又每个进程所需的最大资源数量不少于 1 个，故 P 执行结束后会释放至少一个资源。因此系统不会产生死锁。&lt;/li&gt;
&lt;li&gt;解答 2：假设系统正在发生死锁，则当前状态下的 m 个资源已经全部被 n 个进程所占用，而这 n 个进程还需要更多的资源才能继续运行，也就是说每个进程还需要至少一个资源。因此，系统内 n 个进程正常运行所需要的资源总和大于或等于 m+n，与题意矛盾。故系统不可能发生死锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一座桥连接了南北两个村庄，两个村庄的居民可以从桥上通过，但桥上不能同时承载两个人（无论同方向还是相向，这里原题中只要求不能同时相向行走）。使用信号量保证死锁和饥饿都不会发生。（原书 7.16）&lt;ul&gt;
&lt;li&gt;注 1：如果将此题的限制改为两个方向的人依次行走，即南向北过桥后，下一次应当是北向南，则此问题等同于缓冲区大小为 1 的生产者-消费者问题。&lt;/li&gt;
&lt;li&gt;注 2：此题要求不会产生饥饿现象，则需要考虑两个方面，既要保证不能有一方一直持有过桥的权利，还要保证某一方过桥后，任何一方再次过桥不会依赖已过桥的居民影响（临界区问题的“发展”要求）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注 3：此题是原书课后习题，课后的 7.15 和 7.16 是递进关系。《&lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-15/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;信号量编程（下）&lt;/a&gt;》中北京大学 1992 年入学考试题（单向行驶问题）也与此题类似。我对该题又做了新的改动，本题的信号量解法以及改动后题目的相关分析均记录在 《&lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-16/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;互斥读者-读者问题&lt;/a&gt;》，如果你有兴趣，欢迎与我讨论改动后题目的解法&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;原书答案给出了管程解法，对其做了一定修改如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;monitor bridge &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num_waiting_north = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;   &lt;span class=&quot;comment&quot;&gt;// 北方村庄等待过桥人数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num_waiting_south = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;   &lt;span class=&quot;comment&quot;&gt;// 南方村庄等待过桥人数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; prev = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// prev 为 0 表示上一次上桥的人是北方居民，否则为南方居民&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; on_bridge = FALSE;      &lt;span class=&quot;comment&quot;&gt;// 桥上是否有人&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    condition ok_to_cross;       &lt;span class=&quot;comment&quot;&gt;// 条件变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enter_bridge_north&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;  &lt;span class=&quot;comment&quot;&gt;// 北方村庄居民试图过桥&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        num_waiting_north++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (on_bridge ||      &lt;span class=&quot;comment&quot;&gt;// 桥上有人&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;              (prev == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; num_waiting_south &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &lt;span class=&quot;comment&quot;&gt;// 或者上一次是北方居民过桥，且当前还有南方村庄居民在等待&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ok_to_cross.wait();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        num_waiting_north --;    &lt;span class=&quot;comment&quot;&gt;// 已上桥，北方村庄等待人数减少&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prev = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;enter_bridge_south&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        num_waiting_south ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (on_bridge ||&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               prev == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; num_waiting_north &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ok_to_cross.wait();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        num_waiting_south --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prev = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;exit_bridge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;         &lt;span class=&quot;comment&quot;&gt;// 南北居民离开后都调用此函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        on_bridge = FALSE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ok_to_cross.signal();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;简单信号量编程&quot;&gt;&lt;a href=&quot;#简单信号量编程&quot; class=&quot;headerlink&quot; title=&quot;简单信号量编程&quot;&gt;&lt;/a&gt;简单信号量编程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;此部分习题选自 2000 年左右各高校的研究生入学考试题，题目均比较简单。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;双车间零件装配&quot;&gt;&lt;a href=&quot;#双车间零件装配&quot; class=&quot;headerlink&quot; title=&quot;双车间零件装配&quot;&gt;&lt;/a&gt;双车间零件装配&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;某工厂有两个生产车间和一个装配车间，两个生产车间分别生产 A，B 两种零件，装配车间的任务是把 A，B 两种零件组装成产品。每个车间生产完一个零件后都要把零件送到装配车间的货架 F1、F2 上，F1 存放零件 A，F2 存放零件 B，两个货架均可分别容纳 10 个零件。装配工人每次从货架上取出一个 A 零件和一个 B 零件然后组装成产品。请用信号量进行正确管理。&lt;/li&gt;
&lt;li&gt;此问题是生产者-消费者问题的变形，可以认为一个消费者（装配工人）和两个生产者（A，B车间）互斥使用两个缓冲区（F1、F2）。令 &lt;code&gt;mutex1&lt;/code&gt; 和 &lt;code&gt;mutex2&lt;/code&gt; 这两个互斥信号量控制对缓冲区的互斥操作，另外还需要 &lt;code&gt;empty1&lt;/code&gt;、&lt;code&gt;empty2&lt;/code&gt;、&lt;code&gt;full1&lt;/code&gt;、&lt;code&gt;full2&lt;/code&gt; 用来同步。&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 车间 A&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(empty1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 生产零件 A 并放入 F1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(full);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 车间 B 和车间 A 对称&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 装配工人&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(full1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(full2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 取出零件 A 和 B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(empty1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(empty2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;和尚挑水问题&quot;&gt;&lt;a href=&quot;#和尚挑水问题&quot; class=&quot;headerlink&quot; title=&quot;和尚挑水问题&quot;&gt;&lt;/a&gt;和尚挑水问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;（北京邮电大学 1998 年）某寺庙有老、小和尚若干，仅有一个水缸和一个水井。小和尚负责将水从井中挑到缸中以供老和尚饮用。水缸可以容纳最多 10 桶水，水井口非常窄，每次只能容纳一个水桶取水。水桶总数有 3 各，每次小和尚挑水、倒入缸内只能使用一个桶，且不可以同时进行。请使用信号量给出从缸中取水和向缸中倒水的算法描述。&lt;/li&gt;
&lt;li&gt;分析：需要将问题分解为数个过程。从井中取水到向缸中倒水应该是一个连续的动作，算作一个进程；老和尚用桶从缸中取水算作一个进程。题中互斥资源包括水井和水缸，分别需要一个信号量来保证互斥。题中同步问题涉及水桶，抢不到水桶的进程需要等待，水缸满时小和尚需要等待，水缸空时老和尚需要等待，这需要生产者-消费者问题的经典信号量控制满和空。&lt;/li&gt;
&lt;li&gt;定义信号量如下：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mutex1 = mutex2 = 1&lt;/code&gt; ：水井和水缸两个资源各自的互斥访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty = 10&lt;/code&gt; ：初始水缸为空，可容纳至多 10 桶水&lt;/li&gt;
&lt;li&gt;&lt;code&gt;full = 0&lt;/code&gt; ：初始水缸为空&lt;/li&gt;
&lt;li&gt;&lt;code&gt;count = 3&lt;/code&gt; ：水桶数量为 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 小和尚&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(empty);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(count);   &lt;span class=&quot;comment&quot;&gt;// 争夺水桶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 从井中打水&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 倒水入水缸&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(count); &lt;span class=&quot;comment&quot;&gt;// 归还水桶&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(full);  &lt;span class=&quot;comment&quot;&gt;// 通知老和尚水缸有水&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 老和尚&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(full);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 从水缸中打水&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(count);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(empty);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;阅览室登记问题&quot;&gt;&lt;a href=&quot;#阅览室登记问题&quot; class=&quot;headerlink&quot; title=&quot;阅览室登记问题&quot;&gt;&lt;/a&gt;阅览室登记问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;（北方交通大学 1999 年）阅览室有 100 个座位，读者进入阅览室需要先在一张登记表上登记，每个座位有一个条目，读者离开阅览室需要注销自己的登记信息。请使用信号量描述同步算法。约定：&lt;ul&gt;
&lt;li&gt;语句 &lt;code&gt;I = getflag(0)&lt;/code&gt; 可以搜索到一个空座位 i，通过语句 &lt;code&gt;i.flag = 0 或 1&lt;/code&gt; 可以标识座位 i 为空闲（0）或者占用（1）；&lt;/li&gt;
&lt;li&gt;语句 &lt;code&gt;i = getname(readername)&lt;/code&gt; 可以搜索到读者登记的座位号 i，通过 &lt;code&gt;i.name = 0&lt;/code&gt; 可以将座位原本的读者姓名清除，通过 &lt;code&gt;i.name = readername&lt;/code&gt; 可以将读者名称关联到座位 i 上；&lt;/li&gt;
&lt;li&gt;计数信号量用 &lt;code&gt;count&lt;/code&gt;，互斥信号量用 &lt;code&gt;mutex&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分析：约定部分仅仅为代码编写提供一定现成的符号，问题中仅有读者一个对象，因此只需要考虑读者之间是等价的，只需要考虑一个读者的行为。读者进入阅览室应当先检查是否有空闲座位，若存在则登记否则离开。座位显然需要信号量 &lt;code&gt;count&lt;/code&gt; 控制。读者离去时需要注销登记信息并释放座位，无论何时对登记簿的修改都需要互斥，如题中约定使用 &lt;code&gt;mutex&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;代码如下，对原题做一定修改，使读者进入阅览室时如果人满则离开，因此需要一个 &lt;code&gt;int&lt;/code&gt; 型变量 &lt;code&gt;seats&lt;/code&gt; 记录空闲座位数量，而原本的 &lt;code&gt;count&lt;/code&gt; 同步信号量可以丢弃。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; seats = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 读者进程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 进入阅览室&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (seats &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;// 无空闲座位，离开阅览室&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    seats --;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i = getflag(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i.flag = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i.name = readername;    &lt;span class=&quot;comment&quot;&gt;// 获取空闲座位、登记&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 看书&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    seats ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i = getname(readername);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    i.flag = i.name = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;    &lt;span class=&quot;comment&quot;&gt;// 注销登录信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (TRUE);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-乘-100-米接力&quot;&gt;&lt;a href=&quot;#4-乘-100-米接力&quot; class=&quot;headerlink&quot; title=&quot;4 乘 100 米接力&quot;&gt;&lt;/a&gt;4 乘 100 米接力&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;用信号量描述 4 × 100 米接力问题。&lt;/li&gt;
&lt;li&gt;分析：四个选手之间需要保持链式同步关系，因此设置三个信号量分别表示第 i 棒选手和第 i-1 棒选手之间的同步（0 &amp;lt; i &amp;lt; 5）。&lt;/li&gt;
&lt;li&gt;代码如下&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;semaphore s1 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, s2 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, s3 = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第一棒起跑并前进 100 米&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;signal(s1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第二棒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wait(s1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第二棒起跑并前进 100 米&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第四棒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wait(s3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第四棒起跑并前进 100 米到达终点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;专栏目录：&lt;a href=&quot;http://blog.forec.cn/columns/cs-basic.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机理论基础&lt;/a&gt;&lt;br&gt;此专栏的上一篇文章：&lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-13/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统（十三）：I/O 输入系统&lt;/a&gt;&lt;br&gt;此专栏的下一篇文章：&lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-15/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统（专题）：信号量编程（下）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考资料：《操作系统概念 英文第七版》，恐龙书，英文名《Operating System Concepts》，作者 Abraham Silberschatz、Peter Baer Galvin、Greg Gagne&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-14/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-14/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2017/01/06/os-concepts-14/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此部分主要包括原书第六章（进程同步）和第七章（死锁）的部分习题（有些不属于考试范围），以及一些简单信号量编程习题（低于考试难度）的分析。这部分习题的解答均根据我个人理解编写或翻译， &lt;strong&gt;不保证提供的答案绝对正确或最优&lt;/strong&gt; 。稍微复杂一些的信号量编程在 《&lt;a href=&quot;http://blog.forec.cn/2017/01/08/os-concepts-15/&quot;&gt;信号量编程（下）&lt;/a&gt;》。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机理论基础" scheme="http://forec.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="OS" scheme="http://forec.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>操作系统（十三）：I/O 输入系统</title>
    <link href="http://forec.github.io/2017/01/06/os-concepts-13/"/>
    <id>http://forec.github.io/2017/01/06/os-concepts-13/</id>
    <published>2017-01-06T04:17:33.000Z</published>
    <updated>2017-01-11T14:27:00.661Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;整理《Operating System Concepts》 第七版第十三章 I/O 输入系统部分，内容均为原书和中文版翻译的摘录，其中原书摘录部分由我 &lt;strong&gt;按个人理解简化、翻译为中文，可能存在一些不准确之处&lt;/strong&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;注：整理只包含第 13 章内核 I/O 子系统之前的内容，考试涉及整章内容。&lt;/p&gt;
&lt;h1 id=&quot;I-O-硬件&quot;&gt;&lt;a href=&quot;#I-O-硬件&quot; class=&quot;headerlink&quot; title=&quot;I/O 硬件&quot;&gt;&lt;/a&gt;I/O 硬件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;设备驱动程序（device drivers）&lt;/strong&gt; 为 I/O 子系统提供了统一设备的访问接口。&lt;/li&gt;
&lt;li&gt;设备和计算机的通信通过 &lt;strong&gt;端口（port）&lt;/strong&gt; ，一组被一个/多个设备共同使用的线称为 &lt;strong&gt;总线（bus）&lt;/strong&gt; 。总线是一组线和一组严格定义的描述在线上传输信息的协议。 &lt;strong&gt;链环（daisy chaine）&lt;/strong&gt; 形容的是多个设备相连，最终设备通过端口连接到计算机上的模式。链环常常按总线方式工作，一个典型的 PC 总线结构如下图。&lt;br&gt;&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/typical-pc-bus.png&quot; width=&quot;500px&quot;&gt;&lt;/li&gt;
&lt;li&gt;上图中包含一个 &lt;strong&gt;PCI 总线&lt;/strong&gt; （最常用的 PC 系统总线）用于连接 CPU 和内存子系统/快速设备， &lt;strong&gt;扩展总线（expansion bus）&lt;/strong&gt; 用于连接串/并行端口和相对慢的设备（键盘）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;控制器（controller）&lt;/strong&gt; 是用来操作端口、总线或者设备的一组电子器件，它的复杂程度和传输协议有关，如串行端口控制器比较简单，而 SCSI 总线控制器常实现为一个和计算机相连的独立的 &lt;strong&gt;主机适配器（host adapter）&lt;/strong&gt; ，这个适配器会有处理器、微码以及一定的私有内存，从而能够处理 SCSI 协议信息。&lt;/li&gt;
&lt;li&gt;控制器有一个/多个用于数据和控制信号的寄存器， &lt;strong&gt;处理器通过读写这些寄存器来实现与控制器的通信&lt;/strong&gt; 。这种通信的可以通过特殊的 I/O 指令向指定的 I/O 端口地址传输一个字节/字，也可以通过 &lt;strong&gt;内存映射&lt;/strong&gt; I/O 模式（在 &lt;a href=&quot;http://blog.forec.cn/2017/01/04/os-concepts-9/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;虚拟内存&lt;/a&gt; 中介绍过），处理器能够通过标准数据传输指令完成对控制器的读写。部分系统同时采用这两种方式，例如图像控制器有 I/O 端口来完成基本控制操作，还有一个较大的内存映射区域来支持屏幕内容的接收和生成。&lt;/li&gt;
&lt;li&gt;I/O 端口通常有 4 种寄存器，寄存器通常为 1 ~ 4B：状态寄存器、控制寄存器、数据输入寄存器和数据输出寄存器。有的控制器有 FIFO 芯片从而可以保留多个输入/输出数据。上述四种寄存器的主要功能有：&lt;ul&gt;
&lt;li&gt;主机从 &lt;strong&gt;数据输入寄存器&lt;/strong&gt; 读出数据&lt;/li&gt;
&lt;li&gt;主机向 &lt;strong&gt;数据输出寄存器&lt;/strong&gt; 写入数据&lt;/li&gt;
&lt;li&gt;主机可从 &lt;strong&gt;状态寄存器&lt;/strong&gt; 读出设备当前的状态&lt;/li&gt;
&lt;li&gt;主机向 &lt;strong&gt;控制寄存器&lt;/strong&gt; 写入数据来发送命令、改变设备状态&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;轮询&quot;&gt;&lt;a href=&quot;#轮询&quot; class=&quot;headerlink&quot; title=&quot;轮询&quot;&gt;&lt;/a&gt;轮询&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;主机和控制器之间交互很复杂，但基本的 &lt;strong&gt;握手（handshaking）&lt;/strong&gt; 比较简单。假设控制器的状态寄存器中有一位用于说明设备当前是否在忙，控制器正忙时就将这一位置位。控制器的命令寄存器中有一位说明主机是否有任务准备就绪，当主机需要控制器执行某个操作时，需要将命令寄存器的这一位置位。主机和控制器交互输出一个字节时的握手流程如下：&lt;ol&gt;
&lt;li&gt;主机不断读取状态寄存器，直到状态寄存器中的 &lt;em&gt;忙位&lt;/em&gt; 为 0&lt;/li&gt;
&lt;li&gt;主机设置命令寄存器中的 &lt;em&gt;写位&lt;/em&gt; 并把一个字节写到数据输出寄存器&lt;/li&gt;
&lt;li&gt;主机设置命令寄存器中的 &lt;em&gt;就绪位&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;控制器注意到命令寄存器中的就绪位被置位，因此将状态寄存器中的 &lt;em&gt;忙位&lt;/em&gt; 置位&lt;/li&gt;
&lt;li&gt;控制器读取命令寄存器并发现 &lt;em&gt;写位&lt;/em&gt; 被置位，因此了解到需要执行一条写命令。它从数据输出寄存器读出一个字节，并向设备执行 I/O 操作&lt;/li&gt;
&lt;li&gt;控制器操作完成后将命令寄存器中的 &lt;em&gt;就绪位&lt;/em&gt; 清除，并清除状态寄存器中的 &lt;em&gt;故障位&lt;/em&gt; （这说明 I/O 设备成功完成任务），最后清除状态寄存器中的 &lt;em&gt;忙位&lt;/em&gt; 表示本次字节传输操作结束&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;在步骤 1 中主机将处于 &lt;strong&gt;忙等待（busy-waiting）&lt;/strong&gt; 或者 &lt;strong&gt;轮询（polling）&lt;/strong&gt; 状态。多数计算机体系只需要三个 CPU 指令周期就可以完成基本的轮询操作，但不断地重复轮询会浪费处理器资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;中断&quot;&gt;&lt;a href=&quot;#中断&quot; class=&quot;headerlink&quot; title=&quot;中断&quot;&gt;&lt;/a&gt;中断&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;中断（interrupt）&lt;/strong&gt; 是使外设通知 CPU 的硬件机制。CPU 硬件有一条 &lt;strong&gt;中断请求线（Interrupt-request line，IRL）&lt;/strong&gt; ，CPU 执行完每条指令都会检测 IRL 判断是否有控制器通过 IRL 发送了信号。如果有，CPU 会保存当前的状态并且跳转到 &lt;strong&gt;中断处理程序（interrupt-handler）&lt;/strong&gt; 。中断处理程序会判断中断原因、进行处理、恢复状态并执行中断返回指令使 CPU 返回中断之前的执行状态。整个流程大致为：&lt;ul&gt;
&lt;li&gt;设备控制器通过中断请求线 &lt;strong&gt;发送中断信号引起（raise）中断&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;CPU &lt;strong&gt;捕获（catch）中断并分发（dispatch）到中断处理程序&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;中断处理程序处理设备请求以 &lt;strong&gt;清除中断&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU 和 &lt;strong&gt;中断控制器（interrupt-controller）&lt;/strong&gt; 硬件提供了以下三个特性：&lt;ul&gt;
&lt;li&gt;在 CPU 执行关键指令时可以延迟对中断的处理&lt;/li&gt;
&lt;li&gt;能够将中断快速转发给适当的中断处理程序，而不必检查所有设备以确定是哪个设备引发了中断&lt;/li&gt;
&lt;li&gt;支持多级中断，可以根据紧迫性来响应中断&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;多数 CPU 有两个中断请求线： &lt;strong&gt;非屏蔽中断（nonmaskable）&lt;/strong&gt; 用于处理非常严重的，不可以恢复的内存错误等问题， &lt;strong&gt;可屏蔽中断（maskable）&lt;/strong&gt; 可被设备控制器用来请求服务，如果 CPU 正在执行关键、不可中断指令，则可以屏蔽这一类中断线上的请求。&lt;/li&gt;
&lt;li&gt;中断机制根据 &lt;strong&gt;中断向量（interrupt vector）&lt;/strong&gt; 来选择中断服务程序。中断向量和中断服务程序被维护在一张表中，中断向量支持的地址数量有限（例如 8 位中断向量只能对应 256 个中断服务程序，奔腾即为 256 个中断向量，0~31 用于各种错误等非屏蔽中断，剩下的为可屏蔽中断）， &lt;strong&gt;中断链接（interrupt chaining）&lt;/strong&gt; 可解决这个问题：中断向量指向的不再是单一的中断服务程序，而是一个中断服务程序的链表，中断一旦发生，对应链表中的全部中断处理程序都会一一调用，直到发现了能够处理请求的中断服务程序为止。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;中断优先级（interrupt priority）&lt;/strong&gt; 使 CPU 可以在不屏蔽所有中断的情况下延迟处理低优先级的中断，并且也允许高优先级的中断抢占低优先级的中断处理。&lt;/li&gt;
&lt;li&gt;现代操作系统启动时会探查硬件总线、确定哪些设备存在并将对应的中断处理程序安装到中断向量中。操作系统对于中断机制的应用非常广泛：&lt;ul&gt;
&lt;li&gt;设备控制器通过中断表明自己已经准备好服务&lt;/li&gt;
&lt;li&gt;通过中断机制处理例如被 0 除、违例内存访问等 &lt;strong&gt;异常（Exception）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;使用中断进行虚拟内存分页，页错误会引发中断异常，这个中断会挂起当前进程并跳转到内核的页错误处理程序&lt;/li&gt;
&lt;li&gt;程序执行系统调用会触发 &lt;strong&gt;软中断（software interrupt）&lt;/strong&gt; 或者 &lt;strong&gt;陷阱指令（trap）&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;直接内存访问&quot;&gt;&lt;a href=&quot;#直接内存访问&quot; class=&quot;headerlink&quot; title=&quot;直接内存访问&quot;&gt;&lt;/a&gt;直接内存访问&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用通用处理器不断监听设备控制器的寄存器并按字节传输（ &lt;strong&gt;程序控制 I/O&lt;/strong&gt; ，Programmed I/O，PIO）是对计算资源的非常过分的浪费。计算机为了避免 PIO 增加 CPU 负担，将一部分数据传输任务交付 &lt;strong&gt;直接内存访问（direct-memory access，DMA）&lt;/strong&gt; 控制器。&lt;/li&gt;
&lt;li&gt;开始 DMA 传输时，主机向内存写入 DMA 命令块，块中包含传输的源、目的地址指针以及传输的字节数。 &lt;strong&gt;CPU 将该命令块的地址写到 DMA 控制器中&lt;/strong&gt; 并继续其他工作，DMA 控制器会根据命令块直接操作内存总线完成传输（这段时间 CPU 无法使用总线）。传输完成后 DMA 控制器会中断 CPU 并交还给  CPU 总线控制权。&lt;/li&gt;
&lt;li&gt;DMA 和设备控制器之间的握手通过 &lt;strong&gt;DMA-request&lt;/strong&gt; 和 &lt;strong&gt;DMA-acknowledge&lt;/strong&gt; 线进行，设备有数据需要传输时，设备控制器就通过 DMA-request 线通知 DMA 控制器，DMA 控制器会发出申请中断 CPU，在从 CPU 获取所需要的地址后将地址放到内存地址总线上，并通过 DMA-acknowledge 线通知设备控制器。设备控制器收到这个信号，向内存地址总线上的地址写入数据。交互过程如下图。&lt;br&gt;&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/steps-dma-transfer.png&quot; width=&quot;500px&quot;&gt;&lt;/li&gt;
&lt;li&gt;DMA 控制总线传输期间 CPU 不能访问主存（仍可访问 L1、L2 缓存），这称为 &lt;strong&gt;周期挪用（cycle stealing）&lt;/strong&gt; ，会放慢 CPU 计算，但往往能够改善系统总体性能。有的 DMA 使用物理内存地址，有的使用虚拟内存地址（这时候需要有一个虚拟到物理地址的转换），使用虚拟内存地址的 DMA 称为 &lt;strong&gt;直接虚拟内存访问（direct virtual-memory access，DVMA）&lt;/strong&gt; 。DVMA 可以直接实现两个内存映射设备之间的传输而无需 CPU 干涉。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;I-O-应用接口及后面几节简单摘要&quot;&gt;&lt;a href=&quot;#I-O-应用接口及后面几节简单摘要&quot; class=&quot;headerlink&quot; title=&quot;I/O 应用接口及后面几节简单摘要&quot;&gt;&lt;/a&gt;I/O 应用接口及后面几节简单摘要&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;设备在很多方面有很大差异：&lt;ul&gt;
&lt;li&gt;字符流或块：字符流设备按字节传输，块设备以块为单位传输&lt;/li&gt;
&lt;li&gt;顺序访问或随机访问&lt;/li&gt;
&lt;li&gt;同步或异步：同步设备按照一定响应时间进行数据传输，异步设备则呈现无规则/不可预测的响应时间&lt;/li&gt;
&lt;li&gt;共享或专用：共享设备可以被多个进程/线程并发使用，专用设备则不可以&lt;/li&gt;
&lt;li&gt;操作速度：设备速度不同&lt;/li&gt;
&lt;li&gt;读写/只读/只写：设备支持的数据传输方向不同&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;块设备（block-device）&lt;/strong&gt; 接口规定了访问磁盘驱动器以及其它块设备所需的各个方面。操作系统本身和特殊的应用程序（如数据库）倾向于将块设备当作简单的线性块数组访问，这种访问方式称为 &lt;strong&gt;原始（raw） I/O&lt;/strong&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;阻塞和非阻塞 I/O&lt;/strong&gt; ：&lt;ul&gt;
&lt;li&gt;应用程序发出 &lt;strong&gt;阻塞（blocking） I/O&lt;/strong&gt; 类型的系统调用时，应用程序就会被挂起，移动到进程等待队列中。因为阻塞式的 I/O 容易理解，并且 I/O 设备执行所需的时间是异步的，执行时间不可预估，因此绝大多数操作系统给应用程序预留的接口都是阻塞系统调用。&lt;/li&gt;
&lt;li&gt;有的用户级进程需要 &lt;strong&gt;非阻塞（nonblocking） I/O&lt;/strong&gt; ，例如用户接口，它用来接收键盘/鼠标输入，同时还要在屏幕回显。又或者视频应用程序，它需要从磁盘读取帧并解码到显示器上。非阻塞 I/O 通常使用多线程实现，有的线程执行阻塞系统调用，其他线程继续执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异步系统调用（asynchronous system call）&lt;/strong&gt; 不必等待 I/O 完成就可以立刻返回，应用程序继续执行。I/O 完成时会通知应用程序，比如设置程序空间里某个变量，或者触发信号/软件中断等。&lt;br&gt;&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/two-io-methods.png&quot; width=&quot;400px&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓冲区（buffer）&lt;/strong&gt; 是用来保存两个设备之间或者设备和应用程序之间传输数据的内存区域。采用缓冲的理由有：&lt;ul&gt;
&lt;li&gt;处理数据流的生产者与消费者之间的速度差异&lt;/li&gt;
&lt;li&gt;协调传输数据大小不一致的设备&lt;/li&gt;
&lt;li&gt;支持程序 I/O 的复制语义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O 内核子系统&lt;/strong&gt; （kernel’s I/O subsystem）提供了很多和 I/O 有关的服务，包括：&lt;ul&gt;
&lt;li&gt;调度（scheduling）&lt;/li&gt;
&lt;li&gt;缓冲（buffering）&lt;/li&gt;
&lt;li&gt;高速缓存（caching）&lt;/li&gt;
&lt;li&gt;假脱机（spooling）&lt;/li&gt;
&lt;li&gt;设备预留（device reservation）&lt;/li&gt;
&lt;li&gt;错误处理（error handling）&lt;/li&gt;
&lt;li&gt;名称转换（name translation）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;专栏目录：&lt;a href=&quot;http://blog.forec.cn/columns/cs-basic.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;计算机理论基础&lt;/a&gt;&lt;br&gt;此专栏的上一篇文章：&lt;a href=&quot;http://blog.forec.cn/2017/01/05/os-concepts-12/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统（十二）：大容量存储器结构&lt;/a&gt;&lt;br&gt;此专栏的下一篇文章：&lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-14/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;操作系统（专题）：信号量编程&lt;/a&gt;    &lt;/p&gt;
&lt;p&gt;参考资料：《操作系统概念 英文第七版》，恐龙书，英文名《Operating System Concepts》，作者 Abraham Silberschatz、Peter Baer Galvin、Greg Gagne&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-13/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;http://blog.forec.cn/2017/01/06/os-concepts-13/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.forec.cn/2017/01/06/os-concepts-13/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;http://forec.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理《Operating System Concepts》 第七版第十三章 I/O 输入系统部分，内容均为原书和中文版翻译的摘录，其中原书摘录部分由我 &lt;strong&gt;按个人理解简化、翻译为中文，可能存在一些不准确之处&lt;/strong&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算机理论基础" scheme="http://forec.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="OS" scheme="http://forec.github.io/tags/OS/"/>
    
  </entry>
  
</feed>
