<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Forec&#39;s Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://forec.github.io/"/>
  <updated>2016-10-04T09:53:37.172Z</updated>
  <id>http://forec.github.io/</id>
  
  <author>
    <name>Forec</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Network Mining Based On Co-occurrence</title>
    <link href="http://forec.github.io/2016/10/03/co-occurrence-structure-capture/"/>
    <id>http://forec.github.io/2016/10/03/co-occurrence-structure-capture/</id>
    <published>2016-10-03T14:16:16.000Z</published>
    <updated>2016-10-04T09:53:37.172Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Generate network based on co-occurrence was proposed several decades ago, however, it still occupies most of papers talking about network discovering. Here I want to give a simple introduction for network capture by conventional co-occurrence methods. The following contents are slightly related with the basis of my current work, they are out of date but still useful sometimes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;General-Introduction&quot;&gt;&lt;a href=&quot;#General-Introduction&quot; class=&quot;headerlink&quot; title=&quot;General Introduction&quot;&gt;&lt;/a&gt;General Introduction&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;This article is just an introduction for several methods capturing useful structured data from unstructured data sets. It only talks about the basic implementation of co-occurrence in text data. After reading this short article, you will know how to generate a graph as follows from a paragraph of text, a set of Internet data captured from spiders or even a video.&lt;/li&gt;
&lt;li&gt;An example, the following picture is generated from a part of the script of 《Train to Busan》. I copied the script from Internet, and it’s easy to be analyzed by code. The picture was cut a little part when I published it.&lt;br&gt;&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/train-to-fusan.svg&quot; width=&quot;400px&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Entity-Identification&quot;&gt;&lt;a href=&quot;#Entity-Identification&quot; class=&quot;headerlink&quot; title=&quot;Entity Identification&quot;&gt;&lt;/a&gt;Entity Identification&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;A network is composed of a set of nodes and a set of edges. We name the set of nodes &lt;code&gt;V&lt;/code&gt;, and edges &lt;code&gt;E&lt;/code&gt;. The first problem we face is where can we get &lt;code&gt;V&lt;/code&gt;. Entity identification needs to be considered here. &lt;/li&gt;
&lt;li&gt;Some simple methods such as regress( for binary classification ), SVM can be used if you know the characteristics for nodes. However, in most conditions we even can’t describe what the nodes exactly like. In these conditions, deep learning algorithms such as Convolutional Neural Network could be considered. You can give some nodes you already know, then ask your model to learn what the nodes like. That may be a little complex, so we left them behind. Here we just consider the best condition.&lt;/li&gt;
&lt;li&gt;Here we make a hypothesis, you already have the set of all the nodes. That means, you have the &lt;code&gt;V&lt;/code&gt; and the data set, what you need to do is just generating a network for the &lt;code&gt;V&lt;/code&gt; from the given data set. Sounds simple? However this is indeed the case. In some few cases, for example, generating network from a movie like the example above, very few main entities appear in a movie, so we can get their identifications (here is name) from web or just make them yourself. &lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Relationship-Identification&quot;&gt;&lt;a href=&quot;#Relationship-Identification&quot; class=&quot;headerlink&quot; title=&quot;Relationship Identification&quot;&gt;&lt;/a&gt;Relationship Identification&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Here we come across the second question, how to get &lt;code&gt;E&lt;/code&gt;? I will only introduce one simple method here, that’s what I metioned  above, the conventional co-occurrence method. I will introduce some more methods after my current job finished. &lt;/li&gt;
&lt;li&gt;The co-occurrence network, is just like what its name suggests, use the information that two entities occurred together. For example, in my analysis for 《Train to Busan》, I simply build an edge for two nodes if they occur in a same paragraph. If there always been an edge for two nodes, the weight of that edge will be increased. Once the data set is big enough, the main line of the data set will appear. You can choose building directed edges or undirected edges, and choose complete graph or not.&lt;/li&gt;
&lt;li&gt;The co-occurrence network is only useful for data sets that have obvious centralization, edges with low weight are always redundant. Also, many nodes will have no sense of presence because they are just playing samll roles. The co-occurrence will make every node connect with the center node, that’s unreasonable. Since we just introduce the very simple condition here, I will present two common ways for reducing the redundancy ans fixing the network.&lt;/li&gt;
&lt;li&gt;The first way is filter. Easy to understand, just filter out those edges with low weight. The threshold can be adjusted manually or learned by specific models.&lt;/li&gt;
&lt;li&gt;The second way is segmenting your network. This needs clustering first, and find the community centers. Cut these edges connecting with center nodes but has low weights. The effect is hard to be estimated according to what your network structure likes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Applicable-Scope&quot;&gt;&lt;a href=&quot;#Applicable-Scope&quot; class=&quot;headerlink&quot; title=&quot;Applicable Scope&quot;&gt;&lt;/a&gt;Applicable Scope&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Many fields can be applied with co-occurrence method. For example, capturing people relationships from videos, recodings, pictures, etc. I will show how to generate a network from a video later. That will cost a long time since many frame needs to be considered, which is a very time-consuming job.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I hope this article could give you some help. If this article has any error, or you have some problems/suggestions, please &lt;a href=&quot;mailto:forec@bupt.edu.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;e-mail me&lt;/a&gt;. I am glad to learn from each other.&lt;/p&gt;
&lt;p&gt;Related Data Download Link： &lt;a href=&quot;http://7xktmz.com1.z0.glb.clouddn.com/Train%20to%20Busan.txt&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Script for 《Train to Busan》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/10/03/co-occurrence-structure-capture/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/10/03/co-occurrence-structure-capture/&quot;&gt;https://forec.github.io/2016/10/03/co-occurrence-structure-capture/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Generate network based on co-occurrence was proposed several decades ago, however, it still occupies most of papers talking about network discovering. Here I want to give a simple introduction for network capture by conventional co-occurrence methods. The following contents are slightly related with the basis of my current work, they are out of date but still useful sometimes.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://forec.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Algorithms" scheme="http://forec.github.io/tags/Algorithms/"/>
    
      <category term="图分割" scheme="http://forec.github.io/tags/%E5%9B%BE%E5%88%86%E5%89%B2/"/>
    
      <category term="机器学习" scheme="http://forec.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Cantor Expansion With Duplicate Elements</title>
    <link href="http://forec.github.io/2016/09/27/duplicate-cantor/"/>
    <id>http://forec.github.io/2016/09/27/duplicate-cantor/</id>
    <published>2016-09-27T14:34:03.000Z</published>
    <updated>2016-10-03T15:53:05.076Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Cantor Expansion is simple, however, for permutations with duplicate elements, some factors are changed.&lt;br&gt;&lt;strong&gt;For why I use English&lt;/strong&gt;: Since I am going to write an English paper, I want to write several articles in English here for practice. Please forgive me for any inconvenience I may have caused to you.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;Basic-Cantor-Expansion&quot;&gt;&lt;a href=&quot;#Basic-Cantor-Expansion&quot; class=&quot;headerlink&quot; title=&quot;Basic Cantor Expansion&quot;&gt;&lt;/a&gt;Basic Cantor Expansion&lt;/h1&gt;&lt;h2 id=&quot;Cantor-Expansion&quot;&gt;&lt;a href=&quot;#Cantor-Expansion&quot; class=&quot;headerlink&quot; title=&quot;Cantor Expansion&quot;&gt;&lt;/a&gt;Cantor Expansion&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A permutation without duplicate elements can have a mapping with a sequence [1..n], for example, think about &lt;code&gt;2134&lt;/code&gt;, a permutation of {1, 2, 3, 4}. To calculate the position of &lt;code&gt;2134&lt;/code&gt; in all permutations of {1, 2, 3, 4}, we can follow the steps: &lt;code&gt;Pos = 1 * 3! + 0 * 2! + 0 * 1! = 6&lt;/code&gt;. The explanation is, since there’s only one element &lt;code&gt;1&lt;/code&gt; in elements behind &lt;code&gt;2&lt;/code&gt; and smaller than &lt;code&gt;2&lt;/code&gt;, if we swap &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;, there will be &lt;code&gt;3!&lt;/code&gt; permutations smaller than &lt;code&gt;2134&lt;/code&gt;. Similiar to this, no elements smaller than &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;4&lt;/code&gt;. So the related number with &lt;code&gt;2134&lt;/code&gt; is 6. In &lt;code&gt;C++&lt;/code&gt;, we can define a function named &lt;code&gt;perm2num&lt;/code&gt;, generate the position of a given permutation.&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* n is the number of elements, p is the set of elements */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;perm2num&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, add = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = n - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt; n; j++)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( p[j] &amp;lt; p[i] ) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                num += add;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        add *= (n - i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Cantor-Inverse&quot;&gt;&lt;a href=&quot;#Cantor-Inverse&quot; class=&quot;headerlink&quot; title=&quot;Cantor Inverse&quot;&gt;&lt;/a&gt;Cantor Inverse&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;To generate a permutation from the position it stays in, we can follow a reverse of the upper step. The &lt;code&gt;C++&lt;/code&gt; code is just the reverse operation of &lt;code&gt;perm2num&lt;/code&gt;.  &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;num2perm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *p, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        p[i] = num % ( n - i );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        num /= (n - i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j--)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( p[j] &amp;lt;= p[i] ) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                p[i]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;With-Duplicate-Elements&quot;&gt;&lt;a href=&quot;#With-Duplicate-Elements&quot; class=&quot;headerlink&quot; title=&quot;With Duplicate Elements&quot;&gt;&lt;/a&gt;With Duplicate Elements&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;To generate the position of a permutation with duplicate elements, two factors influenced. &lt;strong&gt;First&lt;/strong&gt;, when calculate the possible increase for element &lt;code&gt;p[i]&lt;/code&gt;, in basic cantor expansion, we need to find how many elements are smaller than &lt;code&gt;p[i]&lt;/code&gt; and behind &lt;code&gt;p[i]&lt;/code&gt;, and multiply this number with &lt;code&gt;(n - i)!&lt;/code&gt;. Now, we need to divide this by the product of some factorials, which are how many elements are duplicate behind &lt;code&gt;p[i]&lt;/code&gt;. For example, &lt;code&gt;BABA&lt;/code&gt;, to calculate the increase for first B, 2 elements, both are A, are smaller than B. In basic Cantor Expansion, it should be &lt;code&gt;2 * 3!&lt;/code&gt;, now we need to divide it by &lt;code&gt;2! * 1!&lt;/code&gt;. The &lt;code&gt;2!&lt;/code&gt; is from 2 B after swapping, and &lt;code&gt;1!&lt;/code&gt; if from one A after swapping. &lt;strong&gt;Second&lt;/strong&gt;, if one element &lt;code&gt;y&lt;/code&gt; has been used in calculating an increase for element &lt;code&gt;p[i]&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; should only be counted once. For example, &lt;code&gt;BABA&lt;/code&gt; only adds &lt;code&gt;2 * 3! / 2!&lt;/code&gt; once.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I want to recommand a website &lt;a href=&quot;https://www.codewars.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.codewars.com&lt;/a&gt; here. My username in that website is Forec, you can find me &lt;a href=&quot;https://www.codewars.com/users/Forec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;. I was inspired by one kata in that website, and that reminds me of cantor expansion. You can find the kata &lt;a href=&quot;https://www.codewars.com/kata/alphabetic-anagrams/haskell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;. I didn’t find any articles talking about duplicate condition. I wish this can help you.&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/09/27/duplicate-cantor/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/09/27/duplicate-cantor/&quot;&gt;https://forec.github.io/2016/09/27/duplicate-cantor/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Cantor Expansion is simple, however, for permutations with duplicate elements, some factors are changed.&lt;br&gt;&lt;strong&gt;For why I use English&lt;/strong&gt;: Since I am going to write an English paper, I want to write several articles in English here for practice. Please forgive me for any inconvenience I may have caused to you.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Code" scheme="http://forec.github.io/categories/Code/"/>
    
    
      <category term="Algorithms" scheme="http://forec.github.io/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Qt msvc2013 问题解决方案</title>
    <link href="http://forec.github.io/2016/09/14/tips-for-qt/"/>
    <id>http://forec.github.io/2016/09/14/tips-for-qt/</id>
    <published>2016-09-14T02:36:35.000Z</published>
    <updated>2016-10-03T15:34:06.592Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;编写 &lt;a href=&quot;https://github.com/Forec/light-applications/tree/master/remote-control&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Remote-Control&lt;/a&gt; 的客户端代码，界面用Qt绘制，记录出现的问题及解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;MSVC的Release问题&quot;&gt;&lt;a href=&quot;#MSVC的Release问题&quot; class=&quot;headerlink&quot; title=&quot;MSVC的Release问题&quot;&gt;&lt;/a&gt;MSVC的Release问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用Qt版本5.6.0， msvc2013。Release后缺少动态链接库。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;msvc2013&lt;/code&gt; 的 &lt;code&gt;bin&lt;/code&gt; 目录下没有 &lt;code&gt;mingwm10.dll&lt;/code&gt;、&lt;code&gt;libgcc_s_dw2-1.dll&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;main()&lt;/code&gt; 函数顶部添加 &lt;code&gt;QCoreApplication::addLibraryPath(&amp;quot;./&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将release出的 &lt;code&gt;app.exe&lt;/code&gt; 拷贝到部署文件夹，&lt;code&gt;path_to_msvc2013\bin\windeployqt.exe app.exe&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;可能仍出现 &lt;code&gt;无法定位动态链接库 Qt5Widgets.dll&lt;/code&gt;。环境变量中有 &lt;code&gt;MikTex&lt;/code&gt; 的路径，该路径下包含 &lt;code&gt;Qt5Widgets.dll&lt;/code&gt;， 将 &lt;code&gt;msvc2013&lt;/code&gt; 在环境变量中的位置调整高于 &lt;code&gt;MikTex&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;或在部署文件夹下新建 &lt;code&gt;qt.conf&lt;/code&gt;，指定 &lt;code&gt;Library&lt;/code&gt; 加载目录。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;部署程序图标&quot;&gt;&lt;a href=&quot;#部署程序图标&quot; class=&quot;headerlink&quot; title=&quot;部署程序图标&quot;&gt;&lt;/a&gt;部署程序图标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;程序图标 &lt;code&gt;icon.ico&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在工程目录下 （与&lt;code&gt;project.pro&lt;/code&gt;同目录）新建 &lt;code&gt;icon.rc&lt;/code&gt;，添加 &lt;code&gt;IDI_ICON1  ICON   DISCARDABLE   &amp;quot;icon.ico&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;project.pro&lt;/code&gt; 中添加 &lt;code&gt;RC_FILE = icon.rc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;release可执行文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;宽字符转换&quot;&gt;&lt;a href=&quot;#宽字符转换&quot; class=&quot;headerlink&quot; title=&quot;宽字符转换&quot;&gt;&lt;/a&gt;宽字符转换&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;执行 &lt;code&gt;ShellExecute()&lt;/code&gt; 函数时，参数 3 需要宽字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ShellExecute(NULL, L&amp;quot;open&amp;quot;, open_file_path, NULL , NULL, SW_SHOWNORMAL);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编写函数 &lt;code&gt;string2LPCWSTR&lt;/code&gt; 将 &lt;code&gt;std::string&lt;/code&gt; 转为 &lt;code&gt;LPCWSTR&lt;/code&gt;。&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; LPCWSTR &lt;span class=&quot;title&quot;&gt;stringToLPCWSTR&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;::&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; src)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; srcsize = src.length() + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; convertedChars = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt; *wcstring = (&lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt;)*(src.length()-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mbstowcs_s(&amp;amp;convertedChars, wcstring, srcsize, src.c_str(), _TRUNCATE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wcstring;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Qt下UTF8和GBK的转换&quot;&gt;&lt;a href=&quot;#Qt下UTF8和GBK的转换&quot; class=&quot;headerlink&quot; title=&quot;Qt下UTF8和GBK的转换&quot;&gt;&lt;/a&gt;Qt下UTF8和GBK的转换&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;UTF82GBK&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; QString &lt;span class=&quot;title&quot;&gt;UTF82GBK&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; QString &amp;amp;inStr)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QTextCodec *gbk = QTextCodec::codecForName(&lt;span class=&quot;string&quot;&gt;&quot;GB18030&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QString u2g = gbk-&amp;gt;toUnicode(inStr.toLocal8Bit());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; u2g;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GBK2UTF8&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;inline&lt;/span&gt; QString &lt;span class=&quot;title&quot;&gt;GBK2UTF8&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; QString &amp;amp;inStr)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QTextCodec *gbk = QTextCodec::codecForName(&lt;span class=&quot;string&quot;&gt;&quot;GB18030&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    QString g2u = gbk-&amp;gt;toUnicode(gbk-&amp;gt;fromUnicode(inStr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; g2u;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Qt下线程和ui组件处理&quot;&gt;&lt;a href=&quot;#Qt下线程和ui组件处理&quot; class=&quot;headerlink&quot; title=&quot;Qt下线程和ui组件处理&quot;&gt;&lt;/a&gt;Qt下线程和ui组件处理&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;编写线程子函数 &lt;code&gt;unsigned int __stdcall refreshThread(void* pM)&lt;/code&gt;，试图在子线程中修改ui组件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;handle = (HANDLE)_beginthreadex(NULL, 0, refreshThread, (void *)(&amp;amp;actives[i]), 0,NULL );&lt;/code&gt; 参数 3 不能是非静态成员函数&lt;/li&gt;
&lt;li&gt;Qt中只有 &lt;code&gt;QApplication.exec()&lt;/code&gt; 主线程能对界面元素进行控制&lt;/li&gt;
&lt;li&gt;利用 &lt;code&gt;signal/slot&lt;/code&gt;，在线程中创建一个 &lt;code&gt;signal&lt;/code&gt;，在主线程中创建一个 &lt;code&gt;slot&lt;/code&gt;。当线程修改界面时，发送 &lt;code&gt;signal&lt;/code&gt; 通知主线程响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Qt的Sql操作&quot;&gt;&lt;a href=&quot;#Qt的Sql操作&quot; class=&quot;headerlink&quot; title=&quot;Qt的Sql操作&quot;&gt;&lt;/a&gt;Qt的Sql操作&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;QSqlDatabase db = QSqlDatabase::addDatabase(&amp;quot;QSQLITE&amp;quot;);&lt;/code&gt; 添加 sqlite，可添加第二个参数指定当前连接名称，未指定该参数则为默认连接&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db.setDatabaseName(&amp;quot;data.db&amp;quot;);&lt;/code&gt; 指定数据库文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query = QSqlQuery(db);&lt;/code&gt; 创建查询&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query.exec(&amp;quot;&amp;quot;);&lt;/code&gt; 执行sql语句&lt;/li&gt;
&lt;li&gt;添加多个数据库时，&lt;code&gt;addDatabase&lt;/code&gt;必须指定不同的连接名称，否则会覆盖默认连接或重名连接引发错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Socket通信频率问题&quot;&gt;&lt;a href=&quot;#Socket通信频率问题&quot; class=&quot;headerlink&quot; title=&quot;Socket通信频率问题&quot;&gt;&lt;/a&gt;Socket通信频率问题&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;使用同一个 &lt;code&gt;buf&lt;/code&gt; 作为发送方的缓冲，当 &lt;code&gt;buf&lt;/code&gt;长度过大，超过 &lt;code&gt;Socket&lt;/code&gt;默认缓冲长度时，如果发送频率过快，socket的拆分发送将使 &lt;code&gt;buf&lt;/code&gt; 同时读写，接收方将收到垃圾数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;send&lt;/code&gt; 返回实际写入的字节数，检查发送的数目并移动缓冲窗口，结尾判断可以用字节填充。&lt;/li&gt;
&lt;li&gt;或缩小 &lt;code&gt;buf&lt;/code&gt; 长度，但网络情况差的时候仍会写入垃圾数据，只是垃圾数据较少。传输二进制文件将因为垃圾数据的存在而无效。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;一些组件的tips&quot;&gt;&lt;a href=&quot;#一些组件的tips&quot; class=&quot;headerlink&quot; title=&quot;一些组件的tips&quot;&gt;&lt;/a&gt;一些组件的tips&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;添加 &lt;code&gt;QTableWidget&lt;/code&gt; 右键菜单&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ui-&amp;gt;tableWidget-&amp;gt;setContextMenuPolicy(Qt::CustomContextMenu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;popMenu = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; QMenu(ui-&amp;gt;tableWidget);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;action = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; QAction(&lt;span class=&quot;string&quot;&gt;&quot;connect&quot;&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; MainWindow::on_tableWidget_customContextMenuRequested(&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; QPoint &amp;amp;pos)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    popMenu-&amp;gt;clear();    &lt;span class=&quot;comment&quot;&gt;// popMenu for QTableWidget&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    popMenu-&amp;gt;addAction(action);    &lt;span class=&quot;comment&quot;&gt;// action for connect&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    popMenu-&amp;gt;exec(QCursor::pos());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;滚动条位置设置&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;QTextEdit *edit = ui-&amp;gt;textEdit;        &lt;span class=&quot;comment&quot;&gt;// example for QTextEdit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;QScrollBar *sb = edit-&amp;gt;verticalScrollBar();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sb-&amp;gt;setValue(sb-&amp;gt;maximumHeight());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Qt正则&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;QString &lt;span class=&quot;title&quot;&gt;IPv4pattern&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)&amp;#123;3&amp;#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;QRegExp &lt;span class=&quot;title&quot;&gt;IPv4rx&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(IPv4pattern)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (IPv4rx.exactMatch(&lt;span class=&quot;string&quot;&gt;&quot;8.8.8.8&quot;&lt;/span&gt;))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// example for IPv4 address check&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/ei__nino/article/details/7305024&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Qt图标修改&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/21268558/application-failed-to-start-because-it-could-not-find-or-load-the-qt-platform-pl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Qt Windows部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/abeldeng/article/details/24767245&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Qt 多个数据库文件操作&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/09/14/tips-for-qt/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/09/14/tips-for-qt/&quot;&gt;https://forec.github.io/2016/09/14/tips-for-qt/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;编写 &lt;a href=&quot;https://github.com/Forec/light-applications/tree/master/remote-control&quot;&gt;Remote-Control&lt;/a&gt; 的客户端代码，界面用Qt绘制，记录出现的问题及解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="OS" scheme="http://forec.github.io/categories/OS/"/>
    
    
      <category term="Mistakes" scheme="http://forec.github.io/tags/Mistakes/"/>
    
      <category term="OS" scheme="http://forec.github.io/tags/OS/"/>
    
      <category term="Qt" scheme="http://forec.github.io/tags/Qt/"/>
    
      <category term="字符编码" scheme="http://forec.github.io/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
      <category term="线程" scheme="http://forec.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Docker配置策略备忘</title>
    <link href="http://forec.github.io/2016/09/09/docker-problems/"/>
    <id>http://forec.github.io/2016/09/09/docker-problems/</id>
    <published>2016-09-08T16:33:36.000Z</published>
    <updated>2016-10-03T15:34:00.445Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;整理Docker的配置，以及遇到问题的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Docker更新Ubuntu被墙&quot;&gt;&lt;a href=&quot;#Docker更新Ubuntu被墙&quot; class=&quot;headerlink&quot; title=&quot;Docker更新Ubuntu被墙&quot;&gt;&lt;/a&gt;Docker更新Ubuntu被墙&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;把&lt;code&gt;/etc/apt/sources.list&lt;/code&gt;中的 &lt;code&gt;http://archive.ubuntu.com&lt;/code&gt; 全部替换为 &lt;code&gt;http://mirrors.ustc.edu.cn&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编辑Dockfile文件，添加以下语句更新image resp中的Ubuntu，替换源为中科大镜像。&lt;/p&gt;
&lt;figure class=&quot;highlight dockerfile&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;FROM&lt;/span&gt; resp:latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;cp /etc/apt/sources.list /etc/apt/sources.list.bak&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;sudo sed -i &lt;span class=&quot;string&quot;&gt;&#39;s/archive.ubuntu.com/mirrors.ustc.edu.cn/g&#39;&lt;/span&gt; /etc/apt/sources.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;cat /etc/apt/sources.list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;apt-get clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;built_in&quot;&gt;RUN&lt;/span&gt; &lt;span class=&quot;bash&quot;&gt;apt-get -y update --fix-missing &amp;amp;&amp;amp; apt-get install -y ******(apps you want to install)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行&lt;code&gt;docker build -t newresp .&lt;/code&gt;安装新功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;设置Docker镜像&quot;&gt;&lt;a href=&quot;#设置Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;设置Docker镜像&quot;&gt;&lt;/a&gt;设置Docker镜像&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;新版的 &lt;code&gt;Docker&lt;/code&gt; 使用 &lt;code&gt;/etc/docker/daemon.json（Linux）&lt;/code&gt; 或者 &lt;code&gt;%programdata%\docker\config\daemon.json（Windows）&lt;/code&gt; 来配置 Daemon。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在该配置文件中加入（没有该文件，先建一个）：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;&lt;span class=&quot;attribute&quot;&gt;registry-mirrors&lt;/span&gt;&quot;: &lt;span class=&quot;value&quot;&gt;[&lt;span class=&quot;string&quot;&gt;&quot;https://docker.mirrors.ustc.edu.cn&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Windows下更改Docker的虚拟机、镜像位置&quot;&gt;&lt;a href=&quot;#Windows下更改Docker的虚拟机、镜像位置&quot; class=&quot;headerlink&quot; title=&quot;Windows下更改Docker的虚拟机、镜像位置&quot;&gt;&lt;/a&gt;Windows下更改Docker的虚拟机、镜像位置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;设置环境变量 &lt;code&gt;MACHINE_STORAGE_PATH&lt;/code&gt; 为要存储所有 &lt;code&gt;docker&lt;/code&gt; 文件的位置。&lt;/li&gt;
&lt;li&gt;如尚未安装 &lt;code&gt;docker&lt;/code&gt;，安装即更改默认位置。&lt;/li&gt;
&lt;li&gt;如已安装 &lt;code&gt;docker&lt;/code&gt;，在&lt;code&gt;bash&lt;/code&gt;窗口中&lt;code&gt;docker-machine ls&lt;/code&gt;查看已有的&lt;code&gt;docker&lt;/code&gt;虚拟机，&lt;code&gt;docker-machine create --driver=virtualbox newDockerName&lt;/code&gt;即可新建一个虚拟机，新建后可&lt;code&gt;docker-machine rm default&lt;/code&gt;删除原有的默认虚拟机，并在新位置新建一个名为&lt;code&gt;default&lt;/code&gt;的虚拟机。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker-machine regenerate-certs default&lt;/code&gt;重新生成证书。&lt;/li&gt;
&lt;li&gt;重新执行&lt;code&gt;Docker Quick Terminal&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;精简版Ubuntu待安装软件列表&quot;&gt;&lt;a href=&quot;#精简版Ubuntu待安装软件列表&quot; class=&quot;headerlink&quot; title=&quot;精简版Ubuntu待安装软件列表&quot;&gt;&lt;/a&gt;精简版Ubuntu待安装软件列表&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ping&lt;/strong&gt;: inetutils-ping&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ifconfig&lt;/strong&gt;: net-tools&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lug.ustc.edu.cn/wiki/mirrors/help/docker&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker镜像使用帮助&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lug.ustc.edu.cn/wiki/mirrors/help/ubuntu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ubuntu镜像使用帮助&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.linuxdiyf.com/linux/22199.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker下Ubuntu Update错误&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/33933107/change-docker-machine-location-windows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Windows下修改Docker Images位置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/09/09/docker-problems/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/09/09/docker-problems/&quot;&gt;https://forec.github.io/2016/09/09/docker-problems/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理Docker的配置，以及遇到问题的解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Docker" scheme="http://forec.github.io/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://forec.github.io/tags/Docker/"/>
    
      <category term="Mistakes" scheme="http://forec.github.io/tags/Mistakes/"/>
    
  </entry>
  
  <entry>
    <title>Golang的通道技巧</title>
    <link href="http://forec.github.io/2016/09/08/gochan-accumulate/"/>
    <id>http://forec.github.io/2016/09/08/gochan-accumulate/</id>
    <published>2016-09-08T02:33:31.000Z</published>
    <updated>2016-10-03T15:34:24.046Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;整理近期遇到的Golang中通道和协程的技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;计时器及系统负荷均衡&quot;&gt;&lt;a href=&quot;#计时器及系统负荷均衡&quot; class=&quot;headerlink&quot; title=&quot;计时器及系统负荷均衡&quot;&gt;&lt;/a&gt;计时器及系统负荷均衡&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;time&lt;/code&gt; 包中的 &lt;code&gt;time.Ticker&lt;/code&gt; 结构体，该对象以指定的时间间隔重复向结构体中的通道C发送时间值，通道C对用户只读，该对象可通过工厂函数 &lt;code&gt;time.NewTicker(dur int64)&lt;/code&gt; 创建， dur是指定的时间间隔，单位为纳秒（ns）。在使协程周期性执行任务（打印状态日志，输出等）时使用。调用 &lt;code&gt;Stop()&lt;/code&gt; 使计时器停止，与 &lt;code&gt;select&lt;/code&gt; 结合如下：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ticker := time.NewTicker(updateInterval)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; ticker.Stop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; u:= &amp;lt;-ch1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; v:= &amp;lt;-ch2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ticker.C:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logState(status) &lt;span class=&quot;comment&quot;&gt;// call some logging function logState&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;: &lt;span class=&quot;comment&quot;&gt;// no value ready to be received&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;time.Tick()&lt;/code&gt; 函数声明为 &lt;code&gt;Tick(d Duration) &amp;lt;-chan Time&lt;/code&gt;，该函数返回的通道不需要关闭，它以 &lt;code&gt;d&lt;/code&gt; 为周期给返回的通道发送时间，&lt;code&gt;d&lt;/code&gt; 是纳秒数。可以通过此函数限制处理频率，如果应对的请求不平稳，可以增加一个带缓冲的可读写通道，从 &lt;code&gt;chRate&lt;/code&gt; 中读取处理时钟，在请求暴增时可以快速处理与缓冲数相等的请求，之后处理速度会下降到和 &lt;code&gt;chRate&lt;/code&gt; 一样的速率。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rate_per_sec := &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dur Duration = &lt;span class=&quot;number&quot;&gt;1e9&lt;/span&gt; / rate_per_sec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chRate := time.Tick(dur) &lt;span class=&quot;comment&quot;&gt;// a tick every 1/10th of a second&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; req := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; requests &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;- chRate &lt;span class=&quot;comment&quot;&gt;// rate limit our Service.Method RPC calls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; client.Call(&lt;span class=&quot;string&quot;&gt;&quot;Service.Method&quot;&lt;/span&gt;, req, ...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定时器（Timer）定时器和计时器（Ticker）结构体类似（构造函数为 &lt;code&gt;NewTimer(d Duration)&lt;/code&gt;），但它只发送一次时间，在 &lt;code&gt;Dration d&lt;/code&gt; 之后。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;time.After(d)&lt;/code&gt; 函数声明为 &lt;code&gt;func After(d Duration) &amp;lt;-chan Time&lt;/code&gt;，在 &lt;code&gt;Duration d&lt;/code&gt; 之后，当前时间被发到返回的通道；因此它和 &lt;code&gt;NewTimer(d).C&lt;/code&gt; 等价；它类似 &lt;code&gt;Tick()&lt;/code&gt;，但 &lt;code&gt;After()&lt;/code&gt; 只发送一次时间。可以使用此函数应对简单的超时模式，以下为三种形式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;要执行某个任务（如从通道 &lt;code&gt;ch&lt;/code&gt; 中读取数据），但最多等待1秒。先创建一个信号通道，之后启动一个 &lt;code&gt;lambda&lt;/code&gt; 协程，协程在给通道发送数据前休眠：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;timeout := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; &lt;span class=&quot;typename&quot;&gt;bool&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        time.Sleep(&lt;span class=&quot;number&quot;&gt;1e9&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// one second&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        timeout &amp;lt;- &lt;span class=&quot;constant&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-ch:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// a read from ch has occured&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-timeout:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// the read from ch has timed out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用 &lt;code&gt;time.After()&lt;/code&gt; 函数替换 &lt;code&gt;timeout-channel&lt;/code&gt;。可以在 &lt;code&gt;select&lt;/code&gt; 中使用来让发送信号超时或停止协程的执行。以下代码，在 &lt;code&gt;timeoutNs&lt;/code&gt; 纳秒后执行 &lt;code&gt;select&lt;/code&gt; 的 &lt;code&gt;timeout&lt;/code&gt; 分支后，包含&lt;code&gt;client.Call&lt;/code&gt; 的&lt;code&gt;lambda&lt;/code&gt; 协程也随之结束，不会给通道 &lt;code&gt;ch&lt;/code&gt; 返回值。缓冲大小设置为 &lt;code&gt;1&lt;/code&gt; 是必要的，可以避免协程死锁以及确保超时的通道可以被垃圾回收。需要注意如果 &lt;code&gt;select&lt;/code&gt; 中的某些非定时器选项的通道读写密集，则可能无法结束这些进程。这种情况如果将 &lt;code&gt;select&lt;/code&gt; 放到一个 &lt;code&gt;for&lt;/code&gt; 循环中，也无法精确地在定时器通道写入时就结束，因为 &lt;code&gt;select&lt;/code&gt; 对可以执行的多个 &lt;code&gt;case&lt;/code&gt; 采取伪随机算法选择，可能结束进程的时间要比定时器发出信号略晚一些。&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; error, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;() &amp;#123; ch &amp;lt;- client.Call(&lt;span class=&quot;string&quot;&gt;&quot;Service.Method&quot;&lt;/span&gt;, args, &amp;amp;reply) &amp;#125; ()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &amp;lt;-time.After(timeoutNs):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// call timed out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; resp := &amp;lt;-ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// use resp and reply&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;假设程序从多个复制的数据库同时读取，只需要接收首先到达的答案，&lt;code&gt;Query&lt;/code&gt; 函数获取数据库的连接切片，并行请求每一个数据库并返回收到的第一个响应。结果通道 &lt;code&gt;ch&lt;/code&gt; 必须是带缓冲的，以保证第一个发送进来的数据有地方可以存放，确保放入的首个数据总会成功：&lt;/p&gt;
&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; Query(conns []conn, query &lt;span class=&quot;typename&quot;&gt;string&lt;/span&gt;) Result &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ch := &lt;span class=&quot;built_in&quot;&gt;make&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Result, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; _, conn := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; conns &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt;(c Conn) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; ch &amp;lt;- c.DoQuery(query):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;(conn)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;- ch&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;缓冲通道实现信号量模式&quot;&gt;&lt;a href=&quot;#缓冲通道实现信号量模式&quot; class=&quot;headerlink&quot; title=&quot;缓冲通道实现信号量模式&quot;&gt;&lt;/a&gt;缓冲通道实现信号量模式&lt;/h1&gt;&lt;p&gt;使用缓冲通道模拟信号量，需满足&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;带缓冲通道的容量和要同步的资源容量相同&lt;/li&gt;
&lt;li&gt;通道的长度（当前存放的元素个数）与当前资源被使用的数量相同&lt;/li&gt;
&lt;li&gt;容量减去通道的长度就是未处理的资源个数（标准信号量的整数值）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;创建一个可缓冲通道表示单一信号量。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Empty &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; semaphore &lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; Empty&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将可用资源的数量N来初始化信号量 &lt;code&gt;semaphore：sem = make(semaphore, N)&lt;/code&gt;，提供方法从信号量通道中读取、写入。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// acquire n resources&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (s semaphore) P(n &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e := &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt;(Empty)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i := &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s &amp;lt;- e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// release n resouces&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; (s semaphore) V(n &lt;span class=&quot;typename&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i:= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;- s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;一个互斥的例子：&lt;br&gt;&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/* mutexes */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s semaphore) &lt;span class=&quot;type&quot;&gt;Lock&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.P(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s semaphore) &lt;span class=&quot;type&quot;&gt;Unlock&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.V(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/* signal-wait */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s semaphore) &lt;span class=&quot;type&quot;&gt;Wait&lt;/span&gt;(n &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.P(n)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func (s semaphore) &lt;span class=&quot;type&quot;&gt;Signal&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    s.V(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 管道过滤&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;从通道接收的数据并发送给输出通道，可过滤符合条件的数据。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```go&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sendChan := make(chan &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reciveChan := make(chan &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go filter(sendChan, receiveChan)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func filter(&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;lt;-chan &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; chan&amp;lt;- &lt;span class=&quot;type&quot;&gt;string&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; inValue := &lt;span class=&quot;type&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; := ... /// processing inValue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; &amp;lt;- &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;协程的恢复&quot;&gt;&lt;a href=&quot;#协程的恢复&quot; class=&quot;headerlink&quot; title=&quot;协程的恢复&quot;&gt;&lt;/a&gt;协程的恢复&lt;/h1&gt;&lt;p&gt;以下代码停掉了服务器内部一个失败的协程而不影响其他协程的工作。&lt;br&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; server(workChan &amp;lt;-&lt;span class=&quot;keyword&quot;&gt;chan&lt;/span&gt; *Work) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; work := &lt;span class=&quot;keyword&quot;&gt;range&lt;/span&gt; workChan &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt; safelyDo(work)   &lt;span class=&quot;comment&quot;&gt;// start the goroutine for that work&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; safelyDo(work *Work) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; err := &lt;span class=&quot;built_in&quot;&gt;recover&lt;/span&gt;(); err != &lt;span class=&quot;constant&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            log.Printf(&lt;span class=&quot;string&quot;&gt;&quot;Work failed with %s in %v&quot;&lt;/span&gt;, err, work)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    do(work)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Unknwon/the-way-to-go_ZH_CN/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《The Way To Go》中文译本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/09/08/gochan-accumulate/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/09/08/gochan-accumulate/&quot;&gt;https://forec.github.io/2016/09/08/gochan-accumulate/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理近期遇到的Golang中通道和协程的技巧。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Language" scheme="http://forec.github.io/categories/Language/"/>
    
    
      <category term="Golang" scheme="http://forec.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Spark集群计算环境配置和使用</title>
    <link href="http://forec.github.io/2016/07/11/spark-initial/"/>
    <id>http://forec.github.io/2016/07/11/spark-initial/</id>
    <published>2016-07-11T06:53:38.000Z</published>
    <updated>2016-10-03T15:35:46.130Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;https://forec.github.io/2016/07/09/hadoop-build/&quot;&gt;Hadoop配置与使用&lt;/a&gt;基础上配置Spark集群计算环境，以及简单Scala程序在集群的运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;在Hadoop通用并行框架上配置Spark&quot;&gt;&lt;a href=&quot;#在Hadoop通用并行框架上配置Spark&quot; class=&quot;headerlink&quot; title=&quot;在Hadoop通用并行框架上配置Spark&quot;&gt;&lt;/a&gt;在Hadoop通用并行框架上配置Spark&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;从&lt;a href=&quot;http://spark.apache.org/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Spark&lt;/a&gt;下载合适的版本，以&lt;code&gt;Pre-build for Hadoop 2.6&lt;/code&gt;为例，将压缩包解压到某目录，该压缩包目录作为环境变量&lt;code&gt;SPARK_HOME&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;向环境变量添加&lt;code&gt;%SPARK_HOME%/bin&lt;/code&gt;并source生效。&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;%HADOOP_HOME%\etc\hadoop&lt;/code&gt;作为&lt;code&gt;HADOOP_CONF_DIR&lt;/code&gt;添加到环境变量。&lt;/li&gt;
&lt;li&gt;按Hadoop集群的运行方式启动Hadoop  &lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bin/hdfs namenode -&lt;span class=&quot;built_in&quot;&gt;format&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bin/hdfs dfs -&lt;span class=&quot;built_in&quot;&gt;mkdir&lt;/span&gt; /user/&amp;lt;username&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sbin/&lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt;-dfs.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sbin/&lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt;-yarn.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;在Hadoop集群上执行Spark作业&quot;&gt;&lt;a href=&quot;#在Hadoop集群上执行Spark作业&quot; class=&quot;headerlink&quot; title=&quot;在Hadoop集群上执行Spark作业&quot;&gt;&lt;/a&gt;在Hadoop集群上执行Spark作业&lt;/h1&gt;&lt;h2 id=&quot;一个Scala的MapReduce样本&quot;&gt;&lt;a href=&quot;#一个Scala的MapReduce样本&quot; class=&quot;headerlink&quot; title=&quot;一个Scala的MapReduce样本&quot;&gt;&lt;/a&gt;一个Scala的MapReduce样本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;此样例为多维属性向量的均值计算&lt;/p&gt;
&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.spark.&amp;#123;&lt;span class=&quot;type&quot;&gt;SparkConf&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;SparkContext&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.spark.rdd.&lt;span class=&quot;type&quot;&gt;RDD&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Statistic&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;(&lt;/span&gt;args: &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; conf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;SparkConf&lt;/span&gt;().setAppName(&lt;span class=&quot;string&quot;&gt;&quot;example&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; spark = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;SparkContext&lt;/span&gt;(conf)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; set = spark.textFile(args(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)).flatMap &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      line =&amp;gt; line.split(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;).map &amp;#123; opt =&amp;gt; (opt.split(&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).toInt, opt.split(&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;)(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;).toFloat) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;.reduceByKey(_+_)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; count = set.count()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set.collect.map &amp;#123; &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; (key, value) =&amp;gt; value/count&amp;#125;.foreach&amp;#123;println&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    spark.stop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;样例代码中，set为(Int, Float)的&lt;code&gt;&amp;lt;key, value&amp;gt;&lt;/code&gt;对的RDD，通过&lt;code&gt;reduceByKey&lt;/code&gt;将相同属性求和，在最后collect回收所有分布式集群上的结果汇总到本地。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;执行作业&quot;&gt;&lt;a href=&quot;#执行作业&quot; class=&quot;headerlink&quot; title=&quot;执行作业&quot;&gt;&lt;/a&gt;执行作业&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;将要执行的代码export为jar包，一下文件名为&lt;code&gt;example.jar&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;ssh到localhost（此处使用伪分布式Hadoop集群）。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行如下命令，其中&lt;code&gt;path_to_example_jar&lt;/code&gt;为jar包所在的位置，MainClass为jar包中要执行的object，args为传入MainClass的参数列表，空格隔开，可变长。&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;spark-submit --class MainClass --master yarn-cluster path_to_example_jar args...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行作业后可在Hadoop监视器的logs中看到输出。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Scala的部分Spark-API&quot;&gt;&lt;a href=&quot;#Scala的部分Spark-API&quot; class=&quot;headerlink&quot; title=&quot;Scala的部分Spark API&quot;&gt;&lt;/a&gt;Scala的部分Spark API&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;API文档根目录：&lt;br&gt;&lt;a href=&quot;http://spark.apache.org/docs/1.5.1/api/scala/index.html#package&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://spark.apache.org/docs/1.5.1/api/scala/index.html#package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;key, value&amp;gt;&lt;/code&gt;类型的RDD：&lt;br&gt;&lt;a href=&quot;http://spark.apache.org/docs/1.5.1/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://spark.apache.org/docs/1.5.1/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;所有RDD：&lt;br&gt;&lt;a href=&quot;http://spark.apache.org/docs/1.5.1/api/scala/index.html#org.apache.spark.rdd.RDD&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://spark.apache.org/docs/1.5.1/api/scala/index.html#org.apache.spark.rdd.RDD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/07/11/spark-initial/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/07/11/spark-initial/&quot;&gt;https://forec.github.io/2016/07/11/spark-initial/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;https://forec.github.io/2016/07/09/hadoop-build/&quot;&gt;Hadoop配置与使用&lt;/a&gt;基础上配置Spark集群计算环境，以及简单Scala程序在集群的运行。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="http://forec.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://forec.github.io/tags/Hadoop/"/>
    
      <category term="Spark" scheme="http://forec.github.io/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Python3操作Access数据库</title>
    <link href="http://forec.github.io/2016/07/10/python-visit-access-database/"/>
    <id>http://forec.github.io/2016/07/10/python-visit-access-database/</id>
    <published>2016-07-10T08:45:29.000Z</published>
    <updated>2016-10-03T15:33:26.298Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;记录在windows 10下配置python3链接access数据库过程和几个简单操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;安装所需库文件&quot;&gt;&lt;a href=&quot;#安装所需库文件&quot; class=&quot;headerlink&quot; title=&quot;安装所需库文件&quot;&gt;&lt;/a&gt;安装所需库文件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;从&lt;a href=&quot;https://sourceforge.net/projects/pywin32/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://sourceforge.net/projects/pywin32/&lt;/a&gt;下载最新的对应本地python3版本的pywin32库并安装。&lt;/li&gt;
&lt;li&gt;从&lt;a href=&quot;https://www.microsoft.com/zh-cn/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.microsoft.com/zh-cn/download/&lt;/a&gt;下载Access数据库驱动AccessDatabaseEngine_X64.exe。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;读取Access数据库&quot;&gt;&lt;a href=&quot;#读取Access数据库&quot; class=&quot;headerlink&quot; title=&quot;读取Access数据库&quot;&gt;&lt;/a&gt;读取Access数据库&lt;/h1&gt;&lt;h2 id=&quot;建立连接&quot;&gt;&lt;a href=&quot;#建立连接&quot; class=&quot;headerlink&quot; title=&quot;建立连接&quot;&gt;&lt;/a&gt;建立连接&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过以下交互命令同access数据库建立连接&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; win32com.client&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conn = win32com.client.gencache.EnsureDispatch(&lt;span class=&quot;string&quot;&gt;&#39;ADODB.Connection&#39;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DSN = &lt;span class=&quot;string&quot;&gt;&#39;PROVIDER = Microsoft.ACE.OLEDB.12.0;DATA SOURCE = /path/to/database;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conn.Open(DSN)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问数据库中名为&lt;code&gt;rs_name&lt;/code&gt;的表&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rs = win32com.client.Dispatch(&lt;span class=&quot;string&quot;&gt;r&#39;ADODB.Recordset&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rs_name = &lt;span class=&quot;string&quot;&gt;&#39;co&#39;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rs.Open(&lt;span class=&quot;string&quot;&gt;&#39;[&#39;&lt;/span&gt; + rs_name + &lt;span class=&quot;string&quot;&gt;&#39;]&#39;&lt;/span&gt;, conn, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;# 不允许更新，用于查询&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意在上面的代码中，&lt;code&gt;rs.Open()&lt;/code&gt;的最后两个参数，分别是游标(CursorType)和数据锁定类型(LockType)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;游标为0：为仅向前游标，只读，只能向前浏览记录，不支持分页、Recordset、BookMark&lt;/li&gt;
&lt;li&gt;游标为1：为键集游标，只读，其他用户对数据库做的修改将反映到记录集中，但其他用户增加或删除记录不会反映到记录集中。支持分页、Recordset、BookMark &lt;/li&gt;
&lt;li&gt;游标为2：为动态游标，可读写，功能最强，但耗资源最多。用户对记录做的修改，增加或删除记录都将反映到记录集中。支持全功能浏览。&lt;/li&gt;
&lt;li&gt;游标为3：为静态游标，可读写，只是数据的一个快照，用户对记录做的修改，增加或删除记录都不会反映到记录集中。支持向前或向后移动。&lt;/li&gt;
&lt;li&gt;数据锁定类型为1：默认锁定，只读，不能做任何修改&lt;/li&gt;
&lt;li&gt;数据锁定类型为2：悲观锁定，当编辑时立刻锁定记录&lt;/li&gt;
&lt;li&gt;数据锁定类型为3：乐观锁定，直到使用update方法提交更新记录后才锁定记录&lt;/li&gt;
&lt;li&gt;数据锁定类型为4：批量乐观锁定，允许修改多个记录，只有调用UpdateBatch方法后才锁定记录。&lt;br&gt;当不需要改动任何记录时，使用只读的记录集，这样提供者不用做任何检测。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;命令执行&quot;&gt;&lt;a href=&quot;#命令执行&quot; class=&quot;headerlink&quot; title=&quot;命令执行&quot;&gt;&lt;/a&gt;命令执行&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;执行SQL语句，以插入表为例&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sql_statement = &lt;span class=&quot;string&quot;&gt;&quot;Insert INTO [Table_Name] ([Field_1], [Field_2]) VALUES (&#39;data1&#39;, &#39;data2&#39;)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;conn.Execute(sql_statement)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历数据库记录，&lt;code&gt;rs.MoveFirst()&lt;/code&gt;访问数据库的第一行记录，&lt;code&gt;rs.MoveNext()&lt;/code&gt;转移到下一行。注意如果第一个记录为空，则&lt;code&gt;rs.MoveFirst()&lt;/code&gt;会产生一个错误，如果此前将rs的Cursorlocation设置为3，则此问题可解决。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rs.MoveFirst()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; rs.EOF:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        rs.MoveNext()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看数据，在下面的例子中，打开的表格中，第一列的名称为ID，第一行数据的ID为001，第二行数据的ID为002。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;rs.MoveFirst()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print(rs.Fields.Item(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).Name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;ID&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print(rs.Fields.Item(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).Value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;001&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;rs.MoveNext()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;print(rs.Fields.Item(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;).Value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&#39;002&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表的列数可通过&lt;code&gt;rs.Fields.Count&lt;/code&gt;获取。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考博客：   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.2cto.com/kf/201204/129384.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python连接Access数据库&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://soft.zdnet.com.cn/software_zone/2008/0520/870686.shtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python读取mdb文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://my.oschina.net/duxuefeng/blog/64137&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;win32com用法_杜雪峰的博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/07/10/python-visit-access-database/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/07/10/python-visit-access-database/&quot;&gt;https://forec.github.io/2016/07/10/python-visit-access-database/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录在windows 10下配置python3链接access数据库过程和几个简单操作。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="DataBase" scheme="http://forec.github.io/categories/DataBase/"/>
    
    
      <category term="Access" scheme="http://forec.github.io/tags/Access/"/>
    
      <category term="Python" scheme="http://forec.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop配置和使用</title>
    <link href="http://forec.github.io/2016/07/09/hadoop-build/"/>
    <id>http://forec.github.io/2016/07/09/hadoop-build/</id>
    <published>2016-07-09T12:56:27.000Z</published>
    <updated>2016-10-03T15:35:35.911Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;简单记录在Ubuntu Linux上搭建本地伪分布式的Hadoop MapReduce集群过程及使用方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;安装并配置hadoop&quot;&gt;&lt;a href=&quot;#安装并配置hadoop&quot; class=&quot;headerlink&quot; title=&quot;安装并配置hadoop&quot;&gt;&lt;/a&gt;安装并配置hadoop&lt;/h1&gt;&lt;h2 id=&quot;安装Hadoop及需要的工具&quot;&gt;&lt;a href=&quot;#安装Hadoop及需要的工具&quot; class=&quot;headerlink&quot; title=&quot;安装Hadoop及需要的工具&quot;&gt;&lt;/a&gt;安装Hadoop及需要的工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;jdk 1.7或以上版本：&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads/index.html&lt;/a&gt;，并配置JAVA_HOME环境变量。&lt;/li&gt;
&lt;li&gt;hadoop稳定版本，下文以2.6.4为例：&lt;a href=&quot;http://hadoop.apache.org/releases.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://hadoop.apache.org/releases.html&lt;/a&gt;，下载编译好的binary压缩包，解压到某目录，如&lt;code&gt;/home/forec/hadoop-2.6.4&lt;/code&gt;，并设置&lt;code&gt;HADOOP_HOME&lt;/code&gt;，如在&lt;code&gt;/etc/environment&lt;/code&gt;中添加&lt;code&gt;export HADOOP_HOME=/home/forec/hadoop-2.6.4/&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install ssh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo apt-get install rsync&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;设置环境变量&quot;&gt;&lt;a href=&quot;#设置环境变量&quot; class=&quot;headerlink&quot; title=&quot;设置环境变量&quot;&gt;&lt;/a&gt;设置环境变量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;%HADOOP_HOME%/etc/hadoop&lt;/code&gt;目录下的&lt;code&gt;hadoop-env.sh&lt;/code&gt;中添加&lt;code&gt;export JAVA_HOME=/path/to/jdk&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;/etc/environment&lt;/code&gt;中添加&lt;code&gt;export HADOOP_PREFIX=/home/forec/hadoop-2/6/4/&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;下面的操作均在HADOOP_HOME目录下进行&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;本地非分布式操作&quot;&gt;&lt;a href=&quot;#本地非分布式操作&quot; class=&quot;headerlink&quot; title=&quot;本地非分布式操作&quot;&gt;&lt;/a&gt;本地非分布式操作&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在默认模式下，hadoop被配置为非分布式的运行模式，以单独的java进程运行，适合debug。以下命令演示以非分布式方式在hadoop上运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;执行下面命令启动本地hadoop作业&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir /dir_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp /&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;_dir_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_input /dir_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_input&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bin/hadoop jar jar_to_run /dir_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_input /dir_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat /dir_&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;_output/*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;本地伪分布式操作&quot;&gt;&lt;a href=&quot;#本地伪分布式操作&quot; class=&quot;headerlink&quot; title=&quot;本地伪分布式操作&quot;&gt;&lt;/a&gt;本地伪分布式操作&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;hadoop可被配置为一个单个节点的伪分布式系统，每一个虚拟操作以单独的java进程运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;修改配置文件&quot;&gt;&lt;a href=&quot;#修改配置文件&quot; class=&quot;headerlink&quot; title=&quot;修改配置文件&quot;&gt;&lt;/a&gt;修改配置文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;etc/hadoop/core-site.xml&lt;/code&gt;如下。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;fs.defaultFS&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;hdfs://localhost:9000&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;etc/hadoop/hdfs-site.xml&lt;/code&gt;如下。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;dfs.replication&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置无密钥ssh登录localhost：尝试&lt;code&gt;ssh localhost&lt;/code&gt;，若需输入密码，则通过下面命令免除输入密码的操作。其中如果本地已经生成了ssh密钥可以省略。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen -t dsa -&lt;span class=&quot;constant&quot;&gt;P&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; -f ~&lt;span class=&quot;regexp&quot;&gt;/.ssh/id&lt;/span&gt;_dsa	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat ~&lt;span class=&quot;regexp&quot;&gt;/.ssh/id&lt;/span&gt;_dsa.pub &lt;span class=&quot;prompt&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;~&lt;span class=&quot;regexp&quot;&gt;/.ssh/authorized&lt;/span&gt;_keys&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;在本地启动hadoop&quot;&gt;&lt;a href=&quot;#在本地启动hadoop&quot; class=&quot;headerlink&quot; title=&quot;在本地启动hadoop&quot;&gt;&lt;/a&gt;在本地启动hadoop&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;格式化文件系统: &lt;code&gt;$ bin/hdfs namenode -format&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;启动NameNode和DataNode: &lt;code&gt;sbin/start-dfs.sh&lt;/code&gt;，其log文件写入&lt;code&gt;%HADOOP_HOME%/logs&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;访问地址&lt;code&gt;http://localhost:50070&lt;/code&gt;可以看到NameNode的网页接口，如下图。&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/overview.png&quot; width=&quot;500px&quot;&gt;&lt;/li&gt;
&lt;li&gt;将地址栏的&lt;code&gt;http://localhost:50070/dfshealth.***&lt;/code&gt;改成&lt;code&gt;http://localhost:50070/dfshealth.jsp&lt;/code&gt;可进入文件系统，如下图。&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/directory.png&quot; width=&quot;500px&quot;&gt;&lt;/li&gt;
&lt;li&gt;建立HDFS目录以执行MapReduce任务：&lt;code&gt;$ bin/hdfs dfs -mkdir /user&lt;/code&gt;，&lt;code&gt;$ bin/hdfs dfs -mkdir /user/&amp;lt;username&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;将输入文件拷贝到分布式文件系统中: &lt;code&gt;$ bin/hdfs dfs -put /local_dir_for_input_files /dir_in_distributed_filesystem_for_input&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;注意上面的&lt;code&gt;/dir_in_distributed_filesystem_for_input&lt;/code&gt;是分布式文件系统中输入文件的目录，此命令将本地的输入文件拷贝到了分布式文件系统的该目录中。&lt;/li&gt;
&lt;li&gt;运行jar包: &lt;code&gt;$ bin/hadoop jar jar_file_to_excute /dir_in_distributed_filesystem_for_input /dir_in_distributed_filesystem_for_output&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;检查输出文件可以通过将分布式文件系统中的输出文件拷贝到本地，或直接在分布式文件系统中查看。拷贝到本地执行如下命令：&lt;code&gt;$ bin/hdfs dfs -get /dir_in_distributed_filesystem_for_output /local_dir&lt;/code&gt;，&lt;code&gt;$ cat /local_dir/*&lt;/code&gt;；在分布式文件系统查看执行如下命令：&lt;code&gt;$ bin/hdfs dfs -cat /dir_in_distributed_filesystem_for_output/*&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;任务完成后终止hadoop虚拟机：&lt;code&gt;$ sbin/stop-dfs.sh&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;在YARN执行MapReduce作业&quot;&gt;&lt;a href=&quot;#在YARN执行MapReduce作业&quot; class=&quot;headerlink&quot; title=&quot;在YARN执行MapReduce作业&quot;&gt;&lt;/a&gt;在YARN执行MapReduce作业&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;需要完成前面“在本地启动hadoop”的配置中1～4步。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;etc/hadoop/mapred-site.xml&lt;/code&gt;，此文件在2.6.4版本中不存在，可以修改&lt;code&gt;etc/hadoop/mapred-site.xml.template&lt;/code&gt;并新建该文件。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;mapreduce.framework.name&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;yarn&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改&lt;code&gt;etc/hadoop/yarn-site.xml&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.aux-services&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;mapreduce_shuffle&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;启动资源管理器和节点管理器：&lt;code&gt;$ sbin/start-yarn.sh&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;启动浏览器，访问&lt;code&gt;http://localhost:8088/&lt;/code&gt;，可以查看hadoop的资源监视器，如下图。&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/yarn.png&quot; width=&quot;500px&quot;&gt;&lt;/li&gt;
&lt;li&gt;按上面执行hadoop的方式执行一个MapReduce任务。&lt;/li&gt;
&lt;li&gt;作业完成后关闭虚拟机：&lt;code&gt;$ sbin/stop-yarn.sh&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意，在伪分布式的hadoop上执行MapReduce任务时，需ssh到localhost，之后在8088端口才能看到作业记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h1 id=&quot;完整的hadoop作业运行示例&quot;&gt;&lt;a href=&quot;#完整的hadoop作业运行示例&quot; class=&quot;headerlink&quot; title=&quot;完整的hadoop作业运行示例&quot;&gt;&lt;/a&gt;完整的hadoop作业运行示例&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;安装并配置好hadoop，执行&lt;code&gt;$ sbin/start-yarn.sh&lt;/code&gt;和&lt;code&gt;$ sbin/start-dfs.sh&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一段简单的java代码如下，export出的jar包可在hadoop上执行MapReduce作业。使用eclipse或idea时，需要导入SDK、JDK和scala-hadoop-assembly包。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; test;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.io.IOException;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.ArrayList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.Iterator;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; java.util.List;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.conf.Configuration;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.fs.FileSystem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.fs.Path;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.io.LongWritable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.io.Text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.mapreduce.Job;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.mapreduce.Mapper;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.mapreduce.Reducer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.mapreduce.lib.input.FileInputFormat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*********************** Map  **********************/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mapper&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Object&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Object key,Text value,Context context)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    	&lt;span class=&quot;comment&quot;&gt;// Map Progress&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//-----shuffle    ===&amp;gt; [key,value-list]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*********************** Reduce  **********************/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reduce&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Reducer&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;Text&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Text key,Iterable&amp;lt;Text&amp;gt; values,Context context)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		   	&lt;span class=&quot;comment&quot;&gt;// Reduce Progress&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		    &lt;span class=&quot;comment&quot;&gt;// context.write(***);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context)&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*********************** Main  **********************/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; IllegalArgumentException, IOException, ClassNotFoundException, InterruptedException&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Configuration conf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Configuration();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Job job = Job.getInstance(conf, &lt;span class=&quot;string&quot;&gt;&quot;forec&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setJarByClass(myson.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//*********set Map*************&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setMapperClass(Map.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setMapOutputKeyClass(Text.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setMapOutputValueClass(Text.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//******** set Reduce ************&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setReducerClass(Reduce.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setOutputKeyClass(Text.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.setOutputValueClass(Text.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//********* delete output *********&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    FileSystem fstm = FileSystem.get(conf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    Path outDir = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(args[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!outDir.equals(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        fstm.delete(outDir, &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//********** set input/output path***********&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    FileInputFormat.addInputPath(job, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(args[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    FileOutputFormat.setOutputPath(job, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path(args[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    job.waitForCompletion(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生成的jar包即可通过上述执行方式运行在hadoop上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： &lt;a href=&quot;http://hadoop.apache.org/docs/r2.6.4/hadoop-project-dist/hadoop-common/SingleCluster.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hadoop官方文档&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/07/09/hadoop-build/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/07/09/hadoop-build/&quot;&gt;https://forec.github.io/2016/07/09/hadoop-build/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简单记录在Ubuntu Linux上搭建本地伪分布式的Hadoop MapReduce集群过程及使用方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="http://forec.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="http://forec.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>对丘奇整数的一点思路整理</title>
    <link href="http://forec.github.io/2016/03/24/church-count/"/>
    <id>http://forec.github.io/2016/03/24/church-count/</id>
    <published>2016-03-24T08:08:22.000Z</published>
    <updated>2016-10-03T15:33:52.574Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;记录自己在理解sicp习题2.6中Church计数时的思考过程，对术语的定义均来自&lt;a href=&quot;https://en.wikipedia.org/wiki/λ_calculus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wiki&lt;/a&gt;。谨记函数为一等公民，过程即数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;λ演算&quot;&gt;&lt;a href=&quot;#λ演算&quot; class=&quot;headerlink&quot; title=&quot;λ演算&quot;&gt;&lt;/a&gt;λ演算&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;λ演算由阿隆佐·丘奇和他的学生在20世纪30年代引入，对函数式编程语言有巨大的影响。λ演算之通用在于，任何一个可计算函数都能用这种形式来表达和求值。λ演算强调的是变换规则的运用，而非实现它们的具体机器。&lt;/li&gt;
&lt;li&gt;在λ演算中，每个表达式都代表一个函数，该函数接受一个参数并返回一个值，且无论参数还是返回值均为一个单参函数。即λ演算中存在且仅存在一种类型，为单参函数。对于现实中看起来接受两个参数的函数，实质为一个接受单一参数并返回接受另一个“接受单一参数”的函数，即柯里化。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在sicp的习题2.6中，对Church计数的0和add-1定义如下。&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; zero &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;add-1&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; f)&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对上面的代码而言，通过柯里化转换成如下格式可能较易理解。但上面的形式复合λ演算的定义，即全部通过单参匿名函数实现。&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; zero &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;add-1&lt;/span&gt; n)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; f x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;形式化描述&quot;&gt;&lt;a href=&quot;#形式化描述&quot; class=&quot;headerlink&quot; title=&quot;形式化描述&quot;&gt;&lt;/a&gt;形式化描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;λ演算的非形式化描述通过λ表达式匿名定义，如函数\(f(x)=x+2\)的表示为\(\lambda x.x+2\)或\(\lambda y.y+2\)，参数名无关紧要），\(f(3)\)即\(3+2\)可表示为\((\lambda x.x+2) 3\)，也可以表示为\((\lambda f.f 3)(\lambda x.x+2)\)，这三者等价。然而并非所有的lambda表达式都可以规约成某种通用的函数，例如考虑\((\lambda x.x x)(\lambda x.x x)\)，其不具有确定值。&lt;/li&gt;
&lt;li&gt;对λ演算的形式化定义为，从一个标识符的可数无穷集合开始，如\({a, b, c, \ldots, x, y, …}\)，则所有的λ表达式可以通过下述上下文无关文法描述，前两条规则用来生成函数，第三条描述了函数对参数的作用方式。其中函数定义为左结合，且λ操作符绑定到它后面的整个表达式，因此括号在无歧义情况下可以舍弃。&lt;ul&gt;
&lt;li&gt;&amp;lt;表达式&amp;gt; ::= &amp;lt;标识符&amp;gt;&lt;/li&gt;
&lt;li&gt;&amp;lt;表达式&amp;gt; ::=(λ&amp;lt;标识符&amp;gt; .&amp;lt;表达式&amp;gt;)&lt;/li&gt;
&lt;li&gt;&amp;lt;表达式&amp;gt; ::=(&amp;lt;表达式&amp;gt; &amp;lt;表达式&amp;gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以上λ表达式并未定义函数，例如\(\lambda x.(x y)\)中变量y的出现时自由的，其并未被绑定到表达式的任何一个λ上。一个λ表达式的自由变量的集合通过下面规则定义，分别对应上面形式化定义的各点。&lt;ul&gt;
&lt;li&gt;在表达式\(V\)中，V为变量，则该表达式自由变量的集合只有V。&lt;/li&gt;
&lt;li&gt;在表达式\(\lambda V .E\)中（V为变量，E是另一个表达式），自由变量的集合为E中自由变量的集合减去变量V。因此E中的V被绑定在λ上。例如\(\lambda x.x\)，将第一个x视为变量，第二个x视为表达式，则其自由变量集合为空集。&lt;/li&gt;
&lt;li&gt;在表达式\((E E’)\)中，自由变量的集合石E和E’中自由变量集合的并集。例如\(\lambda x.x x\)，可以看作\(((\lambda x.x)(x))\)，因此自由变量集合为\({x}\)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;归约&quot;&gt;&lt;a href=&quot;#归约&quot; class=&quot;headerlink&quot; title=&quot;归约&quot;&gt;&lt;/a&gt;归约&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;根据λ演算的形式化定义，可以在λ表达式的集合上定义等价关系，即表述：“两个表达式其实表示的是同一个函数”。&lt;/li&gt;
&lt;li&gt;α-变换：被绑定变量的名称是不重要的。具体陈述为：若V与W均为变量，E是一个λ表达式，同时&lt;code&gt;E[V:=W]&lt;/code&gt;是指把表达式E中的所有的V的自由出现都替换为W，那么在W不是E中的一个自由出现，且如果W替换了V，W不会被E中的λ绑定的情况下，有&lt;code&gt;λV.E == λW.E[V:=W]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;β-归约：其表达的是函数作用的概念。陈述了若所有的E’的自由出现在E [V:=E’]中仍然是自由的情况下，有&lt;code&gt;((λV.E) E&amp;#39;) == E [V:=E&amp;#39;]&lt;/code&gt;成立。&lt;/li&gt;
&lt;li&gt;η-变换：表达的是外延性的概念，即两个函数对于所有的参数得到的结果都一致，当且仅当它们是同一个函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;丘奇整数&quot;&gt;&lt;a href=&quot;#丘奇整数&quot; class=&quot;headerlink&quot; title=&quot;丘奇整数&quot;&gt;&lt;/a&gt;丘奇整数&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;丘奇整数是将自然数用高阶函数展示的一种形式。它将自然数n表示为任意给定函数f自身的n重复合。所有的丘奇整数都是接受两个参数的函数，可以通过λ演算定义如下。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; ≡ λf.λx. x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ≡ λf.λx. f x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ≡ λf.λx. f (f x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; ≡ λf.λx. f (f (f x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n ≡ λf.λx. fn x&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于sicp给出的0和add定义，可以用haskell表示，并用&lt;code&gt;:t&lt;/code&gt;查看其type。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; zero = (\f -&amp;gt; \x -&amp;gt; x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; :t zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;zero&lt;/span&gt; :: t -&amp;gt; t1 -&amp;gt; t1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; add1 n = (\f -&amp;gt; \x -&amp;gt; f ((n f) x))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; :t add1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;add1&lt;/span&gt; :: ((t1 -&amp;gt; t) -&amp;gt; t2 -&amp;gt; t1) -&amp;gt; (t1 -&amp;gt; t) -&amp;gt; t2 -&amp;gt; t&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;Prelude&lt;/span&gt;&amp;gt; :t (add1 zero)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(add1 zero) :: (t1 -&amp;gt; t) -&amp;gt; t1 -&amp;gt; t&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;由此可以得出1、2、3的定义：&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; one &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;add-1&lt;/span&gt; zero)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; one &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; one &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; two &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; three &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;回头看add-1的最初定义，已经感受到一致性：对n做add-1，就是对n所代表的过程再复合指定的函数f。这与丘奇整数的值和其复合指数相同一致。&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;define&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;add-1&lt;/span&gt; n)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;x&lt;/span&gt;)&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;n&lt;/span&gt; f)&lt;/span&gt; x)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下面是haskell对丘奇整数和整数之间转换的函数。&lt;/p&gt;
&lt;figure class=&quot;highlight haskell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;typedef&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Church&lt;/span&gt; a = &lt;span class=&quot;container&quot;&gt;(&lt;span class=&quot;title&quot;&gt;a&lt;/span&gt; -&amp;gt; &lt;span class=&quot;title&quot;&gt;a&lt;/span&gt;)&lt;/span&gt; -&amp;gt; a -&amp;gt; a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;church&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;Integer&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Church&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;church&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; = \f -&amp;gt; \x -&amp;gt; x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;church&lt;/span&gt; n = \f -&amp;gt; \x -&amp;gt; f (church (n-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) f x)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;unchurch&lt;/span&gt; :: &lt;span class=&quot;type&quot;&gt;Church&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Integer&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Integer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title&quot;&gt;unchurch&lt;/span&gt; cn = cn (+ &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;丘奇函数加深了对高阶函数、数据的过程性和书中“总可以将数据定义为一组适当的选择函数和构造函数，以及为使这些过程成为一套合法表示，他们就必须满足的一组特定条件”的认识。日后对λ演算做深入学习时再作补充。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;参考文献： 《计算机程序的构造和解释》&lt;/p&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/03/24/church-count/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/03/24/church-count/&quot;&gt;https://forec.github.io/2016/03/24/church-count/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录自己在理解sicp习题2.6中Church计数时的思考过程，对术语的定义均来自&lt;a href=&quot;https://en.wikipedia.org/wiki/λ_calculus&quot;&gt;wiki&lt;/a&gt;。谨记函数为一等公民，过程即数据。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Language" scheme="http://forec.github.io/categories/Language/"/>
    
    
      <category term="sicp" scheme="http://forec.github.io/tags/sicp/"/>
    
      <category term="函数式编程" scheme="http://forec.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>复杂网络传统社区发现算法概述</title>
    <link href="http://forec.github.io/2016/03/12/community-found/"/>
    <id>http://forec.github.io/2016/03/12/community-found/</id>
    <published>2016-03-12T07:26:08.000Z</published>
    <updated>2016-10-03T15:33:43.758Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;复杂网络是复杂系统的抽象，其中一个重要特征是网络中所呈现出的社区结构。许多网络是异构的，对于构成网络的不同类型节点所组成的子图称为网络中的社区。整理了几个传统的社区发现算法流程和大致原理，记录备忘。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;Kerighan-Lin算法&quot;&gt;&lt;a href=&quot;#Kerighan-Lin算法&quot; class=&quot;headerlink&quot; title=&quot;Kerighan-Lin算法&quot;&gt;&lt;/a&gt;Kerighan-Lin算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;算法为类似模拟退火式的试探优化法，采用贪婪的策略对网络进行二分社区。其复杂度仅为O(N^2)，适用于小规模的网络，但准确度不高，并且必须事先知道两个社区的规模大小。&lt;/li&gt;
&lt;li&gt;定义增益值\(P=\mbox{两个社区内部边数}-\mbox{两个社区之间边数}\)，并寻找使P最大的划分。&lt;/li&gt;
&lt;li&gt;算法流程如下&lt;ul&gt;
&lt;li&gt;(1) 随机将整个网络中的节点划分为两个社区A和B，其节点数分别为m和n，m和n已知。&lt;/li&gt;
&lt;li&gt;(2) 对于A和B中的每对节点\((i, j), i\in A, j\in B\)，计算将i和j交换后的\(\Delta P=\mbox{交换后的P}-\mbox{交换前的P}\)。&lt;/li&gt;
&lt;li&gt;(3) 选取使\(\Delta P\)最大的交换节点对并更新P值。另外，每个节点仅能交换一次。&lt;/li&gt;
&lt;li&gt;(4) 转(2)，直到A或者B二者中某个社区所有节点都已经被交换过一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基于Laplace图特征值的社区发现方法&quot;&gt;&lt;a href=&quot;#基于Laplace图特征值的社区发现方法&quot; class=&quot;headerlink&quot; title=&quot;基于Laplace图特征值的社区发现方法&quot;&gt;&lt;/a&gt;基于Laplace图特征值的社区发现方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一个无向图\(G=(V, E)\)，矩阵D是一个对角矩阵，对角线上的元素Dii是节点i的度，矩阵W是图G的邻接矩阵。拉普拉斯矩阵\(L=D-W\)，因此L为对称矩阵。其规定和具有的性质如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于W，定义图中A、B两个子图间的权重为\(W(A, B)=\Sigma w_{ij}, i\in A, j\in B\)。&lt;/li&gt;
&lt;li&gt;与某个节点邻接的所有边的权值和定义为该顶点的度，即\({d&lt;em&gt;i} = \Sigma w&lt;/em&gt;{ij}, i\in \lbrace 1, \ldots, N\rbrace\)。&lt;/li&gt;
&lt;li&gt;L是一个对称半正定矩阵。&lt;/li&gt;
&lt;li&gt;\(L \cdot \vec {1}=0 \cdot \vec {1}\)，因为\(L \cdot \vec {1}= (D-W) \cdot \vec {1} = 0 \cdot \vec {1}\)。&lt;/li&gt;
&lt;li&gt;L有n个非负实特征值\(0 = λ_1 \leq λ_2 \leq λ_3 \leq \ldots \leq λ_n\)。&lt;/li&gt;
&lt;li&gt;对于任何一个实向量\(f\in R^n\)，有\(2 \cdot f’Lf=\Sigma w_{ij}\cdot (f_i - f_j)^2, i, j \in \lbrace 1, \ldots, N \rbrace\)。证明如下：$$f’Lf=f’Df-f’Wf=\Sigma d_i\cdot {f_i}^{2}-\Sigma {f_i}{f&lt;em&gt;j}{w&lt;/em&gt;{ij}}(i, j\in {1, ldots, n})=\frac{1}{2}\cdot\left(\Sigma {d_i}{f_i}^{2}-2\Sigma {f_i}{f&lt;em&gt;j}w&lt;/em&gt;{ij}+\Sigma {d_j}{f&lt;em&gt;j}^{2}\right) (i, j\in {1, ldots, n})=\frac{1}{2}\cdot\left(\Sigma {w&lt;/em&gt;{ij}}({f_i}-{f_j})^{2}\right) (i, j\in {1, \ldots, n})$$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;切割图的目的在于 &lt;strong&gt;使被切掉的各边之和最小&lt;/strong&gt; ，因为其代表着子图之间连接的相似度最低。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;定义cut目标函数：\(cut(A1, A2, …, Ak) = \frac{1}{2} \cdot (\Sigma W(A_i, \overline{A_i}), i\in [1,k])\)。该目标函数可能会导致不好的分割，例如将某个图分成一个单一点和其余的n-1个点。&lt;/li&gt;
&lt;li&gt;定义RatioCut目标函数：&lt;code&gt;Ratiocut(A1, A2, ..., Ak) = (∑W(Ai, ~Ai)/|Ai|, i∈[1,k])/2&lt;/code&gt;。其中|Ai|代表社区i中的节点数目。 &lt;strong&gt;最小化RatioCut等价于最小化f’Lf&lt;/strong&gt; ，这里的&lt;code&gt;f = (f1, f2, ..., fn)∈R^n&lt;/code&gt;，并且当节点vi∈A时，&lt;code&gt;fi = sqrt(|~A|/|A|)&lt;/code&gt;，否则&lt;code&gt;fi = -sqrt(|A|/|~A|)&lt;/code&gt;。根据上面提过的拉普拉斯矩阵性质，有&lt;code&gt;2f&amp;#39;Lf = ∑wij(fi - fj)^2, i,j from 1 to N&lt;/code&gt;。据此可以根据下面的推导得出，&lt;code&gt;min f&amp;#39;Lf &amp;lt;=&amp;gt; min RatioCut&lt;/code&gt;。&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/laplace%E6%8E%A8%E5%AF%BC.png&quot; width=&quot;500px&quot;&gt;&lt;/li&gt;
&lt;li&gt;因为向量f是单位向量1，所以有&lt;code&gt;|f|^2 = ∑(fi^2) = n&lt;/code&gt;，且&lt;code&gt;f&amp;#39;·1(单位向量）= ∑(fi) = 0&lt;/code&gt;。注意f是列向量，所以&lt;code&gt;f&amp;#39;·f&lt;/code&gt;是值，而&lt;code&gt;f·f&amp;#39;&lt;/code&gt;是一个NxN的矩阵。证明如下：&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/laplace%E6%8E%A8%E5%AF%BC2.png&quot; width=&quot;300px&quot;&gt;&lt;img src=&quot;http://7xktmz.com1.z0.glb.clouddn.com/laplace%E6%8E%A8%E5%AF%BC3.png&quot; width=&quot;300px&quot;&gt;&lt;/li&gt;
&lt;li&gt;假定&lt;code&gt;L·f = λ·f&lt;/code&gt;，这里L是Laplace矩阵，λ是矩阵L的一个特征值，f是L对应λ的特征向量。同时左乘f’，得到&lt;code&gt;f&amp;#39;·L·f = λn&lt;/code&gt;，因为n为定值，因此最小化&lt;code&gt;f&amp;#39;·L·f&lt;/code&gt;等价于最小化λ。因此需要寻找最小的特征值λ和对应的特征向量。因为Laplace矩阵最小的特征值为0，因此取第二小的特征值。更进一步，如果求出拉普拉斯矩阵的前K个特征向量，进行k-Means聚类得到k个簇，就从二聚类拓展到了k聚类。&lt;/li&gt;
&lt;li&gt;完整的算法描述如下&lt;ul&gt;
&lt;li&gt;构造图W，将各数据点相连，边的权重表示数据间的相似度。&lt;/li&gt;
&lt;li&gt;计算L = D - W（D为度矩阵，即W的每一列加到对角线上）&lt;/li&gt;
&lt;li&gt;求L的前k个特征值{λ1, λ2, …, λk}，并且按从小到大顺序排序，求出对应的特征向量vi，每个特征向量是一个Nx1的列向量。&lt;/li&gt;
&lt;li&gt;将这k个特征向量排成Nxk的矩阵，每一行都是k维空间中的一个向量，用k-Means聚类，聚类结果中的每一行的类别就是原来图中的节点所属类别。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;GN算法&quot;&gt;&lt;a href=&quot;#GN算法&quot; class=&quot;headerlink&quot; title=&quot;GN算法&quot;&gt;&lt;/a&gt;GN算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;分裂算法，复杂度为O(mxmxn)，需要事先知道图中社区的数目k。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1、计算每边的边介数，即网络上所有顶点对间的最短路径经过该边的次数。&lt;/li&gt;
&lt;li&gt;2、移除最大介数边。&lt;/li&gt;
&lt;li&gt;3、重新计算剩下边的介数。&lt;/li&gt;
&lt;li&gt;4、重复步骤2，3，直到剩下的社区个数满足指定社区数目k。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Newman快速算法&quot;&gt;&lt;a href=&quot;#Newman快速算法&quot; class=&quot;headerlink&quot; title=&quot;Newman快速算法&quot;&gt;&lt;/a&gt;Newman快速算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;时间复杂度为O(m(m+n))，比GN算法优化较多。是凝聚算法。&lt;/li&gt;
&lt;li&gt;首先将每个节点设为一个单独的社区，选出使模块度Q增值最大的社区合并，如果网络中所有顶点属于同一个社区则停止合并（自底向上的合并方式）。此时已经构造出了一棵凝聚树，这棵树的第k层对应着第k种社区划分方式，最底层对应着每个节点为一个社区。最终通过选取模块度最大的层数作为最佳划分。&lt;/li&gt;
&lt;li&gt;模块度Q的计算如下：假设有n个节点，m条边，每一步合并对应社区数目为r，组成一个rxr的矩阵e，矩阵中eij表示社区i和社区j的结点之间连边的数目在整个网络边数中所占的百分比。&lt;/li&gt;
&lt;li&gt;流程如下：&lt;ul&gt;
&lt;li&gt;1、初始情况下，有n个社区，m条边，若社区i（节点i）与社区j有连边，则eij=1/(2m)，否则为0。&lt;/li&gt;
&lt;li&gt;2、按照ΔQ最大或者最小的方向合并社区，并且更新合并后的模块度。这里增量&lt;code&gt;ΔQ = eij + eji - 2aiaj = 2(eij - aiaj)&lt;/code&gt;，这里的&lt;code&gt;ai = (∑eij)/2m&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;3、合并社区，并且修改矩阵e中的行列数。&lt;/li&gt;
&lt;li&gt;4、重复步骤2、3，合并至树根。&lt;/li&gt;
&lt;li&gt;5、计算模块度最大的社区划分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;派系过滤CPM方法&quot;&gt;&lt;a href=&quot;#派系过滤CPM方法&quot; class=&quot;headerlink&quot; title=&quot;派系过滤CPM方法&quot;&gt;&lt;/a&gt;派系过滤CPM方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;用于发现重叠社区，派系（clique）是任意两点都相连的顶点集合（完全子图）。k-派系表示网络中含有k个节点的完全子图。&lt;/li&gt;
&lt;li&gt;社区内部节点之间相互联系密切，容易形成派系，因此社区内部的边有较大可能形成大的完全子图，而社区之间的边却几乎不可能形成较大的完全子图 =&amp;gt; 从派系寻找社区。&lt;/li&gt;
&lt;li&gt;首先寻找网络中的极大完全子图，利用这些完全子图来寻找k-派系的连通子图，不同的k值对应了不同的社区结构。&lt;/li&gt;
&lt;li&gt;建立重叠矩阵：非对角元素代表两个连通派系中共享的节点数目，对角线元素代表派系的规模。将小于k-1的非对角线元素置为0，小于k的对角线元素置为1，得到k-派系连接矩阵。注意这里的k是输入参数，对结果有影响。k越大则生成的社区越大，社区的结构就越稀疏，通常k为4-6，视网络情况而定。&lt;/li&gt;
&lt;li&gt;CPM算法基于完全子图，因此适合完全子图比较多的网络，也就是边稠密网络，其处理稀疏图的效率较低。算法效率完全取决于寻找完全子图的效率，采用&lt;a href=&quot;http://forec.github.io/2015/09/19/Graph-Algorithms3/&quot;&gt;离线Tarjan算法&lt;/a&gt;会有所提高。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Radicchi算法&quot;&gt;&lt;a href=&quot;#Radicchi算法&quot; class=&quot;headerlink&quot; title=&quot;Radicchi算法&quot;&gt;&lt;/a&gt;Radicchi算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;与GN相同，都基于去边，但不根据边介数，而引进边聚集系数，其算法复杂度为O(m^3/n^2)，适用于稀疏图。&lt;/li&gt;
&lt;li&gt;边聚集系数： &lt;strong&gt;一条边的两个端点和这两个端点的共同邻接点之间的另外两边所组成的三角环与可能包含该边的三角环数的比值&lt;/strong&gt;，即：&lt;code&gt;Cij = Zij/min(ki-1,kj-1)&lt;/code&gt;，这里ki，kj是端点i和j的度，公式中的分母表示该边可能被包含的三角环的最大数，Zij表示网络中包含该边的三角环的实际数目。&lt;/li&gt;
&lt;li&gt;如果网络中的一个三角环中含有一条连接不同社区的边，则该三角环中剩余的两边中还有一条连接同样两社区的可能性较大（因为具有社区结构的网络图中，社区之间的边较为稀少，因此包含一条给定的社区间脸变得三角形不会很多，即连接不同社区边的边聚集系数很小）。 =&amp;gt; 每一步删掉具有最小边聚集系数的边，并重新计算剩余边的边聚集系数（这里只需要重新计算和删除掉的边有关联的边的边聚集系数），循环至网络中不存在任何边。&lt;/li&gt;
&lt;li&gt;算法仅适用于三角环数较多的，如社会网络等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;基于点聚集的局部算法&quot;&gt;&lt;a href=&quot;#基于点聚集的局部算法&quot; class=&quot;headerlink&quot; title=&quot;基于点聚集的局部算法&quot;&gt;&lt;/a&gt;基于点聚集的局部算法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;定义连接相关度：\(\lambda C(\varepsilon, j) = C&lt;em&gt;{1}(j) - C&lt;/em&gt;{2}(j)\)，这里\(C&lt;em&gt;{1}(j)\)指节点j的点聚集系数，\(C&lt;/em&gt;{2}(j)\)指去除社区\(\varepsilon\)内部的所有边以及与其相关联的所有边之后，节点j的点聚集系数。&lt;/li&gt;
&lt;li&gt;定义点聚集系数：一个节点的不同邻接点互为邻接点的概率，公式为\(C(i) = \frac{2E(i)}{k&lt;em&gt;{i}(k&lt;/em&gt;{i}-1)}\)，这里ki是节点i的度，E(i)是与节点i邻接的节点之间的实际连边。整个网络\(varepsilon\)的点聚集系数定义为\(C(ε) = \frac{\Sigma C(i)}{N}\)。&lt;/li&gt;
&lt;li&gt;上面定义的连接相关度用来衡量某个社区ε对其邻接点的影响力大小。如果社区ε的一个邻接点x和x的邻接点间主要通过ε通信，则ε对x有重要影响，x趋向于成为ε的一员。&lt;/li&gt;
&lt;li&gt;以下是社区归纳点的几个约定&lt;ul&gt;
&lt;li&gt;如果节点x有一半以上的邻接点再ε中，则\(x\in \varepsilon\)。&lt;/li&gt;
&lt;li&gt;如果\(C(\varepsilon)=1\)，这意味着ε和它的邻接点们构成连通分量，则该ε的所有邻接点∈ε。&lt;/li&gt;
&lt;li&gt;如果该ε的一个邻接点j有C(j)=1，则j和j的邻接点都属于ε。&lt;/li&gt;
&lt;li&gt;如果ε的邻接点j有C(j) &amp;gt; C(ε)。并且\(\Delte C(\varepsilon,j)\)是ε的所有邻接点中最大非负值，则\(j\in ε\)。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完整流程如下&lt;ul&gt;
&lt;li&gt;以图中某个节点作为局部社区的初始状态，不断寻找j加入社区并update，直到没有符合条件的点，结束局部社区。&lt;/li&gt;
&lt;li&gt;当所有局部社区形成后，分别计算每个社区的内度和外度，将内度小于外度的社区ε合并到与ε最紧密的社区中，直到所有社区都有内度&amp;gt;外度。&lt;/li&gt;
&lt;li&gt;算法缺点是受到代表社区的初始节点影响比较大。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;衡量网络分解：模块度&quot;&gt;&lt;a href=&quot;#衡量网络分解：模块度&quot; class=&quot;headerlink&quot; title=&quot;衡量网络分解：模块度&quot;&gt;&lt;/a&gt;衡量网络分解：模块度&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;设网络分裂为g个社区，定义gxg的矩阵e，其eij表示原网络中连接社区i和社区j中节点的边数在所有边中所占比例。e的迹表示网络中同一社区中节点的边占所有边的比例。\(a&lt;em&gt;i = \Sigma e&lt;/em&gt;{ij}\)表示连接社区i的边所占比例。有\(Q = Tre - {|e|}^2\)，\(\Sigma {a&lt;em&gt;i}^{2} = \Sigma \left( \Sigma e&lt;/em&gt;{ij} \cdot e_{jk} \right) = {|e|}^2 \)。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;参考博客和资料如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/v_july_v/article/details/40738211&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;July的博文《从拉普拉斯矩阵说到谱聚类》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/myan/article/details/1865397&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;孟岩的博文《理解矩阵（一）（二）（三）》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://engr.case.edu/ray_soumya/mlrg/Luxburg07_tutorial_spectral_clustering.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;A Tutorial on Spectral Clustering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://liuzhiqiangruc.iteye.com/blog/2117144&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;谱聚类的算法实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://wenku.baidu.com/link?url=0la9WTtNcZNOV7A0zJmJPXx1XRK935PLZAJyKuGhK5h0vzVToyjdK9mW9eMv2tRc3o3-XFp-73aDn4YldFTpzL5cHigU6C6c9n0Kk33Z8wC&amp;amp;qq-pf-to=pcqq.group&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;复杂网络的社区发现算法研究&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.docin.com/p-886876763.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基于点聚集系数和边聚集系数的社区发现算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原创作品，允许转载，转载时无需告知，但请务必以超链接形式标明文章&lt;a href=&quot;https://forec.github.io/2016/03/12/community-found/&quot;&gt;原始出处&lt;/a&gt;(&lt;a href=&quot;https://forec.github.io/2016/03/12/community-found/&quot;&gt;https://forec.github.io/2016/03/12/community-found/&lt;/a&gt;) 、作者信息（&lt;a href=&quot;https://forec.github.io/&quot;&gt;Forec&lt;/a&gt;）和本声明。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;复杂网络是复杂系统的抽象，其中一个重要特征是网络中所呈现出的社区结构。许多网络是异构的，对于构成网络的不同类型节点所组成的子图称为网络中的社区。整理了几个传统的社区发现算法流程和大致原理，记录备忘。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://forec.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Algorithms" scheme="http://forec.github.io/tags/Algorithms/"/>
    
      <category term="图分割" scheme="http://forec.github.io/tags/%E5%9B%BE%E5%88%86%E5%89%B2/"/>
    
  </entry>
  
</feed>
